{
	"info": {
		"_postman_id": "1571e189-dfda-4023-9364-4fce4f62a6fc",
		"name": "ADP_Prestations_Santé_Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15648122",
		"_collection_link": "https://inetum-cleva.postman.co/workspace/CLEVA-Master~491a802d-eace-4fda-b198-5d182da34b41/collection/15648122-1571e189-dfda-4023-9364-4fce4f62a6fc?action=share&creator=15648122&source=collection_link"
	},
	"item": [
		{
			"name": "Connexion et prérequis",
			"item": [
				{
					"name": "Connexion Cleva",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"token\", pm.response.text());",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "AALR",
									"type": "string"
								},
								{
									"key": "username",
									"value": "ALR",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"{{login}}\",\n    \"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/me/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"me",
								"login"
							]
						},
						"description": "Chargement d'une tâche"
					},
					"response": []
				},
				{
					"name": "Mes informations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"//get ID\r",
									"pm.collectionVariables.set(\"brokerId\", jsonData.data.brokerId);\r",
									"pm.collectionVariables.set(\"personBrokerId\", jsonData.data.person.id);\r",
									"pm.collectionVariables.set(\"loginBroker\", jsonData.data.userLogin);\r",
									"pm.collectionVariables.set(\"profile\", jsonData.data.profiles);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"console.log('Je suis ' + jsonData.data.person.familyName +' ' +jsonData.data.person.firstName);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(pm.collectionVariables.get('folderName') + \" --> \" + this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/me",
							"host": [
								"{{url}}"
							],
							"path": [
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Informations système",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(pm.collectionVariables.get('folderName') + \" --> \" + this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/system/info",
							"host": [
								"{{url}}"
							],
							"path": [
								"system",
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Liste NAF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200){\r",
									"    //getJson data\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    //Content type is json\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    });\r",
									"\r",
									"    //Body of response is present by testing length of response\r",
									"    pm.test(\"Body is present\", () => {\r",
									"        jsonData.length > 1;\r",
									"    });\r",
									"\r",
									"    //Testing if jsonData is an object\r",
									"    pm.test(\"Test jsonData content\", () => {\r",
									"        pm.expect(jsonData).to.be.an(\"object\");\r",
									"\r",
									"    });\r",
									"\r",
									"    let codes = jsonData.data.values;\r",
									"\r",
									"    pm.test(\"Has at least one code in values\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(codes[0].code).to.be.a(\"STRING\");\r",
									"    });\r",
									"\r",
									"    //Set NAF code\r",
									"    pm.collectionVariables.set(\"naf\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"} else {\r",
									"    //status code is not 200\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Liste des codes NAF');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?maxResult=30",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "%Activ",
									"disabled": true
								},
								{
									"key": "maxResult",
									"value": "30"
								},
								{
									"key": "code",
									"value": "01.11",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "NAF"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Récupérer le régime général",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"codeRegimeGeneral\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=REGIME GENERAL",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "REGIME GENERAL"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "SOCIAL_SYSTEMS"
								}
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/settings/lists/:helpListCode?text=REGIME GENERAL",
									"host": [
										"{{url}}"
									],
									"path": [
										"settings",
										"lists",
										":helpListCode"
									],
									"query": [
										{
											"key": "text",
											"value": "REGIME GENERAL"
										}
									],
									"variable": [
										{
											"key": "helpListCode",
											"value": "SOCIAL_SYSTEMS"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Thu, 20 Jan 2022 15:02:42 GMT"
								},
								{
									"key": "Server",
									"value": ""
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"SOCIAL_SYSTEMS\",\n        \"description\": \"Social systems\",\n        \"moreResults\": false,\n        \"title\": \"SocialSystems\",\n        \"type\": \"BUILTIN\",\n        \"values\": [\n            {\n                \"code\": \"01\",\n                \"label\": \"REGIME GENERAL\"\n            }\n        ]\n    },\n    \"status\": \"SUCCESS\"\n}"
						}
					]
				},
				{
					"name": "Récupérer la liste des caisses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"codeCaisseRO\", codes[_.random(0, codes.length-1)].code);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?socialSystemCode={{codeRegimeGeneral}}&text=Ain&limit=100",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "socialSystemCode",
									"value": "{{codeRegimeGeneral}}"
								},
								{
									"key": "text",
									"value": "Ain"
								},
								{
									"key": "limit",
									"value": "100"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "MANDATORY_PLAN_ORGANIZATION"
								}
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/settings/lists/:helpListCode?socialSystemCode={{codeRegimeGeneral}}&limit=100",
									"host": [
										"{{url}}"
									],
									"path": [
										"settings",
										"lists",
										":helpListCode"
									],
									"query": [
										{
											"key": "socialSystemCode",
											"value": "{{codeRegimeGeneral}}"
										},
										{
											"key": "text",
											"value": "rhône",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "100"
										}
									],
									"variable": [
										{
											"key": "helpListCode",
											"value": "MANDATORY_PLAN_ORGANIZATION"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Thu, 20 Jan 2022 15:03:20 GMT"
								},
								{
									"key": "Server",
									"value": ""
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"MANDATORY_PLAN_ORGANIZATION\",\n        \"description\": \"Mandatory Plan Organization\",\n        \"moreResults\": true,\n        \"title\": \"MandatoryPlanOrganization\",\n        \"type\": \"BUILTIN\",\n        \"values\": [\n            {\n                \"code\": \"982\",\n                \"label\": \"AURILLAC\"\n            },\n            {\n                \"code\": \"939\",\n                \"label\": \"CAMIEG\"\n            },\n            {\n                \"code\": \"225\",\n                \"label\": \"CANSSM\"\n            },\n            {\n                \"code\": \"100\",\n                \"label\": \"CAVIMAC\"\n            },\n            {\n                \"code\": \"971\",\n                \"label\": \"CGSS Guadeloupe\"\n            },\n            {\n                \"code\": \"973\",\n                \"label\": \"CGSS Guyane\"\n            },\n            {\n                \"code\": \"972\",\n                \"label\": \"CGSS Martinique\"\n            },\n            {\n                \"code\": \"974\",\n                \"label\": \"CGSS Réunion\"\n            },\n            {\n                \"code\": \"758\",\n                \"label\": \"CNMSS personnel CNMSS\"\n            },\n            {\n                \"code\": \"011\",\n                \"label\": \"CPAM Ain\"\n            },\n            {\n                \"code\": \"021\",\n                \"label\": \"CPAM Aisne\"\n            },\n            {\n                \"code\": \"031\",\n                \"label\": \"CPAM Allier\"\n            },\n            {\n                \"code\": \"061\",\n                \"label\": \"CPAM Alpes-Maritimes\"\n            },\n            {\n                \"code\": \"081\",\n                \"label\": \"CPAM Ardennes\"\n            },\n            {\n                \"code\": \"072\",\n                \"label\": \"CPAM Ardèche\"\n            },\n            {\n                \"code\": \"091\",\n                \"label\": \"CPAM Ariège\"\n            },\n            {\n                \"code\": \"101\",\n                \"label\": \"CPAM Aube\"\n            },\n            {\n                \"code\": \"111\",\n                \"label\": \"CPAM Aude\"\n            },\n            {\n                \"code\": \"121\",\n                \"label\": \"CPAM Aveyron\"\n            },\n            {\n                \"code\": \"673\",\n                \"label\": \"CPAM Bas-Rhin\"\n            },\n            {\n                \"code\": \"131\",\n                \"label\": \"CPAM Bouches-du-Rhône\"\n            },\n            {\n                \"code\": \"141\",\n                \"label\": \"CPAM Calvados\"\n            },\n            {\n                \"code\": \"151\",\n                \"label\": \"CPAM Cantal\"\n            },\n            {\n                \"code\": \"161\",\n                \"label\": \"CPAM Charente\"\n            },\n            {\n                \"code\": \"171\",\n                \"label\": \"CPAM Charente-Maritime\"\n            },\n            {\n                \"code\": \"181\",\n                \"label\": \"CPAM Cher\"\n            },\n            {\n                \"code\": \"191\",\n                \"label\": \"CPAM Corrèze\"\n            },\n            {\n                \"code\": \"201\",\n                \"label\": \"CPAM Corse-du-Sud\"\n            },\n            {\n                \"code\": \"231\",\n                \"label\": \"CPAM Creuse\"\n            },\n            {\n                \"code\": \"211\",\n                \"label\": \"CPAM Côte d'Or\"\n            }\n        ]\n    },\n    \"status\": \"SUCCESS\"\n}"
						}
					]
				},
				{
					"name": "Récupérer la liste des centres",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"codeCentreRO\", codes[_.random(0, codes.length-1)].code);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?mandatoryPlanOrgnizationCode={{codeCaisseRO}}&limit=1000",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "Rhône",
									"disabled": true
								},
								{
									"key": "mandatoryPlanOrgnizationCode",
									"value": "{{codeCaisseRO}}"
								},
								{
									"key": "limit",
									"value": "1000"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "MANDATORY_PLAN_CENTERS"
								}
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/settings/lists/:helpListCode?mandatoryPlanOrgnizationCode={{codeCaisseRO}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"settings",
										"lists",
										":helpListCode"
									],
									"query": [
										{
											"key": "text",
											"value": "Rhône",
											"disabled": true
										},
										{
											"key": "mandatoryPlanOrgnizationCode",
											"value": "{{codeCaisseRO}}"
										}
									],
									"variable": [
										{
											"key": "helpListCode",
											"value": "MANDATORY_PLAN_CENTERS"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Thu, 20 Jan 2022 15:03:47 GMT"
								},
								{
									"key": "Server",
									"value": ""
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"MANDATORY_PLAN_CENTERS\",\n        \"description\": \"Mandatory Plan Centers\",\n        \"moreResults\": true,\n        \"title\": \"MandatoryPlanCenters\",\n        \"type\": \"BUILTIN\",\n        \"values\": [\n            {\n                \"code\": \"000\",\n                \"label\": \"AURILLAC\"\n            },\n            {\n                \"code\": \"603\",\n                \"label\": \"CAMIEG\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CANSSM\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CAVIMAC\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Guadeloupe\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Guyane\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Martinique\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Réunion\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CNMSS personnel CNMSS\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ain\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aisne\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Allier\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Alpes-Maritimes\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ardennes\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ardèche\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ariège\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aube\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aude\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aveyron\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Bas-Rhin\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Bouches-du-Rhône\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Calvados\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Cantal\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Charente\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Charente-Maritime\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Cher\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Corrèze\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Corse-du-Sud\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Creuse\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Côte d'Or\"\n            }\n        ]\n    },\n    \"status\": \"SUCCESS\"\n}"
						}
					]
				},
				{
					"name": "Créer entreprise",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"pm.collectionVariables.set(\"siret\", _.random(1111111, 9999999))\r",
									"pm.collectionVariables.set(\"enterpriseCustomerName\",\"Entreprise \"+\"{{siret}}\");\r",
									"\r",
									"window = {};\r",
									"\r",
									"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
									"\r",
									"window.faker.locale = \"fr\";\r",
									"\r",
									"pm.collectionVariables.set('enterpriseCustomerAdrZipCode', window.faker.address.zipCode());\r",
									"pm.collectionVariables.set('enterpriseCustomerAdrCity', window.faker.address.city());\r",
									"pm.collectionVariables.set('enterpriseCustomerAdrStreet', window.faker.address.streetName());\r",
									"\r",
									"pm.collectionVariables.set('enterpriseCustomerPhone', window.faker.phone.phoneNumber());\r",
									"pm.collectionVariables.set('enterpriseCustomerMail', window.faker.internet.exampleEmail());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"businessInformations is an object\", () => {\r",
									"pm.expect(jsonData.data.businessInformations).to.be.a(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"companyName is a string\", () => {\r",
									"    pm.expect(jsonData.data.businessInformations.companyName).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"type is LEGAL\", () => {\r",
									"    pm.expect(jsonData.data.type).to.eql(\"LEGAL\");\r",
									"});\r",
									"\r",
									"    //get ID\r",
									"pm.collectionVariables.set(\"enterpriseCustomerId\", jsonData.data.id);\r",
									"pm.collectionVariables.set(\"businessInformationsId\", jsonData.data.businessInformations.id);\r",
									"pm.collectionVariables.set(\"enterpriseCustomerAddressId\", jsonData.data.address.id);\r",
									"\r",
									"pm.collectionVariables.set(\"siret\", jsonData.data.businessInformations.siret);\r",
									"pm.collectionVariables.set(\"auxCode\", jsonData.data.auxiliaryCode);\r",
									"\r",
									"/*    pm.collectionVariables.set(\"enterpriseCustomerBankDetailsId\", jsonData.data.bankDetails.id);*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json;charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"businessInformations\": {\n        \"companyName\": \"{{enterpriseCustomerName}}\",\n        \"siret\": \"{{siret}}\",\n        \"nafCode\": \"{{naf}}\"\n    },\n    \"communication\": {\n        \"professionalPhone\": \"{{enterpriseCustomerPhone}}\",\n        \"email\": \"{{enterpriseCustomerMail}}\"\n    },\n    \"address\": {\n        \"countryCode\": \"FR\",\n        \"mainAddress\": true,\n        \"line1\": \"{{enterpriseCustomerAdrStreet}}\",\n        \"line3\": \"{{enterpriseCustomerAdrZipCode}}\",\n        \"line4\": \"{{enterpriseCustomerAdrCity}}\"\n    },\n    \"bankDetails\": {\n        \"iban\": \"FR2012739000501327895759P67\",\n        \"bic\": \"AGRIFRPP\",\n        \"bank\": \"Credit agricole\",\n        \"bankAddress1\": \"14 {{enterpriseCustomerAdrStreet}}\",\n        \"bankAddress2\": \"Second RIB\",\n        \"zipCode\": \"{{enterpriseCustomerAdrZipCode}}\",\n        \"city\": \"{{enterpriseCustomerAdrCity}}\",\n        \"activeUses\": [\n            {\n                \"code\": \"P\"\n            }\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/enterprise/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"enterprise",
								"customers"
							]
						},
						"description": "On crée une nouvelle entreprise."
					},
					"response": []
				},
				{
					"name": "Rechercher id VIAMEDIS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"VIAMEDISId\", jsonData.data[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?name=VIAMEDIS&type=CONCENTRATEUR",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "name",
									"value": "VIAMEDIS"
								},
								{
									"key": "type",
									"value": "CONCENTRATEUR"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Créer devis base PSCS1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    //get ID\r",
									"    pm.collectionVariables.set(\"policeIDPSCS1\", jsonData.data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customerId\": \"{{enterpriseCustomerId}}\",\n    \"productCode\": \"PSCS1\",\n    \"hubId\":\"{{VIAMEDISId}}\",\n    \"description\": \"Santé précalculé : Produit collectif standard\",\n    \"status\": {\n        \"subcode\": \"01\",\n        \"effectiveDate\": \"{{2MonthsAgo}}\"\n\n    },\n    \"typology\": {\n        \"basic\": true,\n        \"basicType\": \"ENTERPRISE\"\n    },\n    \"jobClassCode\": \"ENSEMBLE\",\n    \"freeZones\": {\n        \"PPSPROD_PSCS1_ZL_SOCLE_NIV\": {\n            \"type\": \"STRING\",\n            \"value\": \"NIVEAU ESSENTIEL\"\n        },\n        \"PPSPROD_PSCS1_ZL_AGE_MOY_SAL\": {\n            \"type\": \"STRING\",\n            \"value\": \"50\"\n        },\n        \"PPSPROD_PSCS1_ZL_QUALITE_AUTORISEES_SOCLE\": {\n            \"type\": \"STRING\",\n            \"value\": \"A\"\n        },\n        \"PPSPROD_PSCS1_SI_RENFORT\": {\n            \"type\": \"BOOLEAN\",\n            \"value\": false\n        },\n        \"PPSPROD_PSCS1_ZL_DEPART_GEO\": {\n            \"type\": \"STRING\",\n            \"value\": \"69\"\n        },\n        \"PPSPROD_PSCS1_SI_EXTENSION\": {\n            \"type\": \"BOOLEAN\",\n            \"value\": false\n        },\n        \"PPSPROD_PSCS1_COTI_SOCLE\": {\n            \"type\": \"STRING\",\n            \"value\": \"PSCS1_ASS_SAL\"\n        }\n    },\n        \"payment\": {\n        \"periodicity\": \"ANNUAL\",\n        \"termPayer\": \"CUSTOMER\",\n        \"termPaymentCode\": \"PA\",\n        \"directDebitDay\": \"17\"\n    },\n    \"contributionBase\": {\n        \"code\": \"PSCS1_ASS_IF\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/health/collective/contracts",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"collective",
								"contracts"
							]
						},
						"description": "La méthode permet de créer un devis ou contrat collectif en santé ou prévoyance. La création nécessitera un code correspondant à un produit santé disponible. Vous pouvez récuperer la liste des produits disponible avec la ressource HelpList"
					},
					"response": []
				},
				{
					"name": "Définir les modèles de couverture et cotisation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "ITN_ACTIVATE_SCENARIO",
								"type": "text",
								"value": "TRUE",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"defaultFormula\":\"PSCS1_F_BASE_ESSENTIEL\",\r\n    \"effectiveDate\":\"{{2MonthsAgo}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/health/collective/contracts/:id/coverageModels",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"collective",
								"contracts",
								":id",
								"coverageModels"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{policeIDPSCS1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Creer Affiliation en cours",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"window = {};\r",
									"\r",
									"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
									"\r",
									"window.faker.locale = \"fr\";\r",
									"\r",
									"pm.collectionVariables.set(\"naturalPersonFamilyName\", window.faker.name.lastName().toUpperCase());\r",
									"pm.collectionVariables.set(\"naturalPersonFirstName\", window.faker.name.firstName(\"Male\").toUpperCase());\r",
									"\r",
									"pm.collectionVariables.set(\"naturalPersonGender\",\"MALE\");\r",
									"\r",
									"pm.collectionVariables.set('naturalPersonAdrZipCode', window.faker.address.zipCode());\r",
									"pm.collectionVariables.set('naturalPersonAdrCity', window.faker.address.city());\r",
									"pm.collectionVariables.set('naturalPersonAdressStreetName', window.faker.address.streetName());\r",
									"\r",
									"pm.collectionVariables.set('naturalPersonPhone', window.faker.phone.phoneNumber());\r",
									"pm.collectionVariables.set('naturalPersonMail', window.faker.internet.exampleEmail());\r",
									"\r",
									"pm.collectionVariables.set(\"naturalPersonBirthDate\", moment().add(-30, 'years').format(\"YYYY-MM-DD\"));  \r",
									"\r",
									"pm.collectionVariables.set('naturalPersonAdressNumber', _.random(1, 10));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"    const jsonData = pm.response.json();\r",
									"\r",
									"        //get ID\r",
									"    pm.collectionVariables.set(\"affiliationPSCS1Id\", jsonData.data.id);\r",
									"        //get ID\r",
									"    pm.collectionVariables.set(\"insuredId\", jsonData.data.insuredId);\r",
									"    //get ID\r",
									"    pm.collectionVariables.set(\"personId\", jsonData.data.person.id);\r",
									"    \r",
									"    pm.collectionVariables.set(\"insuredName\", jsonData.data.person.completeName);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "ITN_ACTIVATE_SCENARIO",
								"value": "true",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json;charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contractId\": \"{{policeIDPSCS1}}\",\n    \"effectiveDate\": \"{{2MonthsAgo}}\",\n    \"status\": \"IN_PROGRESS\",\n    \"companyEntryDate\": \"{{2MonthsAgo}}\",\n    \"person\": {\n        \"firstName\":\"{{naturalPersonFirstName}}\",\n        \"familyName\":\"{{naturalPersonFamilyName}}\",\n        \"gender\":\"{{naturalPersonGender}}\",\n        \"birthDate\":\"1990-10-10\"\n    },\n    \"communication\": {\n        \"cellphone\": \"+33-655-5111-94\",\n        \"email\": \"{{naturalCustomerFirstName}}{{naturalCustomerFamilyName}}@smallville.com\",\n        \"emailSendingAgreement\": \"SENDING_EMAILS_ACCEPTED\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/health/affiliates",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"affiliates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ajouter un régime obligatoire",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"//get ID\r",
									"pm.collectionVariables.set(\"mandatoryPlansId\", jsonData.data.identification);\r",
									"\r",
									"//Testing if jsonData is an object\r",
									"pm.test(\"identification is 1800144109133\", () => {\r",
									"    pm.expect(jsonData.data.identification).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//Testing if jsonData is an object\r",
									"pm.test(\"key is 88\", () => {\r",
									"    pm.expect(jsonData.data.key).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//Testing if jsonData is an object\r",
									"pm.test(\"systemCode is 01\", () => {\r",
									"    pm.expect(jsonData.data.systemCode).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//NIR generator\r",
									"pm.collectionVariables.set(\"Sexe\", _.random(1, 2));\r",
									"pm.collectionVariables.set(\"AnneeNaissance\", _.random(10, 99));\r",
									"pm.collectionVariables.set(\"MoisNaissance\", \"0\" + _.random(1, 9));\r",
									"pm.collectionVariables.set(\"DepartementNaissance\", _.random(10, 80));\r",
									"pm.collectionVariables.set(\"InseeCommune\", _.random(100, 800));\r",
									"pm.collectionVariables.set(\"NumeroOrdre\", _.random(100, 999));\r",
									"\r",
									"pm.collectionVariables.set(\"nir\",pm.collectionVariables.get(\"Sexe\")+\"\"+pm.collectionVariables.get(\"AnneeNaissance\")+pm.collectionVariables.get(\"MoisNaissance\")+pm.collectionVariables.get(\"DepartementNaissance\")+pm.collectionVariables.get(\"InseeCommune\")+pm.collectionVariables.get(\"NumeroOrdre\"));\r",
									"var cleNir = 97 - (pm.collectionVariables.get(\"nir\") %97);\r",
									"if (cleNir < 10){\r",
									"    cleNir == 0 + \"\"+ cleNir;\r",
									"}\r",
									"pm.collectionVariables.set(\"cleNir\", cleNir);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"activateNOEMIE\": true,\r\n    \"alsaceMoselle\": false,\r\n    \"birthDate\": \"{{35YearsAgo}}\",\r\n    \"effectiveDate\": \"{{5MonthsAgo}}\",\r\n    \"identification\": \"{{nir}}\",\r\n    \"identificationKey\": \"{{cleNir}}\",\r\n    \"key\": \"{{cleNir}}\",\r\n    \"number\": \"{{nir}}\",\r\n    \"centerCode\": \"000\",\r\n    \"organizationCode\": \"011\",\r\n    \"systemCode\": \"{{codeRegimeGeneral}}\"\r\n}\r\n\r\n/*\r\n    \"centerCode\": \"{{codeCentreRO}}\",\r\n    \"organizationCode\": \"{{codeCaisseRO}}\",\r\n    */",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/persons/:id/mandatoryPlans",
							"host": [
								"{{url}}"
							],
							"path": [
								"persons",
								":id",
								"mandatoryPlans"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{personId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ajouter un RIB à une personne physique",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"window = {};\r",
									"\r",
									"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
									"\r",
									"window.faker.locale = \"fr\";\r",
									"\r",
									"pm.collectionVariables.set('companyAdrZipCode', window.faker.address.zipCode());\r",
									"pm.collectionVariables.set('companyAdrCity', window.faker.address.city());\r",
									"pm.collectionVariables.set('companyAdrStreet', window.faker.address.streetName());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 201){\r",
									"    //getJson data\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    //Content type is json\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    });\r",
									"\r",
									"    //Body of response is present by testing length of response\r",
									"    pm.test(\"Body is present\", () => {\r",
									"        jsonData.length > 1;\r",
									"    });\r",
									"\r",
									"    //Testing if jsonData is an object\r",
									"    pm.test(\"Test jsonData content\", () => {\r",
									"        pm.expect(jsonData).to.be.an(\"object\");\r",
									"\r",
									"    });\r",
									"\r",
									"    //testing bank information\r",
									"    pm.test(\"bank name is correct\", () => {\r",
									"        pm.expect(jsonData.data.bank).to.eql(\"Credit agricole\");\r",
									"    });\r",
									"\r",
									"    //testing iban information\r",
									"    pm.test(\"iban is correct\", () => {\r",
									"        pm.expect(jsonData.data.iban).to.eql(\"FR2012739000501327895759P67\");\r",
									"    });\r",
									"\r",
									"    pm.collectionVariables.set(\"personBankDetailsID\", jsonData.data.id)\r",
									"\r",
									"\r",
									"} else {\r",
									"    //status code is not 201\r",
									"    pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"iban\": \"FR2012739000501327895759P67\",\r\n    \"bic\": \"AGRIFRPP\",\r\n    \"bank\": \"Credit agricole\",\r\n    \"bankAddress1\": \"14 {{companyAdrStreet}}\",\r\n    \"bankAddress2\": \"Second RIB\",\r\n    \"zipCode\": \"{{companyAdrZipCode}}\",\r\n    \"city\": \"{{companyAdrCity}}\",\r\n    \"activeUses\": [\r\n        {\r\n            \"code\": \"P\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/persons/:id/bankDetails",
							"host": [
								"{{url}}"
							],
							"path": [
								"persons",
								":id",
								"bankDetails"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{personId}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "Ajouter un RIB à une personne physique",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"iban\": \"FR2012739000501327895759P67\",\r\n    \"bic\": \"{{$randomBankAccountBic}}\",\r\n    \"bank\": \"Credit agricole\",\r\n    \"bankAddress1\": \"14 {{companyAdrStreet}}\",\r\n    \"bankAddress2\": \"Second RIB\",\r\n    \"zipCode\": \"{{companyAdrZipCode}}\",\r\n    \"city\": \"{{companyAdrCity}}\",\r\n    \"countryCode\": \"FR\",\r\n    \"activeUses\": [\"AU\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/persons/:id/bankDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"persons",
										":id",
										"bankDetails"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personID}}"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Wed, 26 Jan 2022 15:06:17 GMT"
								},
								{
									"key": "Server",
									"value": ""
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": 201,\n    \"data\": {\n        \"activeUses\": [\n            \"AU\"\n        ],\n        \"bank\": \"Credit agricole\",\n        \"bankAddress1\": \"14 725 Rue Baraban\",\n        \"bankAddress2\": \"Second RIB\",\n        \"bic\": \"HGMOSIQ1\",\n        \"city\": \"Nanterre\",\n        \"countryCode\": \"FR\",\n        \"creationDate\": \"2022-01-26T16:06:17+01:00\",\n        \"iban\": \"FR2012739000501327895759P67\",\n        \"id\": \"20000237\",\n        \"zipCode\": \"67271\"\n    },\n    \"status\": \"SUCCESS\"\n}"
						}
					]
				},
				{
					"name": "Ajouter une adresse à une personne physique",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"window = {};\r",
									"\r",
									"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
									"\r",
									"window.faker.locale = \"fr\";\r",
									"\r",
									"pm.collectionVariables.set('customerAdrZipCode', window.faker.address.zipCode());\r",
									"pm.collectionVariables.set('customerAdrCity', window.faker.address.city());\r",
									"pm.collectionVariables.set('customerAdressStreetName', window.faker.address.streetName());\r",
									"\r",
									"pm.collectionVariables.set('customerAdressNumber', _.random(1, 10));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 201){\r",
									"    //getJson data\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    //Content type is json\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    });\r",
									"\r",
									"    //Body of response is present by testing length of response\r",
									"    pm.test(\"Body is present\", () => {\r",
									"        jsonData.length > 1;\r",
									"    });\r",
									"\r",
									"    //Testing if jsonData is an object\r",
									"    pm.test(\"Test jsonData content\", () => {\r",
									"        pm.expect(jsonData).to.be.an(\"object\");\r",
									"\r",
									"    });\r",
									"\r",
									"    //testing bank information\r",
									"    pm.test(\"city is correct\", () => {\r",
									"        pm.expect(jsonData.data.city).to.be.a(\"string\");\r",
									"    });\r",
									"\r",
									"    //testing iban information\r",
									"    pm.test(\"street is correct\", () => {\r",
									"        pm.expect(jsonData.data.line3).to.be.a(\"string\");\r",
									"    });\r",
									"\r",
									"} else {\r",
									"    //status code is not 201\r",
									"    pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json;charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"{{customerAdrCity}}\",\r\n    \"countryCode\": \"FR\",\r\n    \"line2\": \"{{customerAdressNumber}}\",\r\n    \"line3\": \"{{customerAdressStreetName}}\",\r\n    \"mainAddress\": true,\r\n    \"zipCode\": \"{{customerAdrZipCode}}\",\r\n    \"activeUses\": [\r\n        {\r\n            \"code\": \"P\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/persons/:id/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"persons",
								":id",
								"addresses"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{personId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Transformer devis PSCS1 en contrat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    //get contract Number\r",
									"    pm.collectionVariables.set(\"contractNumberPSCS1\", jsonData.data.number);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/health/collective/contracts/:id/subscribe",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"collective",
								"contracts",
								":id",
								"subscribe"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{policeIDPSCS1}}",
									"description": "(Required) Quote identifier"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Liste globales",
			"item": [
				{
					"name": "Liste types organismes RO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check response status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"actCodeGeneralPractitioner\", codes[_.random(0, codes.length-1)].code);\r",
									"pm.collectionVariables.set(\"actLabelGeneralPractitioner\", codes[_.random(0, codes.length-1)].label);\r",
									"\r",
									"console.log(\"Code acte selectionné : \" + pm.collectionVariables.get(\"actCodeGeneralPractitioner\") + \" (\" +  pm.collectionVariables.get(\"actLabelGeneralPractitioner\") + \")\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?isMandatoryPlanCenter=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "isMandatoryPlanCenter",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "SERVICE_PROVIDER_TYPES"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Liste types centre RO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check response status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"actCodeGeneralPractitioner\", codes[_.random(0, codes.length-1)].code);\r",
									"pm.collectionVariables.set(\"actLabelGeneralPractitioner\", codes[_.random(0, codes.length-1)].label);\r",
									"\r",
									"console.log(\"Code acte selectionné : \" + pm.collectionVariables.get(\"actCodeGeneralPractitioner\") + \" (\" +  pm.collectionVariables.get(\"actLabelGeneralPractitioner\") + \")\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?isVehiclesProvider=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "isVehiclesProvider",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "SERVICE_PROVIDER_TYPES"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Liste types executants soins",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check response status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"actCodeGeneralPractitioner\", codes[_.random(0, codes.length-1)].code);\r",
									"pm.collectionVariables.set(\"actLabelGeneralPractitioner\", codes[_.random(0, codes.length-1)].label);\r",
									"console.log(\"Code acte selectionné : \" + pm.collectionVariables.get(\"actCodeGeneralPractitioner\") + \" (\" +  pm.collectionVariables.get(\"actLabelGeneralPractitioner\") + \")\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?isHealthProvider=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "isHealthProvider",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "SERVICE_PROVIDER_TYPES"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tous les types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check response status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=MED",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "MED"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "SERVICE_PROVIDER_TYPES"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Liste types régimes sociaux",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check response status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"generalSchemeInsurance\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"//general scheme insurance : régime général assurance\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=REGIME GENERAL",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "REGIME GENERAL"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "SOCIAL_SYSTEMS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Liste des caisses RO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check response status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"fundCodeMandatoryPlan\", codes[_.random(0, codes.length-1)].code);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?socialSystemCode={{generalSchemeInsurance}}&text=rhône",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "socialSystemCode",
									"value": "{{generalSchemeInsurance}}"
								},
								{
									"key": "text",
									"value": "rhône"
								},
								{
									"key": "limit",
									"value": "100",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "MANDATORY_PLAN_ORGANIZATION"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Liste des centres RO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check response status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=Rhône&mandatoryPlanOrgnizationCode={{generalSchemeInsurance}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "Rhône"
								},
								{
									"key": "mandatoryPlanOrgnizationCode",
									"value": "{{generalSchemeInsurance}}"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "MANDATORY_PLAN_CENTERS"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set('folderName','Listes globales');"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Recherche de prestations",
			"item": [
				{
					"name": "Rechercher des prestations par supplementaryPlanActCode",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/statements?creationDateMin={{4MonthsAgo}}&creationDateMax={{currentDate}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements"
							],
							"query": [
								{
									"key": "insuredId",
									"value": "20000413",
									"disabled": true
								},
								{
									"key": "insuredFirstName",
									"value": "BLONDEAU",
									"disabled": true
								},
								{
									"key": "insuredFamilyName",
									"value": "NATHALIE",
									"disabled": true
								},
								{
									"key": "insuredSocialSecurityNumber",
									"value": "1851069112178",
									"disabled": true
								},
								{
									"key": "contractId",
									"value": "20000613",
									"disabled": true
								},
								{
									"key": "contractNumber",
									"value": "PSTS1_C_00250",
									"disabled": true
								},
								{
									"key": "statementNumber",
									"value": "SMA-00541",
									"disabled": true
								},
								{
									"key": "healthProfessionalReference",
									"value": "120035",
									"disabled": true
								},
								{
									"key": "healthProfessionalId",
									"value": "1000010",
									"disabled": true
								},
								{
									"key": "invoiceNumber",
									"value": "021999103",
									"disabled": true
								},
								{
									"key": "supplementaryPlanActCode",
									"value": "TCG",
									"disabled": true
								},
								{
									"key": "supplementaryPlanAmountMin",
									"value": "21",
									"disabled": true
								},
								{
									"key": "supplementaryPlanAmountMax",
									"value": "20",
									"disabled": true
								},
								{
									"key": "mandatoryPlanActCode",
									"value": "2325120",
									"disabled": true
								},
								{
									"key": "externalReference",
									"value": "45584547888",
									"disabled": true
								},
								{
									"key": "creationDateMin",
									"value": "{{4MonthsAgo}}"
								},
								{
									"key": "creationDateMax",
									"value": "{{currentDate}}"
								},
								{
									"key": "treatmentsDateMin",
									"value": "2021-06-01",
									"disabled": true
								},
								{
									"key": "treatmentsDateMax",
									"value": "2021-06-01",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "100",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Recherches des lignes de prestations",
			"item": [
				{
					"name": "Recherche de lignes par code acte",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/statements/lines?supplementaryPlanActCode=TCG&limit=20",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								"lines"
							],
							"query": [
								{
									"key": "insuredId",
									"value": "-86588940.99180481",
									"description": "ID of the insured",
									"disabled": true
								},
								{
									"key": "insuredName",
									"value": "ex aute in",
									"description": "Insured Name",
									"disabled": true
								},
								{
									"key": "insuredSocialSecurityNumber",
									"value": "ex aute in",
									"description": "Social security number",
									"disabled": true
								},
								{
									"key": "beneficiaryOfCareId",
									"value": "-86588940.99180481",
									"description": "ID of the beneficiary of cares",
									"disabled": true
								},
								{
									"key": "beneficiaryOfCareName",
									"value": "ex aute in",
									"description": "Beneficiary of cares name",
									"disabled": true
								},
								{
									"key": "contractNumber",
									"value": "ex aute in",
									"description": "Contract number",
									"disabled": true
								},
								{
									"key": "statementNumber",
									"value": "ex aute in",
									"description": "Statement number",
									"disabled": true
								},
								{
									"key": "healthProfessionalId",
									"value": "-86588940.99180481",
									"description": "Health professional Id",
									"disabled": true
								},
								{
									"key": "healthProfessionalReference",
									"value": "ex aute in",
									"description": "Health professional Reference (FINESS ou ADELI)",
									"disabled": true
								},
								{
									"key": "invoiceNumber",
									"value": "ex aute in",
									"description": "Invoice number",
									"disabled": true
								},
								{
									"key": "supplementaryPlanActCode",
									"value": "TCG",
									"description": "Supplementary Plan Act Code"
								},
								{
									"key": "supplementaryPlanAmountMin",
									"value": "ex aute in",
									"description": "Supplementary Plan amount min",
									"disabled": true
								},
								{
									"key": "supplementaryPlanAmountMax",
									"value": "ex aute in",
									"description": "Supplementary Plan amount max",
									"disabled": true
								},
								{
									"key": "mandatoryPlanActCode",
									"value": "ex aute in",
									"description": "Mandatory Plan Act Code",
									"disabled": true
								},
								{
									"key": "externalReference",
									"value": "ex aute in",
									"description": "Statement external reference",
									"disabled": true
								},
								{
									"key": "creationDateMin",
									"value": "1997-07-03T11:05:57.080Z",
									"description": "Creation date minimum",
									"disabled": true
								},
								{
									"key": "creationDateMax",
									"value": "1997-07-03T11:05:57.080Z",
									"description": "Creation date maximum",
									"disabled": true
								},
								{
									"key": "treatmentsDateMin",
									"value": "1997-07-03T11:05:57.080Z",
									"description": "Treatments date minimum",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Zero-indexed offset",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "20",
									"description": "Maximum of items returned"
								},
								{
									"key": "sorters",
									"value": "+id",
									"description": "Properties to sort results with, prefix by + for ascending or - for descending",
									"disabled": true
								},
								{
									"key": "sorters",
									"value": "+id",
									"description": "Properties to sort results with, prefix by + for ascending or - for descending",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche de lignes par assuré",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/statements/lines?insuredFamilyName=BERNARD&limit=20&insuredFirstName=MOTIELLE",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								"lines"
							],
							"query": [
								{
									"key": "insuredId",
									"value": "1000121",
									"description": "ID of the insured",
									"disabled": true
								},
								{
									"key": "insuredFamilyName",
									"value": "BERNARD",
									"description": "Insured Name"
								},
								{
									"key": "insuredSocialSecurityNumber",
									"value": "ex aute in",
									"description": "Social security number",
									"disabled": true
								},
								{
									"key": "beneficiaryOfCareId",
									"value": "-86588940.99180481",
									"description": "ID of the beneficiary of cares",
									"disabled": true
								},
								{
									"key": "beneficiaryOfCareName",
									"value": "ex aute in",
									"description": "Beneficiary of cares name",
									"disabled": true
								},
								{
									"key": "contractNumber",
									"value": "ex aute in",
									"description": "Contract number",
									"disabled": true
								},
								{
									"key": "statementNumber",
									"value": "ex aute in",
									"description": "Statement number",
									"disabled": true
								},
								{
									"key": "healthProfessionalId",
									"value": "-86588940.99180481",
									"description": "Health professional Id",
									"disabled": true
								},
								{
									"key": "healthProfessionalReference",
									"value": "ex aute in",
									"description": "Health professional Reference (FINESS ou ADELI)",
									"disabled": true
								},
								{
									"key": "invoiceNumber",
									"value": "ex aute in",
									"description": "Invoice number",
									"disabled": true
								},
								{
									"key": "supplementaryPlanActCode",
									"value": "TCG",
									"description": "Supplementary Plan Act Code",
									"disabled": true
								},
								{
									"key": "supplementaryPlanAmountMin",
									"value": "ex aute in",
									"description": "Supplementary Plan amount min",
									"disabled": true
								},
								{
									"key": "supplementaryPlanAmountMax",
									"value": "ex aute in",
									"description": "Supplementary Plan amount max",
									"disabled": true
								},
								{
									"key": "mandatoryPlanActCode",
									"value": "ex aute in",
									"description": "Mandatory Plan Act Code",
									"disabled": true
								},
								{
									"key": "externalReference",
									"value": "ex aute in",
									"description": "Statement external reference",
									"disabled": true
								},
								{
									"key": "creationDateMin",
									"value": "1997-07-03T11:05:57.080Z",
									"description": "Creation date minimum",
									"disabled": true
								},
								{
									"key": "creationDateMax",
									"value": "1997-07-03T11:05:57.080Z",
									"description": "Creation date maximum",
									"disabled": true
								},
								{
									"key": "treatmentsDateMin",
									"value": "1997-07-03T11:05:57.080Z",
									"description": "Treatments date minimum",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Zero-indexed offset",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "20",
									"description": "Maximum of items returned"
								},
								{
									"key": "sorters",
									"value": "+id",
									"description": "Properties to sort results with, prefix by + for ascending or - for descending",
									"disabled": true
								},
								{
									"key": "sorters",
									"value": "+id",
									"description": "Properties to sort results with, prefix by + for ascending or - for descending",
									"disabled": true
								},
								{
									"key": "insuredFirstName",
									"value": "MOTIELLE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche de lignes par professionel de santé",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/statements/lines?healthProfessionalReference=120035&limit=10",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								"lines"
							],
							"query": [
								{
									"key": "insuredId",
									"value": "1000420",
									"description": "ID of the insured",
									"disabled": true
								},
								{
									"key": "insuredName",
									"value": "BERNARD MOTIELLE",
									"description": "Insured Name",
									"disabled": true
								},
								{
									"key": "insuredSocialSecurityNumber",
									"value": "ex aute in",
									"description": "Social security number",
									"disabled": true
								},
								{
									"key": "beneficiaryOfCareId",
									"value": "-86588940.99180481",
									"description": "ID of the beneficiary of cares",
									"disabled": true
								},
								{
									"key": "beneficiaryOfCareName",
									"value": "ex aute in",
									"description": "Beneficiary of cares name",
									"disabled": true
								},
								{
									"key": "contractNumber",
									"value": "ex aute in",
									"description": "Contract number",
									"disabled": true
								},
								{
									"key": "statementNumber",
									"value": "ex aute in",
									"description": "Statement number",
									"disabled": true
								},
								{
									"key": "healthProfessionalId",
									"value": "{{healthProfessionalId}}",
									"description": "Health professional Id",
									"disabled": true
								},
								{
									"key": "healthProfessionalReference",
									"value": "120035",
									"description": "Health professional Reference (FINESS ou ADELI)"
								},
								{
									"key": "invoiceNumber",
									"value": "ex aute in",
									"description": "Invoice number",
									"disabled": true
								},
								{
									"key": "supplementaryPlanActCode",
									"value": "TCG",
									"description": "Supplementary Plan Act Code",
									"disabled": true
								},
								{
									"key": "supplementaryPlanAmountMin",
									"value": "ex aute in",
									"description": "Supplementary Plan amount min",
									"disabled": true
								},
								{
									"key": "supplementaryPlanAmountMax",
									"value": "ex aute in",
									"description": "Supplementary Plan amount max",
									"disabled": true
								},
								{
									"key": "mandatoryPlanActCode",
									"value": "ex aute in",
									"description": "Mandatory Plan Act Code",
									"disabled": true
								},
								{
									"key": "externalReference",
									"value": "ex aute in",
									"description": "Statement external reference",
									"disabled": true
								},
								{
									"key": "creationDateMin",
									"value": "1997-07-03T11:05:57.080Z",
									"description": "Creation date minimum",
									"disabled": true
								},
								{
									"key": "creationDateMax",
									"value": "1997-07-03T11:05:57.080Z",
									"description": "Creation date maximum",
									"disabled": true
								},
								{
									"key": "treatmentsDateMin",
									"value": "1997-07-03T11:05:57.080Z",
									"description": "Treatments date minimum",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Zero-indexed offset",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Maximum of items returned"
								},
								{
									"key": "sorters",
									"value": "+id",
									"description": "Properties to sort results with, prefix by + for ascending or - for descending",
									"disabled": true
								},
								{
									"key": "sorters",
									"value": "+id",
									"description": "Properties to sort results with, prefix by + for ascending or - for descending",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set('folderName','Recherche de prestations');"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Prestataire médecin",
			"item": [
				{
					"name": "Connexion CLEVA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"token\", pm.response.text());",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"console.log(pm.response.text());",
									"",
									"//En attendant d'avoir l'API sur le professionnel de santé je le mock ici",
									"pm.collectionVariables.set(\"healthProfessionalId\", 1000010);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"pm.collectionVariables.set(\"dateDuJour\", moment().format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateDuJour_Plus_10_Jours\", moment().add(10, 'days').format(\"YYYY-MM-DD\"));\r",
									"\r",
									"pm.collectionVariables.set(\"dateDuJour_Plus_1_Mois\", moment().add(30, 'days').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateDuJour_Plus_6_Mois\", moment().add(180, 'days').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateDuJour_Moins_1_Mois\", moment().add(-30, 'days').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateDuJour_Moins_6_Mois\", moment().add(-180, 'days').format(\"YYYY-MM-DD\"));\r",
									"\r",
									"//Date de naissances\r",
									"pm.collectionVariables.set(\"dateNaissance10Ans\", moment().add(-10, 'years').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateNaissance20Ans\", moment().add(-20, 'years').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateNaissance30Ans\", moment().add(-30, 'years').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateNaissance40Ans\", moment().add(-40, 'years').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateNaissance50Ans\", moment().add(-50, 'years').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateNaissance60Ans\", moment().add(-60, 'years').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateNaissance70Ans\", moment().add(-70, 'years').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateNaissance80Ans\", moment().add(-80, 'years').format(\"YYYY-MM-DD\"));\r",
									"\r",
									"pm.collectionVariables.set(\"dateDuJourFormatRecherche\", moment().format(\"YYYY/MM/DD\"));\r",
									"\r",
									"console.info(pm.collectionVariables.get('folderName') + \" --> \" + this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "AALR",
									"type": "string"
								},
								{
									"key": "username",
									"value": "ALR",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"{{login}}\",\n    \"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/me/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"me",
								"login"
							]
						},
						"description": "Chargement d'une tâche"
					},
					"response": []
				},
				{
					"name": "Liste NAF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"console.log(codes);\r",
									"\r",
									"//Set NAF code\r",
									"pm.collectionVariables.set(\"nafDoctor\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"//Code NAF selectionné\r",
									"console.log('Code NAF selectionné : ' +pm.collectionVariables.get(\"naf\"));\r",
									"\r",
									"pm.visualizer.set(pm.collectionVariables.get(\"templateListes\"), {\r",
									"    response: pm.response.json()\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(pm.collectionVariables.get('folderName') + \" --> \" + this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?maxResult=50&code=8622C",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "Sant",
									"disabled": true
								},
								{
									"key": "maxResult",
									"value": "50"
								},
								{
									"key": "code",
									"value": "8622C"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "NAF"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Type prestataire médecin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"codeProviderDoctorType\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"pm.collectionVariables.set(\"labelProviderDoctorType\", codes[_.random(0, codes.length-1)].label);\r",
									"\r",
									"console.log(\"Type prestataire : \" + pm.collectionVariables.get(\"codeProviderDoctorType\") + \" (\" +  pm.collectionVariables.get(\"labelProviderDoctorType\") + \")\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=Médecin Conseil",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "Médecin Conseil"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "SERVICE_PROVIDER_TYPES"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Liste titres entreprises médecin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"providerTitle\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"pm.visualizer.set(pm.collectionVariables.get(\"templateListes\"), {\r",
									"    response: pm.response.json()\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(pm.collectionVariables.get('folderName') + \" --> \" + this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=cab&personType=LEGAL",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "cab"
								},
								{
									"key": "maxResult",
									"value": "15",
									"disabled": true
								},
								{
									"key": "personType",
									"value": "LEGAL"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "TITLES",
									"description": "(Required) Code of the HelpList"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Liste des types groupes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"providerGroup\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"pm.visualizer.set(pm.collectionVariables.get(\"templateListes\"), {\r",
									"    response: pm.response.json()\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(pm.collectionVariables.get('folderName') + \" --> \" + this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "Alm",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "PROVIDER_GROUPS",
									"description": "(Required) Code of the HelpList"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Liste des types de conventions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"groupAlmerys\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"pm.visualizer.set(pm.collectionVariables.get(\"templateListes\"), {\r",
									"    response: pm.response.json()\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(pm.collectionVariables.get('folderName') + \" --> \" + this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "Alm",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "PROVIDER_AGREEMENTS",
									"description": "(Required) Code of the HelpList"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Nouveau médecin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"window = {};\r",
									"\r",
									"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
									"\r",
									"window.faker.locale = \"fr\";\r",
									"\r",
									"    pm.collectionVariables.set(\"providerFamilyName\", window.faker.name.lastName());\r",
									"    pm.collectionVariables.set(\"providerFirstName\", window.faker.name.firstName());\r",
									"\r",
									"pm.collectionVariables.set('providerAdrZipCode', window.faker.address.zipCode());\r",
									"pm.collectionVariables.set('providerAdrCity', window.faker.address.city());\r",
									"pm.collectionVariables.set('providerAdrStreet', window.faker.address.streetName());\r",
									"pm.collectionVariables.set('providerAdrLatitude', window.faker.address.latitude());\r",
									"pm.collectionVariables.set('providerAdrLongitude', window.faker.address.longitude());\r",
									"\r",
									"pm.collectionVariables.set('providerPhoneNumber', window.faker.phone.phoneNumber());\r",
									"pm.collectionVariables.set('providerEmail', window.faker.internet.exampleEmail());\r",
									"pm.collectionVariables.set('providerWebSite', window.faker.internet.url());\r",
									"\r",
									"pm.collectionVariables.set('providerExternalReference', window.faker.random.number());\r",
									"pm.collectionVariables.set('providerEnterpriseSiret', window.faker.random.number());\r",
									"pm.collectionVariables.set('providerEnterpriseSiren', window.faker.random.number());\r",
									"pm.collectionVariables.set('providerEnterpriseNic', window.faker.random.number());\r",
									"\r",
									"pm.collectionVariables.set('contactLastName', window.faker.name.lastName());\r",
									"pm.collectionVariables.set('contactFirstName', window.faker.name.firstName());\r",
									"pm.collectionVariables.set('contactPhoneNumber', window.faker.phone.phoneNumber());\r",
									"pm.collectionVariables.set('contactEmail', window.faker.internet.exampleEmail());\r",
									"\r",
									"\r",
									"console.info(pm.collectionVariables.get('folderName') + \" --> \" + this.request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"//get ID\r",
									"pm.collectionVariables.set(\"providerId\", jsonData.data.id);\r",
									"pm.collectionVariables.set(\"providerName\", jsonData.data.person.completeName);\r",
									"pm.collectionVariables.set(\"providerPersonId\", jsonData.data.person.id);\r",
									"pm.collectionVariables.set(\"providerFiness\", jsonData.data.finessAdeliReference);\r",
									"pm.collectionVariables.set(\"providerRpps\", jsonData.data.rpps);\r",
									"pm.collectionVariables.set(\"providerReference\", jsonData.data.reference);\r",
									"pm.collectionVariables.set(\"providerExternalReference\", jsonData.data.externalReference);\r",
									"\r",
									"console.log(\"URL pour consulter l'objet créé dans CLEVA Web :\");\r",
									"console.log(pm.environment.get(\"clevaWebUrl\")+ \"personne/prestataire/\" +jsonData.data.person.id +\"/consultation\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"activityStartDate\": \"{{6MonthsAgo}}\",\r\n    \"externalReference\": \"{{providerExternalReference}}\",\r\n    \"finessAdeliReference\": \"{{$randomInt}}{{$randomInt}}{{$randomInt}}\",\r\n    \"paymentMode\": \"CH\",\r\n    \"typeCode\": \"{{codeProviderDoctorType}}\",\r\n    \"person\": {\r\n        \"familyName\": \"{{providerFamilyName}}\",\r\n        \"firstName\": \"{{providerFirstName}}\",\r\n        \"titleCode\": \"{{providerTitle}}\",\r\n        \"externalReference\": \"{{$timestamp}}\"\r\n    },\r\n    \"communication\": {\r\n        \"cellphone\": \"{{providerPhoneNumber}}\",\r\n        \"email\": \"{{providerEmail}}\",\r\n        \"webSite\": \"{{providerWebSite}}\"\r\n    },\r\n    \"address\": {\r\n        \"countryCode\": \"FR\",\r\n        \"mainAddress\": true,\r\n        \"line1\": \"{{providerAdrStreet}}\",\r\n        \"line3\": \"{{providerAdrZipCode}}\",\r\n        \"line4\": \"{{providerAdrCity}}\",\r\n        \"latitude\": \"{{providerAdrLatitude}}\",\r\n        \"longitude\": \"{{providerAdrLongitude}}\"\r\n    },\r\n    \"rpps\":\"{{$randomInt}}{{$randomInt}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/person/providers",
							"host": [
								"{{url}}"
							],
							"path": [
								"person",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Chargement du prestataire",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let assures = jsonData.data;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{providerId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche sans critères",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let assures = jsonData.data;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?limit=5",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par nom",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"\r",
									"pm.test(\"Check provider Id\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?name={{providerName}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "name",
									"value": "{{providerName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par finess",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"\r",
									"pm.test(\"Check provider Id\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).to.eql(pm.collectionVariables.get(\"providerId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?finessAdeli={{providerFiness}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "finessAdeli",
									"value": "{{providerFiness}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par rpps",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"\r",
									"pm.test(\"Check provider Id\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).to.eql(pm.collectionVariables.get(\"providerId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?rpps={{providerRpps}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "rpps",
									"value": "{{providerRpps}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"\r",
									"    pm.test(\"Check provider Id\", function () {\r",
									"        pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).to.be.a(\"string\");\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?type={{codeProviderDoctorType}}&name={{providerName}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "type",
									"value": "{{codeProviderDoctorType}}"
								},
								{
									"key": "name",
									"value": "{{providerName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par référence externe",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"\r",
									"pm.test(\"Check provider Id\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?externalReference={{providerExternalReference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "externalReference",
									"value": "{{providerExternalReference}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set('folderName','Prestataires');"
						]
					}
				}
			]
		},
		{
			"name": "Prestataire Pharmacie",
			"item": [
				{
					"name": "Liste NAF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"console.log(codes);\r",
									"\r",
									"//Set NAF code\r",
									"pm.collectionVariables.set(\"nafPharmacy\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"//Code NAF selectionné\r",
									"console.log('Code NAF selectionné : ' +pm.collectionVariables.get(\"naf\"));\r",
									"\r",
									"pm.visualizer.set(pm.collectionVariables.get(\"templateListes\"), {\r",
									"    response: pm.response.json()\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(pm.collectionVariables.get('folderName') + \" --> \" + this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?maxResult=50&code=4773Z",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "4773Z",
									"disabled": true
								},
								{
									"key": "maxResult",
									"value": "50"
								},
								{
									"key": "code",
									"value": "4773Z"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "NAF"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Type prestataire pharmacie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"codeProviderPharmacyType\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"pm.collectionVariables.set(\"labelProviderPharmacyType\", codes[_.random(0, codes.length-1)].label);\r",
									"\r",
									"console.log(\"Type prestataire : \" + pm.collectionVariables.get(\"codeProviderPharmacyType\") + \" (\" +  pm.collectionVariables.get(\"labelProviderPharmacyType\") + \")\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=Pha",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "Pha"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "SERVICE_PROVIDER_TYPES"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Liste titres entreprises pharmacie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"providerTitle\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"pm.visualizer.set(pm.collectionVariables.get(\"templateListes\"), {\r",
									"    response: pm.response.json()\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(pm.collectionVariables.get('folderName') + \" --> \" + this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=Etab&personType=LEGAL",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "Etab"
								},
								{
									"key": "maxResult",
									"value": "15",
									"disabled": true
								},
								{
									"key": "personType",
									"value": "LEGAL"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "TITLES",
									"description": "(Required) Code of the HelpList"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Nouvelle pharmacie",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"window = {};\r",
									"\r",
									"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
									"\r",
									"window.faker.locale = \"fr\";\r",
									"\r",
									"pm.collectionVariables.set('providerEnterpriseName', window.faker.company.companyName());\r",
									"pm.collectionVariables.set('providerEnterpriseSupplementName', window.faker.company.companySuffix());\r",
									"\r",
									"pm.collectionVariables.set('providerAdrZipCode', window.faker.address.zipCode());\r",
									"pm.collectionVariables.set('providerAdrCity', window.faker.address.city());\r",
									"pm.collectionVariables.set('providerAdrStreet', window.faker.address.streetName());\r",
									"pm.collectionVariables.set('providerAdrLatitude', window.faker.address.latitude());\r",
									"pm.collectionVariables.set('providerAdrLongitude', window.faker.address.longitude());\r",
									"\r",
									"pm.collectionVariables.set('providerPhoneNumber', window.faker.phone.phoneNumber());\r",
									"pm.collectionVariables.set('providerEmail', window.faker.internet.exampleEmail());\r",
									"pm.collectionVariables.set('providerWebSite', window.faker.internet.url());\r",
									"\r",
									"pm.collectionVariables.set('providerExternalReference', window.faker.random.number());\r",
									"pm.collectionVariables.set('providerEnterpriseSiret', window.faker.random.number());\r",
									"pm.collectionVariables.set('providerEnterpriseSiren', window.faker.random.number());\r",
									"pm.collectionVariables.set('providerEnterpriseNic', window.faker.random.number());\r",
									"\r",
									"pm.collectionVariables.set('contactLastName', window.faker.name.lastName());\r",
									"pm.collectionVariables.set('contactFirstName', window.faker.name.firstName());\r",
									"pm.collectionVariables.set('contactPhoneNumber', window.faker.phone.phoneNumber());\r",
									"pm.collectionVariables.set('contactEmail', window.faker.internet.exampleEmail());\r",
									"\r",
									"\r",
									"console.info(pm.collectionVariables.get('folderName') + \" --> \" + this.request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"//get ID\r",
									"pm.collectionVariables.set(\"providerId\", jsonData.data.id);\r",
									"pm.collectionVariables.set(\"providerName\", jsonData.data.businessInformations.companyName);\r",
									"pm.collectionVariables.set(\"providerPersonId\", jsonData.data.businessInformations.id);\r",
									"pm.collectionVariables.set(\"providerSiret\", jsonData.data.businessInformations.siret);\r",
									"pm.collectionVariables.set(\"providerSiren\", jsonData.data.businessInformations.siren);\r",
									"pm.collectionVariables.set(\"providerFiness\", jsonData.data.finessAdeliReference);\r",
									"pm.collectionVariables.set(\"providerRpps\", jsonData.data.rpps);\r",
									"pm.collectionVariables.set(\"providerReference\", jsonData.data.reference);\r",
									"pm.collectionVariables.set(\"providerExternalReference\", jsonData.data.externalReference);\r",
									"\r",
									"console.log(\"URL pour consulter l'objet créé dans CLEVA Web :\");\r",
									"console.log(pm.environment.get(\"clevaWebUrl\")+ \"personne/prestataire/\" +jsonData.data.businessInformations.id +\"/consultation\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"activityStartDate\": \"{{6MonthsAgo}}\",\r\n    \"externalReference\": \"{{providerExternalReference}}\",\r\n    \"finessAdeliReference\": \"{{$randomInt}}{{$randomInt}}{{$randomInt}}\",\r\n    \"paymentMode\": \"CH\",\r\n    \"rpps\": \"{{$randomInt}}\",\r\n    \"typeCode\": \"{{codeProviderPharmacyType}}\",\r\n    \"businessInformations\": {\r\n        \"titleId\": \"{{providerTitle}}\",\r\n        \"companyName\": \"{{providerEnterpriseName}}_{{$randomInt}}\",\r\n        \"siret\": \"{{providerEnterpriseSiret}}\",\r\n        \"siren\": \"{{providerEnterpriseSiren}}\",\r\n        \"nic\": \"{{providerEnterpriseNic}}\",\r\n        \"externalReference\": \"{{$randomInt}}\",\r\n        \"nafCode\": \"{{nafPharmacy}}\"\r\n    },\r\n    \"communication\": {\r\n        \"cellphone\": \"{{providerPhoneNumber}}\",\r\n        \"email\": \"{{providerEmail}}\",\r\n        \"webSite\": \"{{providerWebSite}}\"\r\n    },\r\n    \"address\": {\r\n        \"countryCode\": \"FR\",\r\n        \"mainAddress\": true,\r\n        \"line1\": \"{{providerAdrStreet}}\",\r\n        \"line3\": \"{{providerAdrZipCode}}\",\r\n        \"line4\": \"{{providerAdrCity}}\",\r\n        \"latitude\": \"{{providerAdrLatitude}}\",\r\n        \"longitude\": \"{{providerAdrLongitude}}\"\r\n    },\r\n    \"groups\": [\r\n        {\r\n            \"code\": \"{{providerGroup}}\",\r\n            \"reference\": \"{{$randomInt}}\",\r\n            \"signatureDate\": \"{{6MonthsAgo}}\",\r\n            \"startDate\": \"{{6MonthsAgo}}\",\r\n            \"type\": \"CONCENT\"\r\n        }\r\n    ],\r\n    \"contacts\": [\r\n        {\r\n            \"personInformation\": {\r\n                \"titleCode\": \"{{contactTitle}}\",\r\n                \"familyName\": \"{{contactLastName}}\",\r\n                \"firstName\": \"{{contactFirstName}}\"\r\n            },\r\n            \"beginDate\": \"{{currentDate}}\",\r\n            \"communication\": {\r\n                \"cellphone\": \"{{contactPhoneNumber}}\",\r\n                \"email\": \"{{contactEmail}}\"\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/enterprise/providers",
							"host": [
								"{{url}}"
							],
							"path": [
								"enterprise",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche sans critères",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let assures = jsonData.data;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?limit=5",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par nom",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"\r",
									"pm.test(\"Check provider Id\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?name={{providerName}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "name",
									"value": "{{providerName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par finess",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"\r",
									"pm.test(\"Check provider Id\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).to.eql(pm.collectionVariables.get(\"providerId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?finessAdeli={{providerFiness}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "finessAdeli",
									"value": "{{providerFiness}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par rpps",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?rpps={{providerRpps}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "rpps",
									"value": "{{providerRpps}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"\r",
									"    pm.test(\"Check provider Id\", function () {\r",
									"        pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).to.be.a(\"string\");\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?type={{codeProviderPharmacyType}}&name={{providerName}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "type",
									"value": "{{codeProviderPharmacyType}}"
								},
								{
									"key": "name",
									"value": "{{providerName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par référence externe",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"\r",
									"pm.test(\"Check provider Id\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?externalReference={{providerExternalReference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "externalReference",
									"value": "{{providerExternalReference}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par siret",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"\r",
									"pm.test(\"Check provider Id\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?siret={{providerSiret}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "siret",
									"value": "{{providerSiret}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par siren",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"\r",
									"pm.test(\"Check provider Id\", function () {\r",
									"        pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?siren={{providerSiren}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "siren",
									"value": "{{providerSiren}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par pays",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"\r",
									"    pm.test(\"Check provider Id\", function () {\r",
									"        pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).to.be.a(\"string\");\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?siren={{providerSiren}}&countryCode=FR&siret={{providerSiret}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "siren",
									"value": "{{providerSiren}}"
								},
								{
									"key": "countryCode",
									"value": "FR"
								},
								{
									"key": "siret",
									"value": "{{providerSiret}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Prestataire Hopital",
			"item": [
				{
					"name": "Liste NAF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"//Set NAF code\r",
									"pm.collectionVariables.set(\"nafHospital\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(pm.collectionVariables.get('folderName') + \" --> \" + this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?maxResult=50&code=8610Z",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "san",
									"disabled": true
								},
								{
									"key": "maxResult",
									"value": "50"
								},
								{
									"key": "code",
									"value": "8610Z"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "NAF"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Type prestataire pharmacie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"codeProviderHospitalType\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"pm.collectionVariables.set(\"labelProviderHospitalType\", codes[_.random(0, codes.length-1)].label);\r",
									"\r",
									"console.log(\"Type prestataire : \" + pm.collectionVariables.get(\"codeProviderHospitalType\") + \" (\" +  pm.collectionVariables.get(\"labelProviderHospitalType\") + \")\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=Hopi",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "Hopi"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "SERVICE_PROVIDER_TYPES"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Liste titres entreprises pharmacie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"providerTitle\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"pm.visualizer.set(pm.collectionVariables.get(\"templateListes\"), {\r",
									"    response: pm.response.json()\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(pm.collectionVariables.get('folderName') + \" --> \" + this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=ch&personType=LEGAL",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "ch"
								},
								{
									"key": "maxResult",
									"value": "15",
									"disabled": true
								},
								{
									"key": "personType",
									"value": "LEGAL"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "TITLES",
									"description": "(Required) Code of the HelpList"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Nouvel hopital",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"window = {};\r",
									"\r",
									"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
									"\r",
									"window.faker.locale = \"fr\";\r",
									"\r",
									"pm.collectionVariables.set('providerEnterpriseName', window.faker.company.companyName());\r",
									"pm.collectionVariables.set('providerEnterpriseSupplementName', window.faker.company.companySuffix());\r",
									"\r",
									"pm.collectionVariables.set('providerAdrZipCode', window.faker.address.zipCode());\r",
									"pm.collectionVariables.set('providerAdrCity', window.faker.address.city());\r",
									"pm.collectionVariables.set('providerAdrStreet', window.faker.address.streetName());\r",
									"pm.collectionVariables.set('providerAdrLatitude', window.faker.address.latitude());\r",
									"pm.collectionVariables.set('providerAdrLongitude', window.faker.address.longitude());\r",
									"\r",
									"pm.collectionVariables.set('providerPhoneNumber', window.faker.phone.phoneNumber());\r",
									"pm.collectionVariables.set('providerEmail', window.faker.internet.exampleEmail());\r",
									"pm.collectionVariables.set('providerWebSite', window.faker.internet.url());\r",
									"\r",
									"pm.collectionVariables.set('providerExternalReference', window.faker.random.number());\r",
									"pm.collectionVariables.set('providerEnterpriseSiret', window.faker.random.number());\r",
									"pm.collectionVariables.set('providerEnterpriseSiren', window.faker.random.number());\r",
									"pm.collectionVariables.set('providerEnterpriseNic', window.faker.random.number());\r",
									"\r",
									"pm.collectionVariables.set('contactLastName', window.faker.name.lastName());\r",
									"pm.collectionVariables.set('contactFirstName', window.faker.name.firstName());\r",
									"pm.collectionVariables.set('contactPhoneNumber', window.faker.phone.phoneNumber());\r",
									"pm.collectionVariables.set('contactEmail', window.faker.internet.exampleEmail());\r",
									"\r",
									"\r",
									"console.info(pm.collectionVariables.get('folderName') + \" --> \" + this.request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"//get ID\r",
									"pm.collectionVariables.set(\"providerId\", jsonData.data.id);\r",
									"pm.collectionVariables.set(\"hospitalId\", jsonData.data.id);\r",
									"pm.collectionVariables.set(\"providerName\", jsonData.data.businessInformations.companyName);\r",
									"pm.collectionVariables.set(\"providerPersonId\", jsonData.data.businessInformations.id);\r",
									"pm.collectionVariables.set(\"providerSiret\", jsonData.data.businessInformations.siret);\r",
									"pm.collectionVariables.set(\"providerSiren\", jsonData.data.businessInformations.siren);\r",
									"pm.collectionVariables.set(\"providerFiness\", jsonData.data.finessAdeliReference);\r",
									"pm.collectionVariables.set(\"providerRpps\", jsonData.data.rpps);\r",
									"pm.collectionVariables.set(\"providerReference\", jsonData.data.reference);\r",
									"pm.collectionVariables.set(\"providerExternalReference\", jsonData.data.externalReference);\r",
									"\r",
									"\r",
									"console.log(\"URL pour consulter l'objet créé dans CLEVA Web :\");\r",
									"console.log(pm.environment.get(\"clevaWebUrl\")+ \"personne/prestataire/\" +jsonData.data.businessInformations.id +\"/consultation\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"activityStartDate\": \"{{6MonthsAgo}}\",\r\n    \"externalReference\": \"{{providerExternalReference}}\",\r\n    \"finessAdeliReference\": \"{{$randomInt}}{{$randomInt}}{{$randomInt}}\",\r\n    \"paymentMode\": \"CH\",\r\n    \"rpps\": \"{{$randomInt}}\",\r\n    \"typeCode\": \"{{codeProviderHospitalType}}\",\r\n    \"businessInformations\": {\r\n        \"titleId\": \"{{providerTitle}}\",\r\n        \"companyName\": \"{{providerEnterpriseName}}_{{$randomInt}}\",\r\n        \"siret\": \"{{providerEnterpriseSiret}}\",\r\n        \"siren\": \"{{providerEnterpriseSiren}}\",\r\n        \"nic\": \"{{providerEnterpriseNic}}\",\r\n        \"externalReference\": \"{{$randomInt}}\",\r\n        \"nafCode\": \"{{nafDoctor}}\"\r\n    },\r\n    \"communication\": {\r\n        \"cellphone\": \"{{providerPhoneNumber}}\",\r\n        \"email\": \"{{providerEmail}}\",\r\n        \"webSite\": \"{{providerWebSite}}\"\r\n    },\r\n    \"address\": {\r\n        \"countryCode\": \"FR\",\r\n        \"mainAddress\": true,\r\n        \"line1\": \"{{providerAdrStreet}}\",\r\n        \"line3\": \"{{providerAdrZipCode}}\",\r\n        \"line4\": \"{{providerAdrCity}}\",\r\n        \"latitude\": \"{{providerAdrLatitude}}\",\r\n        \"longitude\": \"{{providerAdrLongitude}}\"\r\n    },\r\n    \"groups\": [\r\n        {\r\n            \"code\": \"{{providerGroup}}\",\r\n            \"reference\": \"{{$randomInt}}\",\r\n            \"signatureDate\": \"{{6MonthsAgo}}\",\r\n            \"startDate\": \"{{6MonthsAgo}}\",\r\n            \"type\": \"CONCENT\"\r\n        }\r\n    ],\r\n    \"contacts\": [\r\n        {\r\n            \"personInformation\": {\r\n                \"titleCode\": \"{{contactTitle}}\",\r\n                \"familyName\": \"{{contactLastName}}\",\r\n                \"firstName\": \"{{contactFirstName}}\"\r\n            },\r\n            \"beginDate\": \"{{currentDate}}\",\r\n            \"communication\": {\r\n                \"cellphone\": \"{{contactPhoneNumber}}\",\r\n                \"email\": \"{{contactEmail}}\"\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/enterprise/providers",
							"host": [
								"{{url}}"
							],
							"path": [
								"enterprise",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche sans critères",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let assures = jsonData.data;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?limit=5",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par nom",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"\r",
									"pm.test(\"Check provider Id\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?name={{providerName}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "name",
									"value": "{{providerName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par finess",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"console.log(pm.response.json());\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"\r",
									"pm.test(\"Check provider Id\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).to.eql(pm.collectionVariables.get(\"providerId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?finessAdeli={{providerFiness}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "finessAdeli",
									"value": "{{providerFiness}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par rpps",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"\r",
									"pm.test(\"Check provider Id\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?rpps={{providerRpps}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "rpps",
									"value": "{{providerRpps}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"console.log(pm.response.json());\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"\r",
									"    pm.test(\"Check provider Id\", function () {\r",
									"        pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).to.be.a(\"string\");\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?type={{codeProviderHospitalType}}&name={{providerName}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "type",
									"value": "{{codeProviderHospitalType}}"
								},
								{
									"key": "name",
									"value": "{{providerName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par référence externe",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"console.log(pm.response.json());\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"\r",
									"pm.test(\"Check provider Id\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?externalReference={{providerExternalReference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "externalReference",
									"value": "{{providerExternalReference}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par siret",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"\r",
									"pm.test(\"Check provider Id\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?siret={{providerSiret}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "siret",
									"value": "{{providerSiret}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par siren",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"\r",
									"pm.test(\"Check provider Id\", function () {\r",
									"        pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?siren={{providerSiren}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "siren",
									"value": "{{providerSiren}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par pays",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"    pm.test(\"Check provider Id\", function () {\r",
									"        pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).to.be.a(\"string\");\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?siren={{providerSiren}}&countryCode=FR&siret={{providerSiret}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "siren",
									"value": "{{providerSiren}}"
								},
								{
									"key": "countryCode",
									"value": "FR"
								},
								{
									"key": "siret",
									"value": "{{providerSiret}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Prestataire Dentiste",
			"item": [
				{
					"name": "Liste NAF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"console.log(codes);\r",
									"\r",
									"//Set NAF code\r",
									"pm.collectionVariables.set(\"nafDentiste\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"//Code NAF selectionné\r",
									"console.log('Code NAF selectionné : ' +pm.collectionVariables.get(\"naf\"));\r",
									"\r",
									"pm.visualizer.set(pm.collectionVariables.get(\"templateListes\"), {\r",
									"    response: pm.response.json()\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(pm.collectionVariables.get('folderName') + \" --> \" + this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?code=86.21Z",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "dent",
									"disabled": true
								},
								{
									"key": "maxResult",
									"value": "10000",
									"disabled": true
								},
								{
									"key": "code",
									"value": "86.21Z"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "NAF"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Type prestataire pharmacie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"typePrestataireDentisteCode\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"pm.collectionVariables.set(\"typePrestataireDentisteLabel\", codes[_.random(0, codes.length-1)].label);\r",
									"\r",
									"console.log(jsonData);\r",
									"\r",
									"console.log(\"Type prestataire : \" + pm.collectionVariables.get(\"typePrestataireDentisteCode\") + \" (\" +  pm.collectionVariables.get(\"typePrestataireDentisteLabel\") + \")\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=Dent",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "Dent"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "SERVICE_PROVIDER_TYPES"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Liste titres entreprises dentiste",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"providerTitle\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"console.log(pm.response.json());\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(pm.collectionVariables.get('folderName') + \" --> \" + this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=cab&personType=LEGAL",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "cab"
								},
								{
									"key": "maxResult",
									"value": "15",
									"disabled": true
								},
								{
									"key": "personType",
									"value": "LEGAL"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "TITLES",
									"description": "(Required) Code of the HelpList"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Liste des banques",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"providerBank\", codes[_.random(0, codes.length-1)].code);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(pm.collectionVariables.get('folderName') + \" --> \" + this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "culture",
									"disabled": true
								},
								{
									"key": "maxResult",
									"value": "15",
									"disabled": true
								},
								{
									"key": "dtfdfg",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "PPSIARD_SOCLE_BANQUES",
									"description": "(Required) Code of the HelpList"
								}
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/settings/lists/:helpListCode",
									"host": [
										"{{url}}"
									],
									"path": [
										"settings",
										"lists",
										":helpListCode"
									],
									"query": [
										{
											"key": "text",
											"value": "culture",
											"disabled": true
										},
										{
											"key": "maxResult",
											"value": "15",
											"disabled": true
										},
										{
											"key": "dtfdfg",
											"value": "",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "helpListCode",
											"value": "PPSIARD_SOCLE_BANQUES",
											"description": "(Required) Code of the HelpList"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 29 Dec 2021 09:08:40 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=20"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"category\": \"PPSIARD_SOCLE\",\n        \"code\": \"PPSIARD_SOCLE_BANQUES\",\n        \"description\": \"Liste de quelques banques de France\\r\\n\",\n        \"moreResults\": false,\n        \"subCategory\": \"Aranger\",\n        \"title\": \"Liste de quelques banques de France\",\n        \"type\": \"MACRO\",\n        \"values\": [\n            {\n                \"code\": \"AXA Banque\",\n                \"label\": \"AXA Banque\"\n            },\n            {\n                \"code\": \"BNP Paribas\\u200e\",\n                \"label\": \"BNP Paribas\\u200e\"\n            },\n            {\n                \"code\": \"Banque Populaire\",\n                \"label\": \"Banque Populaire\"\n            },\n            {\n                \"code\": \"Banque de France\\u200e\",\n                \"label\": \"Banque de France\\u200e\"\n            },\n            {\n                \"code\": \"Caisse d'Epargne\",\n                \"label\": \"Caisse d'Epargne\"\n            },\n            {\n                \"code\": \"Credit Cooperatif\",\n                \"label\": \"Credit Cooperatif\"\n            },\n            {\n                \"code\": \"Crédit Agricole\\u200e\",\n                \"label\": \"Crédit Agricole\\u200e\"\n            },\n            {\n                \"code\": \"Crédit Industriel et Commercial\",\n                \"label\": \"Crédit Industriel et Commercial\"\n            },\n            {\n                \"code\": \"Crédit Lyonnais (LCL)\",\n                \"label\": \"Crédit Lyonnais (LCL)\"\n            },\n            {\n                \"code\": \"Crédit Mutuel\",\n                \"label\": \"Crédit Mutuel\"\n            },\n            {\n                \"code\": \"Créditdu Nord\",\n                \"label\": \"Créditdu Nord\"\n            },\n            {\n                \"code\": \"Dexia Banque\",\n                \"label\": \"Dexia Banque\"\n            },\n            {\n                \"code\": \"HSBC\",\n                \"label\": \"HSBC\"\n            },\n            {\n                \"code\": \"La Banque Postale\",\n                \"label\": \"La Banque Postale\"\n            },\n            {\n                \"code\": \"Natixis Banque\",\n                \"label\": \"Natixis Banque\"\n            }\n        ]\n    },\n    \"status\": \"SUCCESS\"\n}"
						}
					]
				},
				{
					"name": "Nouveau dentiste",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"window = {};\r",
									"\r",
									"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
									"\r",
									"window.faker.locale = \"fr\";\r",
									"\r",
									"pm.collectionVariables.set('providerEntrepriseName', window.faker.company.companyName());\r",
									"pm.collectionVariables.set('providerEntrepriseSupplementName', window.faker.company.companySuffix());\r",
									"\r",
									"pm.collectionVariables.set('providerAdrZipCode', window.faker.address.zipCode());\r",
									"pm.collectionVariables.set('providerAdrCity', window.faker.address.city());\r",
									"pm.collectionVariables.set('providerAdrStreet', window.faker.address.streetName());\r",
									"pm.collectionVariables.set('providerAdrLatitude', window.faker.address.latitude());\r",
									"pm.collectionVariables.set('providerAdrLongitude', window.faker.address.longitude());\r",
									"\r",
									"pm.collectionVariables.set('providerPhoneNumber', window.faker.phone.phoneNumber());\r",
									"pm.collectionVariables.set('providerEmail', window.faker.internet.exampleEmail());\r",
									"pm.collectionVariables.set('providerWebSite', window.faker.internet.url());\r",
									"\r",
									"pm.collectionVariables.set('providerExternalReference', window.faker.random.number());\r",
									"pm.collectionVariables.set('providerEntrepriseSiret', window.faker.random.number());\r",
									"pm.collectionVariables.set('providerEntrepriseSiren', window.faker.random.number());\r",
									"pm.collectionVariables.set('providerEntrepriseNic', window.faker.random.number());\r",
									"\r",
									"pm.collectionVariables.set('contactLastName', window.faker.name.lastName());\r",
									"pm.collectionVariables.set('contactFirstName', window.faker.name.firstName());\r",
									"pm.collectionVariables.set('contactPhoneNumber', window.faker.phone.phoneNumber());\r",
									"pm.collectionVariables.set('contactEmail', window.faker.internet.exampleEmail());\r",
									"\r",
									"pm.collectionVariables.set('providerBankZipCode', window.faker.address.zipCode());\r",
									"pm.collectionVariables.set('providerBankCity', window.faker.address.city());\r",
									"pm.collectionVariables.set('providerBankStreet', window.faker.address.streetName());\r",
									"\r",
									"\r",
									"console.info(pm.collectionVariables.get('folderName') + \" --> \" + this.request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"//get ID\r",
									"pm.collectionVariables.set(\"providerId\", jsonData.data.id);\r",
									"pm.collectionVariables.set(\"dentisteId\", jsonData.data.id);\r",
									"pm.collectionVariables.set(\"providerName\", jsonData.data.businessInformations.companyName);\r",
									"pm.collectionVariables.set(\"providerPersonId\", jsonData.data.businessInformations.id);\r",
									"pm.collectionVariables.set(\"providerSiret\", jsonData.data.businessInformations.siret);\r",
									"pm.collectionVariables.set(\"providerSiren\", jsonData.data.businessInformations.siren);\r",
									"pm.collectionVariables.set(\"providerfiness\", jsonData.data.finessAdeliReference);\r",
									"pm.collectionVariables.set(\"providerRpps\", jsonData.data.rpps);\r",
									"pm.collectionVariables.set(\"providerReference\", jsonData.data.reference);\r",
									"pm.collectionVariables.set(\"providerExternalReference\", jsonData.data.externalReference);\r",
									"\r",
									"\r",
									"console.log(\"URL pour consulter l'objet créé dans CLEVA Web :\");\r",
									"console.log(pm.environment.get(\"clevaWebUrl\")+ \"personne/prestataire/\" +jsonData.data.businessInformations.id +\"/consultation\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"activityStartDate\": \"{{dateDuJour_Moins_6_Mois}}\",\r\n    \"externalReference\": \"{{providerExternalReference}}\",\r\n    \"finessAdeliReference\": \"{{$randomInt}}{{$randomInt}}{{$randomInt}}\",\r\n    \"paymentMode\": \"CH\",\r\n    \"rpps\": \"{{$randomInt}}\",\r\n    \"typeCode\": \"{{typePrestataireDentisteCode}}\",\r\n    \"businessInformations\": {\r\n        \"titleId\": \"{{providerTitle}}\",\r\n        \"companyName\": \"{{providerEnterpriseName}}_{{$randomInt}}\",\r\n        \"siret\": \"{{providerEntrepriseSiret}}\",\r\n        \"siren\": \"{{providerEntrepriseSiren}}\",\r\n        \"nic\": \"{{providerEntrepriseNic}}\",\r\n        \"externalReference\": \"{{$randomInt}}\",\r\n        \"nafCode\": \"{{nafDentiste}}\"\r\n    },\r\n    \"communication\": {\r\n        \"cellphone\": \"{{providerPhoneNumber}}\",\r\n        \"email\": \"{{providerEmail}}\",\r\n        \"webSite\": \"{{providerWebSite}}\"\r\n    },\r\n    \"address\": {\r\n        \"countryCode\": \"FR\",\r\n        \"mainAddress\": true,\r\n        \"line1\": \"{{providerAdrStreet}}\",\r\n        \"line3\": \"{{providerAdrZipCode}}\",\r\n        \"line4\": \"{{providerAdrCity}}\",\r\n        \"latitude\": \"{{providerAdrLatitude}}\",\r\n        \"longitude\": \"{{providerAdrLongitude}}\"\r\n    },\r\n    \"bankDetails\": {\r\n        \"iban\": \"FR2012739000501327895759P67\",\r\n        \"bic\": \"AGRIFRPP\",\r\n        \"bank\": \"Credit agricole\",\r\n        \"holder\": \"{{providerEntrepriseName}}\",\r\n        \"bankAddress1\": \"{{providerAdrStreet}}\",\r\n        \"city\": \"{{providerBankCity}}\",\r\n        \"type\": \"{{$randomBankAccountName}}\"\r\n    },\r\n    \"contacts\": [\r\n        {\r\n            \"personInformation\": {\r\n                \"familyName\": \"{{contactLastName}}\",\r\n                \"firstName\": \"{{contactFirstName}}\"\r\n            },\r\n            \"beginDate\": \"{{dateDuJour}}\",\r\n            \"communication\": {\r\n                \"cellphone\": \"{{contactPhoneNumber}}\",\r\n                \"email\": \"{{contactEmail}}\"\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/enterprise/providers",
							"host": [
								"{{url}}"
							],
							"path": [
								"enterprise",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche sans critères",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check response status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let assures = jsonData.data;\r",
									"\r",
									"\r",
									"\r",
									"console.log(jsonData);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?limit=5",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par nom",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check response status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"console.log(pm.response.json());\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"\r",
									"pm.test(\"Check provider Id\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?name={{providerName}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "name",
									"value": "{{providerName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par finess",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check response status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"console.log(pm.response.json());\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"\r",
									"pm.test(\"Check provider Id\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).to.eql(pm.collectionVariables.get(\"providerId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?finessAdeli={{providerfiness}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "finessAdeli",
									"value": "{{providerfiness}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par rpps",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check response status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"console.log(pm.response.json());\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"\r",
									"pm.test(\"Check provider Id\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?rpps={{providerRpps}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "rpps",
									"value": "{{providerRpps}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check response status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"console.log(pm.response.json());\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"    pm.test(\"Check provider Id\", function () {\r",
									"        pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).to.be.a(\"string\");\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?type={{typePrestataireDentisteCode}}&name={{providerName}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "type",
									"value": "{{typePrestataireDentisteCode}}"
								},
								{
									"key": "name",
									"value": "{{providerName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par référence externe",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check response status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"console.log(pm.response.json());\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"\r",
									"pm.test(\"Check provider Id\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?externalReference={{providerExternalReference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "externalReference",
									"value": "{{providerExternalReference}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par siret",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check response status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"console.log(pm.response.json());\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"\r",
									"pm.test(\"Check provider Id\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?siret={{providerSiret}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "siret",
									"value": "{{providerSiret}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par siren",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check response status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"console.log(pm.response.json());\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"\r",
									"pm.test(\"Check provider Id\", function () {\r",
									"        pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?siren={{providerSiren}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "siren",
									"value": "{{providerSiren}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche par pays",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check response status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"console.log(pm.response.json());\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedProvider\", providers[_.random(0, providers.length-1)]);\r",
									"\r",
									"\r",
									"    pm.test(\"Check provider Id\", function () {\r",
									"        pm.expect(pm.collectionVariables.get(\"searchedProvider\").id).to.be.a(\"string\");\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?siren={{providerSiren}}&countryCode=FR&siret={{providerSiret}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "siren",
									"value": "{{providerSiren}}"
								},
								{
									"key": "countryCode",
									"value": "FR"
								},
								{
									"key": "siret",
									"value": "{{providerSiret}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Décompte consultation généraliste",
			"item": [
				{
					"name": "Connexion Cleva",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"token\", pm.response.text());",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "AALR",
									"type": "string"
								},
								{
									"key": "username",
									"value": "ALR",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"{{login}}\",\n    \"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/me/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"me",
								"login"
							]
						},
						"description": "Chargement d'une tâche"
					},
					"response": []
				},
				{
					"name": "Recherche assuré",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let assures = jsonData.data;\r",
									"\r",
									"let assureSelectionne = assures[_.random(0, assures.length-1)];\r",
									"console.log(\"Assure selectionné\",assureSelectionne );\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"insuredIdForStatementGeneralPractitioner\", assureSelectionne.insuredId);\r",
									"if(assureSelectionne.person.familyName!=null){\r",
									"    pm.collectionVariables.set(\"insuredFamilyNameForStatementGeneralPractitioner\", assureSelectionne.person.familyName);\r",
									"}\r",
									"pm.collectionVariables.set(\"insuredFirstNameForStatementGeneralPractitioner\", assureSelectionne.person.firstName);\r",
									"pm.collectionVariables.set(\"insuredBirthDateForStatementGeneralPractitioner\", assureSelectionne.person.birthDate);\r",
									"pm.collectionVariables.set(\"insuredNameForStatementGeneralPractitioner\", assureSelectionne.insuredName);\r",
									"pm.collectionVariables.set(\"insuredNumberForStatementGeneralPractitioner\", assureSelectionne.insuredNumber);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/affiliates?contractNumber={{contractNumberPSCS1}}&status=IN_PROGRESS&insuredName={{insuredName}}&effectiveDateMin={{2MonthsAgo}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"affiliates"
							],
							"query": [
								{
									"key": "contractNumber",
									"value": "{{contractNumberPSCS1}}"
								},
								{
									"key": "status",
									"value": "IN_PROGRESS"
								},
								{
									"key": "insuredName",
									"value": "{{insuredName}}"
								},
								{
									"key": "effectiveDateMin",
									"value": "{{2MonthsAgo}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Liste des codes actes RC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"actCodeGeneralPractitioner\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"pm.collectionVariables.set(\"actLabelGeneralPractitioner\", codes[_.random(0, codes.length-1)].label);\r",
									"\r",
									"console.log(\"Code acte selectionné : \" + pm.collectionVariables.get(\"actCodeGeneralPractitioner\") + \" (\" +  pm.collectionVariables.get(\"actLabelGeneralPractitioner\") + \")\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=TCG",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "Téléconsultation G",
									"disabled": true
								},
								{
									"key": "code",
									"value": "TCG",
									"disabled": true
								},
								{
									"key": "text",
									"value": "TCG"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "MANDATORY_PLAN_ACTS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Liste des devises",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"euro\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=Euro",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "Euro"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "CURRENCIES"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Type prestataire médecin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"codeProviderDoctorType\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"pm.collectionVariables.set(\"labelProviderDoctorType\", codes[_.random(0, codes.length-1)].label);\r",
									"\r",
									"console.log(\"Type prestataire : \" + pm.collectionVariables.get(\"codeProviderDoctorType\") + \" (\" +  pm.collectionVariables.get(\"labelProviderDoctorType\") + \")\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=Médecin Conseil",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "Médecin Conseil"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "SERVICE_PROVIDER_TYPES"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche médecin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"const provider = providers.find(provider => provider.finessAdeliReference ? provider.finessAdeliReference : null);\r",
									"if(provider != null){\r",
									"    pm.collectionVariables.set(\"healthProfessionalFiness\", provider.finessAdeliReference);\r",
									"} else {\r",
									"    console.log(\"Pas de finessAdeliReference trouvé\")\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"healthProfessionalId\", providers[_.random(0, providers.length-1)].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?limit=50&type={{codeProviderDoctorType}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "type",
									"value": "{{codeProviderDoctorType}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Créer un décompte consultation généraliste",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"console.log(\"URL pour consulter l'objet créé dans CLEVA Web :\")\r",
									"console.log(pm.environment.get(\"clevaWebUrl\")+ \"sinistre/sante/sousDossier/\" +jsonData.data.id +\"/consultation\");\r",
									"\r",
									"let lignesSaisies = jsonData.data.countLines;\r",
									"let lignesGenerees = jsonData.data.detailsLines;\r",
									"\r",
									"\r",
									"//Identifiant du decompte\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerStatementId\", pm.response.json().data.id);\r",
									"\r",
									"//Ligne decompte saisie\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerEnteredStatementLines\", lignesSaisies[_.random(0, lignesSaisies.length-1)]);\r",
									"\r",
									"\r",
									"//Ligne decompte generee\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerGeneratedStatementLines\", lignesGenerees[_.random(0, lignesGenerees.length-1)]);\r",
									"\r",
									"//Numéro de facture\r",
									"pm.collectionVariables.set('consultationGeneralPractitionerInvoiceStatement', lignesSaisies[_.random(0, lignesSaisies.length-1)].invoiceNumber);\r",
									"\r",
									"\r",
									"//Le type doit être statement\r",
									"pm.test(\"Count type should be STATEMENT\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerEnteredStatementLines\").countType).to.eql(\"STATEMENT\");\r",
									"});\r",
									"\r",
									"pm.test(\"Insured name is \" + pm.collectionVariables.get(\"insuredNameForStatementGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerGeneratedStatementLines\").insuredName).to.eql(pm.collectionVariables.get(\"insuredNameForStatementGeneralPractitioner\"));\r",
									"});\r",
									"\r",
									"// Une ligne de decompte doit être générée\r",
									"pm.test(\"One computed line generated\", function () {\r",
									"    pm.expect(lignesGenerees.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Supplemantaty plan act code is \" + pm.collectionVariables.get(\"actCodeGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerEnteredStatementLines\").supplementaryPlanActCode).to.eql(pm.collectionVariables.get(\"actCodeGeneralPractitioner\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Supplemantaty plan act label is \" + pm.collectionVariables.get(\"actLabelGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerEnteredStatementLines\").supplementaryPlanActLabel).to.eql(pm.collectionVariables.get(\"actLabelGeneralPractitioner\"));\r",
									"});\r",
									"\r",
									"\r"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"subRecordComment\": \"{{$randomPhrase}}\",\r\n    \"summary\": \"{{$randomPhrase}}\",\r\n    \"insuredId\": \"{{insuredIdForStatementGeneralPractitioner}}\",\r\n    \"countType\": \"STATEMENT\",\r\n    \"receptionDate\": \"{{1MonthAgo}}\",\r\n    \"currencyCode\": \"{{euro}}\",\r\n    \"invoiceNumber\": \"{{$randomInt}}{{$randomInt}}\",\r\n    \"countLines\": [\r\n        {\r\n            \"supplementaryPlanActCode\": \"{{actCodeGeneralPractitioner}}\",\r\n            \"startDateOfTreatments\": \"{{1MonthAgo}}\",\r\n            \"mandatoryPlanBaseAmount\": 25,\r\n            \"quantity\": \"1\",\r\n            \"actualCostsAmount\": 30\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/health/statements",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements"
							]
						}
					},
					"response": []
				},
				{
					"name": "Charger la prestation créée",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"console.log(\"URL pour consulter l'objet créé dans CLEVA Web :\")\r",
									"console.log(pm.environment.get(\"clevaWebUrl\")+ \"sinistre/sante/sousDossier/\" +jsonData.data.id +\"/consultation\");\r",
									"\r",
									"let lignesSaisies = jsonData.data.countLines;\r",
									"let lignesGenerees = jsonData.data.detailsLines;\r",
									"\r",
									"\r",
									"//Identifiant du decompte\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerStatementNumber\", pm.response.json().data.number);\r",
									"\r",
									"//Ligne decompte saisie\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerEnteredStatementLines\", lignesSaisies[_.random(0, lignesSaisies.length-1)]);\r",
									"\r",
									"//Identifiant du decompte\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerStatementId\", pm.response.json().data.id);\r",
									"\r",
									"//Ligne decompte generee\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerGeneratedStatementLines\", lignesGenerees[_.random(0, lignesGenerees.length-1)]);\r",
									"\r",
									"\r",
									"\r",
									"//Le type doit être statement\r",
									"pm.test(\"Count type should be STATEMENT\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerEnteredStatementLines\").countType).to.eql('STATEMENT');\r",
									"});\r",
									"\r",
									"pm.test(\"Insured name is \" + pm.collectionVariables.get(\"insuredNameForStatementGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerGeneratedStatementLines\").insuredName).to.eql(pm.collectionVariables.get(\"insuredNameForStatementGeneralPractitioner\"));\r",
									"});\r",
									"\r",
									"// Une ligne de decompte doit être générée\r",
									"pm.test(\"One computed line generated\", function () {\r",
									"    pm.expect(lignesGenerees.length).to.eql(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act code is \" + pm.collectionVariables.get(\"actCodeGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerEnteredStatementLines\").supplementaryPlanActCode).to.eql(pm.collectionVariables.get(\"actCodeGeneralPractitioner\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act label is \" + pm.collectionVariables.get(\"actLabelGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerEnteredStatementLines\").supplementaryPlanActLabel).to.eql(pm.collectionVariables.get(\"actLabelGeneralPractitioner\"));\r",
									"});\r",
									"\r",
									"//Numéro de facture\r",
									"pm.collectionVariables.set('consultationGeneralPractitionerInvoiceStatement', lignesSaisies[_.random(0, lignesSaisies.length-1)].invoiceNumber);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/statements/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{consultationGeneralPractitionerStatementId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Modifier la prestation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"console.log(\"URL pour consulter l'objet créé dans CLEVA Web :\")\r",
									"console.log(pm.environment.get(\"clevaWebUrl\")+ \"sinistre/sante/sousDossier/\" +jsonData.data.id +\"/consultation\");\r",
									"\r",
									"let lignesSaisies = jsonData.data.countLines;\r",
									"let lignesGenerees = jsonData.data.detailsLines;\r",
									"\r",
									"\r",
									"//Identifiant du decompte\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerStatementId\", pm.response.json().data.id);\r",
									"\r",
									"//Ligne decompte saisie\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerEnteredStatementLines\", lignesSaisies[_.random(0, lignesSaisies.length-1)]);\r",
									"\r",
									"\r",
									"//Ligne decompte generee\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerGeneratedStatementLines\", lignesGenerees[_.random(0, lignesGenerees.length-1)]);\r",
									"\r",
									"\r",
									"\r",
									"//Le type doit être statement\r",
									"pm.test(\"Count type should be STATEMENT\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerEnteredStatementLines\").countType).to.eql('STATEMENT');\r",
									"});\r",
									"\r",
									"pm.test(\"Insured name is \" + pm.collectionVariables.get(\"insuredNameForStatementGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerGeneratedStatementLines\").insuredName).to.eql(pm.collectionVariables.get(\"insuredNameForStatementGeneralPractitioner\"));\r",
									"});\r",
									"\r",
									"// Une ligne de decompte doit être générée\r",
									"pm.test(\"One computed line generated\", function () {\r",
									"    pm.expect(lignesGenerees.length).to.eql(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act code is \" + pm.collectionVariables.get(\"actCodeGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerEnteredStatementLines\").supplementaryPlanActCode).to.eql(pm.collectionVariables.get(\"actCodeGeneralPractitioner\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act label is \" + pm.collectionVariables.get(\"actLabelGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerEnteredStatementLines\").supplementaryPlanActLabel).to.eql(pm.collectionVariables.get(\"actLabelGeneralPractitioner\"));\r",
									"});\r",
									"\r",
									"//Numéro de facture\r",
									"pm.collectionVariables.set('consultationGeneralPractitionerInvoiceStatement', lignesSaisies[_.random(0, lignesSaisies.length-1)].invoiceNumber);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"pm.collectionVariables.set('consultationGeneralPractitionerInvoiceStatement', '{{$timestamp}}');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"externalReference\":\"{{$randomInt}}{{$randomInt}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/health/statements/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{consultationGeneralPractitionerStatementId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Rechercher le décompte consultation généraliste",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let resultats = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerSearchedStatement\", resultats[_.random(0, resultats.length-1)]);\r",
									"\r",
									"\r",
									"//Le type doit être statement\r",
									"pm.test(\"Count type should be STATEMENT\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerSearchedStatement\").countType).to.eql('STATEMENT');\r",
									"});\r",
									"\r",
									"/*\r",
									"pm.test(\"Supplemantaty plan act code is \" + pm.collectionVariables.get(\"actCodeGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerSearchedStatement\").supplementaryPlanActCode).to.eql(pm.collectionVariables.get(\"actCodeGeneralPractitioner\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act label is \" + pm.collectionVariables.get(\"actLabelGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerSearchedStatement\").supplementaryPlanActLabel).to.eql(pm.collectionVariables.get(\"actLabelGeneralPractitioner\"));\r",
									"});*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/statements/lines?invoiceNumber={{consultationGeneralPractitionerInvoiceStatement}}&limit=5",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								"lines"
							],
							"query": [
								{
									"key": "invoiceNumber",
									"value": "{{consultationGeneralPractitionerInvoiceStatement}}"
								},
								{
									"key": "contractNumber",
									"value": "PSCS1_C_00003",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Rechercher la prestation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let resultats = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"decompteConsultationGeneralisteRecherché\", resultats[_.random(0, resultats.length-1)]);\r",
									"\r",
									"\r",
									"//Le type doit être statement\r",
									"pm.test(\"Count type should be STATEMENT\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"decompteConsultationGeneralisteRecherché\").countType).to.eql('STATEMENT');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/statements?statementNumber={{consultationGeneralPractitionerStatementNumber}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements"
							],
							"query": [
								{
									"key": "statementNumber",
									"value": "{{consultationGeneralPractitionerStatementNumber}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Décompte consultation généraliste (avec vérification droits)",
			"item": [
				{
					"name": "Prérequis",
					"item": [
						{
							"name": "Connexion Cleva",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"token\", pm.response.text());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "AALR",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ALR",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login}}\",\n    \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{url}}/me/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"me",
										"login"
									]
								},
								"description": "Chargement d'une tâche"
							},
							"response": []
						},
						{
							"name": "Créer devis base PSCS1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //get ID\r",
											"    pm.collectionVariables.set(\"policeIDPSCS1\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customerId\": \"{{enterpriseCustomerId}}\",\n    \"productCode\": \"PSCS1\",\n    \"hubId\":\"{{VIAMEDISId}}\",\n    \"description\": \"Santé précalculé : Produit collectif standard\",\n    \"status\": {\n        \"subcode\": \"01\",\n        \"effectiveDate\": \"{{2MonthsAgo}}\"\n\n    },\n    \"typology\": {\n        \"basic\": true,\n        \"basicType\": \"ENTERPRISE\"\n    },\n    \"jobClassCode\": \"ENSEMBLE\",\n    \"freeZones\": {\n        \"PPSPROD_PSCS1_ZL_SOCLE_NIV\": {\n            \"type\": \"STRING\",\n            \"value\": \"NIVEAU ESSENTIEL\"\n        },\n        \"PPSPROD_PSCS1_ZL_AGE_MOY_SAL\": {\n            \"type\": \"STRING\",\n            \"value\": \"50\"\n        },\n        \"PPSPROD_PSCS1_ZL_QUALITE_AUTORISEES_SOCLE\": {\n            \"type\": \"STRING\",\n            \"value\": \"A\"\n        },\n        \"PPSPROD_PSCS1_SI_RENFORT\": {\n            \"type\": \"BOOLEAN\",\n            \"value\": false\n        },\n        \"PPSPROD_PSCS1_ZL_DEPART_GEO\": {\n            \"type\": \"STRING\",\n            \"value\": \"69\"\n        },\n        \"PPSPROD_PSCS1_SI_EXTENSION\": {\n            \"type\": \"BOOLEAN\",\n            \"value\": false\n        },\n        \"PPSPROD_PSCS1_COTI_SOCLE\": {\n            \"type\": \"STRING\",\n            \"value\": \"PSCS1_ASS_SAL\"\n        }\n    },\n        \"payment\": {\n        \"periodicity\": \"ANNUAL\",\n        \"termPayer\": \"CUSTOMER\",\n        \"termPaymentCode\": \"PA\",\n        \"directDebitDay\": \"17\"\n    },\n    \"contributionBase\": {\n        \"code\": \"PSCS1_ASS_IF\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/health/collective/contracts",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"collective",
										"contracts"
									]
								},
								"description": "La méthode permet de créer un devis ou contrat collectif en santé ou prévoyance. La création nécessitera un code correspondant à un produit santé disponible. Vous pouvez récuperer la liste des produits disponible avec la ressource HelpList"
							},
							"response": [
								{
									"name": "201 ok",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerId\": \"{{enterpriseCustomerId}}\",\n    \"productCode\": \"PSCS1\",\n    \"hubId\":\"{{VIAMEDISId}}\",\n    \"description\": \"Santé précalculé : Produit collectif standard\",\n    \"status\": {\n        \"subcode\": \"01\",\n        \"effectiveDate\": \"{{2MonthsAgo}}\"\n\n    },\n    \"typology\": {\n        \"basic\": true,\n        \"basicType\": \"ENTERPRISE\"\n    },\n    \"jobClassCode\": \"ENSEMBLE\",\n    \"freeZones\": {\n        \"PPSPROD_PSCS1_ZL_SOCLE_NIV\": {\n            \"type\": \"STRING\",\n            \"value\": \"NIVEAU ESSENTIEL\"\n        },\n        \"PPSPROD_PSCS1_ZL_AGE_MOY_SAL\": {\n            \"type\": \"STRING\",\n            \"value\": \"50\"\n        },\n        \"PPSPROD_PSCS1_ZL_QUALITE_AUTORISEES_SOCLE\": {\n            \"type\": \"STRING\",\n            \"value\": \"A\"\n        },\n        \"PPSPROD_PSCS1_SI_RENFORT\": {\n            \"type\": \"BOOLEAN\",\n            \"value\": false\n        },\n        \"PPSPROD_PSCS1_ZL_DEPART_GEO\": {\n            \"type\": \"STRING\",\n            \"value\": \"69\"\n        },\n        \"PPSPROD_PSCS1_SI_EXTENSION\": {\n            \"type\": \"BOOLEAN\",\n            \"value\": false\n        },\n        \"PPSPROD_PSCS1_COTI_SOCLE\": {\n            \"type\": \"STRING\",\n            \"value\": \"PSCS1_ASS_SAL\"\n        }\n    },\n        \"payment\": {\n        \"periodicity\": \"ANNUAL\",\n        \"termPayer\": \"CUSTOMER\",\n        \"termPaymentCode\": \"PA\",\n        \"directDebitDay\": \"17\"\n    },\n    \"contributionBase\": {\n        \"code\": \"PSCS1_ASS_IF\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/health/collective/contracts",
											"host": [
												"{{url}}"
											],
											"path": [
												"health",
												"collective",
												"contracts"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Language",
											"value": "fr-FR"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Tue, 13 Jun 2023 07:51:01 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 201,\n    \"data\": {\n        \"adjustmentCoefficient\": 0,\n        \"beneficiaryAuthorizations\": {\n            \"POLICY_HOLDER\": {\n                \"authorized\": true,\n                \"maxAge\": 70\n            },\n            \"CHILD\": {\n                \"authorized\": false,\n                \"maxAge\": 26,\n                \"maxAgeNoProof\": 18\n            },\n            \"SPOUSE\": {\n                \"authorized\": false,\n                \"maxAge\": 65\n            },\n            \"PARENT\": {\n                \"authorized\": false\n            },\n            \"OTHER\": {\n                \"authorized\": false\n            }\n        },\n        \"branchCode\": \"SANTE\",\n        \"branchLabel\": \"Santé\",\n        \"brokers\": [],\n        \"cardinalityType\": \"COLLECTIVE\",\n        \"coinsurance\": false,\n        \"commercialCoefficient\": 0,\n        \"commissions\": {\n            \"coinsuranceApetitionCommission\": 0,\n            \"endorsementDeduced\": \"NOT_DEDUCTED_WITH_DEPOSIT_SLIP\",\n            \"newBusinessDeduced\": \"NOT_DEDUCTED_WITH_DEPOSIT_SLIP\",\n            \"termDeduced\": \"NOT_DEDUCTED_WITH_DEPOSIT_SLIP\",\n            \"terminationDeduced\": \"NOT_DEDUCTED_WITH_DEPOSIT_SLIP\",\n            \"totalCommissionRate\": 0\n        },\n        \"companyCode\": \"ADP**\",\n        \"companyLabel\": \"Starterbox - ADP\",\n        \"contacts\": [],\n        \"contributionBase\": {\n            \"baseType\": \"WORKFORCE\",\n            \"code\": \"PSCS1_ASS_IF\",\n            \"description\": \"Isolé : le salarié seul\\r\\nFamille : le salarié et ses ayants-droit\",\n            \"id\": \"20029487\",\n            \"label\": \"Isolé / Famille\",\n            \"startDate\": \"2023-02-13\"\n        },\n        \"currentIndex\": 0,\n        \"customerDeposit\": \"0.0\",\n        \"customerId\": \"20008682\",\n        \"customerName\": \"SCHROEDER ALFORD\",\n        \"debtRecoveryExclusion\": false,\n        \"description\": \"SCHROEDER ALFORD |  | BASE ENTREPRISE | NIVEAU ESSENTIEL | \",\n        \"dsnCompatible\": true,\n        \"freeZones\": {\n            \"PPSPROD_PSCS1_ZL_DELEGATION\": {},\n            \"PPSPROD_PSCS1_ZL_TR_AGE\": {\n                \"type\": \"STRING\",\n                \"value\": \"30-59\"\n            },\n            \"PPSPROD_PSCS1_ZL_SOCLE_NIV\": {\n                \"type\": \"STRING\",\n                \"value\": \"NIVEAU ESSENTIEL\"\n            },\n            \"PPSPROD_PSCS1_3_EME_ENF_GRATUIT\": {},\n            \"PPSPROD_PSCS1_ZL_NIV_EXT\": {\n                \"type\": \"STRING\",\n                \"value\": \"NIVEAU ESSENTIEL\"\n            },\n            \"PPSPROD_PSCS1_ZL_AGE_MOY_SAL\": {\n                \"type\": \"STRING\",\n                \"value\": \"50\"\n            },\n            \"PPSPROD_PSCS1_ZL_OFFRE\": {\n                \"type\": \"STRING\",\n                \"value\": \"Standard\"\n            },\n            \"PPSPROD_PSCS1_COTI_SOCLE\": {\n                \"type\": \"STRING\",\n                \"value\": \"PSCS1_ASS_SAL\"\n            },\n            \"PPSPROD_PSCS1_ZL_RENFORT_NIV\": {},\n            \"PPSPROD_PSCS1_SI_RENFORT\": {\n                \"type\": \"BOOLEAN\",\n                \"value\": false\n            },\n            \"PPSPROD_PSCS1_ZL_ZONE\": {\n                \"type\": \"STRING\",\n                \"value\": \"AUT\"\n            },\n            \"PPSPROD_PSCS1_SI_EXTENSION\": {\n                \"type\": \"BOOLEAN\",\n                \"value\": false\n            },\n            \"PPSPROD_PSCS1_ZL_GENE_TARIF\": {\n                \"type\": \"STRING\",\n                \"value\": \"Standard\"\n            },\n            \"PPSPROD_PSCS1_ZL_DEPART_GEO\": {\n                \"type\": \"STRING\",\n                \"value\": \"69\"\n            }\n        },\n        \"id\": \"20229157\",\n        \"indexable\": false,\n        \"insurerCode\": \"XDSN2\",\n        \"insurerId\": \"20000041\",\n        \"insurerName\": \"INETUM CIE DSN PR2 FFSA\",\n        \"limitationPeriod\": 0,\n        \"management\": {},\n        \"master\": false,\n        \"modularManagement\": false,\n        \"number\": \"PSCS1_D_09403\",\n        \"origin\": 0,\n        \"payment\": {\n            \"bankDetailsUsageCode\": \"P\",\n            \"bankDetailsUsageLabel\": \"Principale\",\n            \"directDebitDay\": 17,\n            \"discountNonDeductedCommissionPayout\": true,\n            \"discountPayer\": \"CUSTOMER\",\n            \"endorsementDiscountCode\": \"PA\",\n            \"endorsementNonDeductedCommissionPayout\": true,\n            \"endorsementPayer\": \"CUSTOMER\",\n            \"endorsementPaymentCode\": \"PA\",\n            \"fiscalTerritory\": \"STD\",\n            \"newBusinessNonDeductedCommissionPayout\": true,\n            \"newBusinessPayer\": \"CUSTOMER\",\n            \"newBusinessPaymentCode\": \"PA\",\n            \"numberMonthsPaymentPeriod\": 0,\n            \"payablePersonCallName\": \"SCHROEDER ALFORD\",\n            \"payerPersonId\": \"20016005\",\n            \"periodicity\": \"QUARTERLY\",\n            \"termPayer\": \"CUSTOMER\",\n            \"termPaymentCode\": \"PA\",\n            \"termPeriodicity\": \"EXPIRED\"\n        },\n        \"previousIndex\": 0,\n        \"productCode\": \"PSCS1\",\n        \"productLabel\": \"Santé précalculé : Produit collectif standard\",\n        \"provisionalPremiumCallRate\": 0,\n        \"revisable\": false,\n        \"status\": {\n            \"code\": \"QUOTE\",\n            \"creationDate\": \"2023-06-13T09:51:00+02:00\",\n            \"earliestDate\": \"2023-02-13\",\n            \"effectiveDate\": \"2023-02-13\",\n            \"effectiveTime\": \"2023-02-13\",\n            \"mainDueDate\": \"0101\",\n            \"nextDueDate\": \"2023-04-01\",\n            \"nextDueDateCode\": \"2304\",\n            \"nextMainDueDate\": \"2024-01-01\",\n            \"originalContractEffectiveDate\": \"2023-02-13\",\n            \"startDate\": \"2023-02-13\",\n            \"subcode\": \"01\",\n            \"sublabel\": \"Devis en cours de création\",\n            \"termBlocked\": false\n        },\n        \"termNonDeductedCommissionPayout\": true,\n        \"typology\": {\n            \"basic\": true,\n            \"basicType\": \"ENTERPRISE\",\n            \"mandatoryMembership\": true,\n            \"nonResponsible\": false,\n            \"pensionPlan\": false,\n            \"rightRetention\": false\n        }\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Définir les modèles de couverture et cotisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "ITN_ACTIVATE_SCENARIO",
										"type": "text",
										"value": "TRUE",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"defaultFormula\":\"PSCS1_F_BASE_ESSENTIEL\",\r\n    \"effectiveDate\":\"{{2MonthsAgo}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/health/collective/contracts/:id/coverageModels",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"collective",
										"contracts",
										":id",
										"coverageModels"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{policeIDPSCS1}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "200 ok",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "ITN_ACTIVATE_SCENARIO",
												"type": "text",
												"value": "TRUE",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"defaultFormula\":\"PSCS1_F_BASE_ESSENTIEL\",\r\n    \"effectiveDate\":\"{{2MonthsAgo}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/health/collective/contracts/:id/coverageModels",
											"host": [
												"{{url}}"
											],
											"path": [
												"health",
												"collective",
												"contracts",
												":id",
												"coverageModels"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{policeIDPSCS1}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Language",
											"value": "fr-FR"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Tue, 13 Jun 2023 07:51:26 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"data\": [\n        {\n            \"beneficiaries\": [\n                {\n                    \"clauses\": [],\n                    \"formulaCode\": \"PSCS1_F_BASE_ESSENTIEL\",\n                    \"id\": \"20325730\",\n                    \"qualification\": \"POLICY_HOLDER\",\n                    \"warranties\": [\n                        {\n                            \"baseNature\": \"LUMP_BASE\",\n                            \"baseType\": \"PMSS\",\n                            \"callRateInclTax\": 0.0264,\n                            \"capital\": 0,\n                            \"code\": \"FSB**\",\n                            \"compensationRates\": {},\n                            \"contractualRateInclTax\": 1.1,\n                            \"coverageCode\": \"SBOX_SANTE_MODUL_BASE_1\",\n                            \"coverageLabel\": \"SBOX Santé Modulaire - Base 1\",\n                            \"deductibleValue\": 0,\n                            \"duration\": 0,\n                            \"freeZones\": {\n                                \"PPSPROD_PATS1_SOUSCRIPTION_DENTAIRE\": {},\n                                \"PPSPROD_PSCS1_ZL_GAD_COEF_COMPO_FAMILIALE\": {}\n                            },\n                            \"id\": \"24894036\",\n                            \"indemnity\": 0,\n                            \"insurerCode\": \"XDSN2\",\n                            \"insurerName\": \"INETUM CIE DSN PR2 FFSA\",\n                            \"label\": \"Frais de Santé de Base\",\n                            \"monthlyPassInclTax\": 0,\n                            \"multiplier\": 1,\n                            \"reductionCoefficient\": 0,\n                            \"type\": \"SICKNESS\"\n                        }\n                    ]\n                }\n            ],\n            \"code\": \"PSCS1_FAM\",\n            \"coverageModelLabel\": \"Famille\",\n            \"freeZones\": {},\n            \"id\": \"20499952\",\n            \"label\": \"PSCS1_FAM\",\n            \"startDate\": \"2023-02-13\",\n            \"versionId\": \"20499952\"\n        },\n        {\n            \"beneficiaries\": [\n                {\n                    \"clauses\": [],\n                    \"formulaCode\": \"PSCS1_F_BASE_ESSENTIEL\",\n                    \"id\": \"20325731\",\n                    \"qualification\": \"POLICY_HOLDER\",\n                    \"warranties\": [\n                        {\n                            \"baseNature\": \"LUMP_BASE\",\n                            \"baseType\": \"PMSS\",\n                            \"callRateInclTax\": 0.011,\n                            \"capital\": 0,\n                            \"code\": \"FSB**\",\n                            \"compensationRates\": {},\n                            \"contractualRateInclTax\": 1.1,\n                            \"coverageCode\": \"SBOX_SANTE_MODUL_BASE_1\",\n                            \"coverageLabel\": \"SBOX Santé Modulaire - Base 1\",\n                            \"deductibleValue\": 0,\n                            \"duration\": 0,\n                            \"freeZones\": {\n                                \"PPSPROD_PATS1_SOUSCRIPTION_DENTAIRE\": {},\n                                \"PPSPROD_PSCS1_ZL_GAD_COEF_COMPO_FAMILIALE\": {}\n                            },\n                            \"id\": \"24894039\",\n                            \"indemnity\": 0,\n                            \"insurerCode\": \"XDSN2\",\n                            \"insurerName\": \"INETUM CIE DSN PR2 FFSA\",\n                            \"label\": \"Frais de Santé de Base\",\n                            \"monthlyPassInclTax\": 0,\n                            \"multiplier\": 1,\n                            \"reductionCoefficient\": 0,\n                            \"type\": \"SICKNESS\"\n                        }\n                    ]\n                }\n            ],\n            \"code\": \"PSCS1_ISO\",\n            \"coverageModelLabel\": \"Isolé\",\n            \"freeZones\": {},\n            \"id\": \"20499953\",\n            \"label\": \"PSCS1_ISO\",\n            \"startDate\": \"2023-02-13\",\n            \"versionId\": \"20499953\"\n        }\n    ],\n    \"status\": \"SUCCESS\",\n    \"triggeredInfo\": {\n        \"triggeredActions\": [\n            {\n                \"message\": \"L'interface DSN Fiche paramétrage a été créée\",\n                \"objectReference\": {\n                    \"id\": \"20607263\",\n                    \"label\": \"DSNFICHEPARAM\",\n                    \"type\": \"TASK\"\n                },\n                \"option\": \"DSNFICHEPARAM\",\n                \"type\": \"CREATIONAGENDA\"\n            },\n            {\n                \"message\": \"L'interface DSN Fiche paramétrage a été créée\",\n                \"objectReference\": {\n                    \"id\": \"20607264\",\n                    \"label\": \"DSNFICHEPARAM\",\n                    \"type\": \"TASK\"\n                },\n                \"option\": \"DSNFICHEPARAM\",\n                \"type\": \"CREATIONAGENDA\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "Prérequis créer une autre affiliation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"window = {};\r",
											"\r",
											"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
											"\r",
											"window.faker.locale = \"fr\";\r",
											"\r",
											"pm.collectionVariables.set(\"personFamilyName\", window.faker.name.lastName().toUpperCase());\r",
											"pm.collectionVariables.set(\"personFirstName\", window.faker.name.firstName(\"Male\").toUpperCase());\r",
											"\r",
											"pm.collectionVariables.set(\"personGender\",\"MALE\");\r",
											"\r",
											"pm.collectionVariables.set('personAdrZipCode', window.faker.address.zipCode());\r",
											"pm.collectionVariables.set('personAdrCity', window.faker.address.city());\r",
											"pm.collectionVariables.set('personAdressStreetName', window.faker.address.streetName());\r",
											"\r",
											"pm.collectionVariables.set('personPhone', window.faker.phone.phoneNumber());\r",
											"pm.collectionVariables.set('personMail', window.faker.internet.exampleEmail());\r",
											"\r",
											"pm.collectionVariables.set(\"personBirthDate\", moment().add(-30, 'years').format(\"YYYY-MM-DD\"));  \r",
											"\r",
											"pm.collectionVariables.set('personAdressNumber', _.random(1, 10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"    //get ID\r",
											"    pm.collectionVariables.set(\"affiliationPSCS1Id\", jsonData.data.id);\r",
											"        //get ID\r",
											"    pm.collectionVariables.set(\"insuredId\", jsonData.data.insuredId);\r",
											"    //get ID\r",
											"    pm.collectionVariables.set(\"personId\", jsonData.data.person.id);\r",
											"    \r",
											"    pm.collectionVariables.set(\"insuredName\", jsonData.data.person.completeName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "ITN_ACTIVATE_SCENARIO",
										"value": "true",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json;charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": \"{{policeIDPSCS1}}\",\n    \"effectiveDate\": \"{{2MonthsAgo}}\",\n    \"status\": \"IN_PROGRESS\",\n    \"companyEntryDate\": \"{{2MonthsAgo}}\",\n    \"person\": {\n        \"familyName\": \"{{personFamilyName}}\",\n        \"firstName\": \"{{personFirstName}}\",\n        \"gender\": \"{{personGender}}\",\n        \"birthDate\": \"1990-01-01\",\n        \"birthPlace\" : \"{{personAdrCity}}\",\n        \"jobCategoryCode\": \"CADRE\"\n    },\n    \"communication\": {\n        \"cellphone\": \"+33-655-5111-94\",\n        \"email\": \"{{naturalCustomerFirstName}}{{naturalCustomerFamilyName}}@smallville.com\",\n        \"emailSendingAgreement\": \"SENDING_EMAILS_ACCEPTED\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/health/affiliates",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"affiliates"
									]
								}
							},
							"response": [
								{
									"name": "200 ok",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "ITN_ACTIVATE_SCENARIO",
												"value": "true",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json;charset=UTF-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"contractId\": \"{{policeIDPSCS1}}\",\n    \"effectiveDate\": \"{{2MonthsAgo}}\",\n    \"status\": \"IN_PROGRESS\",\n    \"companyEntryDate\": \"{{2MonthsAgo}}\",\n    \"person\": {\n        \"familyName\": \"{{personFamilyName}}\",\n        \"firstName\": \"{{personFirstName}}\",\n        \"gender\": \"{{personGender}}\",\n        \"birthDate\": \"1990-01-01\",\n        \"birthPlace\" : \"{{personAdrCity}}\",\n        \"jobCategoryCode\": \"CADRE\"\n    },\n    \"communication\": {\n        \"cellphone\": \"+33-655-5111-94\",\n        \"email\": \"{{naturalCustomerFirstName}}{{naturalCustomerFamilyName}}@smallville.com\",\n        \"emailSendingAgreement\": \"SENDING_EMAILS_ACCEPTED\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/health/affiliates",
											"host": [
												"{{url}}"
											],
											"path": [
												"health",
												"affiliates"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Language",
											"value": "fr-FR"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Tue, 13 Jun 2023 07:51:44 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"beneficiaries\": [],\n        \"beneficiaryClause\": {\n            \"parties\": [],\n            \"type\": \"STANDARD\"\n        },\n        \"billingStartDate\": \"2023-02-13\",\n        \"communication\": {\n            \"cellphone\": \"+33-655-5111-94\",\n            \"email\": \"@smallville.com\",\n            \"emailSendingAgreement\": \"SENDING_EMAILS_ACCEPTED\"\n        },\n        \"companyEntryDate\": \"2023-02-13\",\n        \"contractId\": \"20229157\",\n        \"contractNumber\": \"PSCS1_D_09403\",\n        \"contractStatus\": \"QUOTE\",\n        \"contractType\": \"ENTERPRISE\",\n        \"coverageCode\": \"PSCS1_ISO\",\n        \"coverageLabel\": \"Isolé\",\n        \"creationDate\": \"2023-06-13T09:51:34+02:00\",\n        \"customerId\": \"20008682\",\n        \"customerName\": \"SCHROEDER ALFORD\",\n        \"earning\": {},\n        \"effectiveDate\": \"2023-02-13\",\n        \"freeZones\": {},\n        \"id\": \"20499954\",\n        \"identifier\": \"AUBRY RAPHAEL\",\n        \"insuredId\": \"20096831\",\n        \"insuredName\": \"AUBRY RAPHAEL\",\n        \"insuredNumber\": \"069218\",\n        \"lastUpdate\": \"2023-06-13T09:51:38+02:00\",\n        \"mandatoryPlans\": [],\n        \"person\": {\n            \"amountOfIncome\": 0,\n            \"birthDate\": \"1990-01-01\",\n            \"birthPlace\": \"OLIVIERBOROUGH\",\n            \"completeName\": \"AUBRY RAPHAEL\",\n            \"creationDate\": \"2023-06-13T09:51:34+02:00\",\n            \"familyName\": \"AUBRY\",\n            \"firstName\": \"RAPHAËL\",\n            \"freeZones\": {},\n            \"gender\": \"MALE\",\n            \"id\": \"20151467\",\n            \"lastUpdateDate\": \"2023-06-13T09:51:34+02:00\"\n        },\n        \"refundsPayment\": {},\n        \"startDate\": \"2023-02-13\",\n        \"status\": \"IN_PROGRESS\",\n        \"supplementaryInfo\": {\n            \"noemie\": true,\n            \"thirdPartPaymentRights\": true\n        },\n        \"versionId\": \"20499954\",\n        \"window\": \"HEALTH\"\n    },\n    \"links\": [\n        {\n            \"actions\": [\n                {\n                    \"description\": \"Load affiliate\",\n                    \"method\": \"GET\",\n                    \"name\": \"load\"\n                }\n            ],\n            \"href\": \"http://ic-master-back.tnr.cleva.fr/T9-Assurance/rest/health/affiliates/20499954\",\n            \"rel\": \"self\"\n        }\n    ],\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Transformer devis PSCS1 en contrat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //get contract Number\r",
											"    pm.collectionVariables.set(\"contractNumberPSCS1\", jsonData.data.number);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/health/collective/contracts/:id/subscribe",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"collective",
										"contracts",
										":id",
										"subscribe"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{policeIDPSCS1}}",
											"description": "(Required) Quote identifier"
										}
									]
								}
							},
							"response": [
								{
									"name": "201 ok",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{url}}/health/collective/contracts/:id/subscribe",
											"host": [
												"{{url}}"
											],
											"path": [
												"health",
												"collective",
												"contracts",
												":id",
												"subscribe"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{policeIDPSCS1}}",
													"description": "(Required) Quote identifier"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Language",
											"value": "fr-FR"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Tue, 13 Jun 2023 07:53:42 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 201,\n    \"data\": {\n        \"adjustmentCoefficient\": 0,\n        \"beneficiaryAuthorizations\": {\n            \"POLICY_HOLDER\": {\n                \"authorized\": true,\n                \"maxAge\": 70\n            },\n            \"CHILD\": {\n                \"authorized\": false,\n                \"maxAge\": 26,\n                \"maxAgeNoProof\": 18\n            },\n            \"SPOUSE\": {\n                \"authorized\": false,\n                \"maxAge\": 65\n            },\n            \"PARENT\": {\n                \"authorized\": false\n            },\n            \"OTHER\": {\n                \"authorized\": false\n            }\n        },\n        \"branchCode\": \"SANTE\",\n        \"branchLabel\": \"Santé\",\n        \"brokers\": [],\n        \"cardinalityType\": \"COLLECTIVE\",\n        \"coinsurance\": false,\n        \"commercialCoefficient\": 0,\n        \"commissions\": {\n            \"coinsuranceApetitionCommission\": 0,\n            \"endorsementDeduced\": \"NOT_DEDUCTED_WITH_DEPOSIT_SLIP\",\n            \"newBusinessDeduced\": \"NOT_DEDUCTED_WITH_DEPOSIT_SLIP\",\n            \"termDeduced\": \"NOT_DEDUCTED_WITH_DEPOSIT_SLIP\",\n            \"terminationDeduced\": \"NOT_DEDUCTED_WITH_DEPOSIT_SLIP\",\n            \"totalCommissionRate\": 0\n        },\n        \"companyCode\": \"ADP**\",\n        \"companyLabel\": \"Starterbox - ADP\",\n        \"contacts\": [],\n        \"contributionBase\": {\n            \"baseType\": \"WORKFORCE\",\n            \"code\": \"PSCS1_ASS_IF\",\n            \"description\": \"Isolé : le salarié seul\\r\\nFamille : le salarié et ses ayants-droit\",\n            \"id\": \"20029487\",\n            \"label\": \"Isolé / Famille\",\n            \"startDate\": \"2023-02-13\"\n        },\n        \"currentIndex\": 0,\n        \"customerDeposit\": \"0.0\",\n        \"customerId\": \"20008682\",\n        \"customerName\": \"SCHROEDER ALFORD\",\n        \"debtRecoveryExclusion\": false,\n        \"description\": \"SCHROEDER ALFORD |  | BASE ENTREPRISE | NIVEAU ESSENTIEL | \",\n        \"dsnCompatible\": true,\n        \"dsnReference\": \"PSCS1_C_09267\",\n        \"freeZones\": {\n            \"PPSPROD_PSCS1_ZL_DELEGATION\": {},\n            \"PPSPROD_PSCS1_ZL_TR_AGE\": {\n                \"type\": \"STRING\",\n                \"value\": \"30-59\"\n            },\n            \"PPSPROD_PSCS1_ZL_SOCLE_NIV\": {\n                \"type\": \"STRING\",\n                \"value\": \"NIVEAU ESSENTIEL\"\n            },\n            \"PPSPROD_PSCS1_3_EME_ENF_GRATUIT\": {},\n            \"PPSPROD_PSCS1_ZL_NIV_EXT\": {\n                \"type\": \"STRING\",\n                \"value\": \"NIVEAU ESSENTIEL\"\n            },\n            \"PPSPROD_PSCS1_ZL_AGE_MOY_SAL\": {\n                \"type\": \"STRING\",\n                \"value\": \"50\"\n            },\n            \"PPSPROD_PSCS1_ZL_OFFRE\": {\n                \"type\": \"STRING\",\n                \"value\": \"Standard\"\n            },\n            \"PPSPROD_PSCS1_COTI_SOCLE\": {\n                \"type\": \"STRING\",\n                \"value\": \"PSCS1_ASS_SAL\"\n            },\n            \"PPSPROD_PSCS1_ZL_RENFORT_NIV\": {},\n            \"PPSPROD_PSCS1_SI_RENFORT\": {\n                \"type\": \"BOOLEAN\",\n                \"value\": false\n            },\n            \"PPSPROD_PSCS1_ZL_ZONE\": {\n                \"type\": \"STRING\",\n                \"value\": \"AUT\"\n            },\n            \"PPSPROD_PSCS1_SI_EXTENSION\": {\n                \"type\": \"BOOLEAN\",\n                \"value\": false\n            },\n            \"PPSPROD_PSCS1_ZL_GENE_TARIF\": {\n                \"type\": \"STRING\",\n                \"value\": \"Standard\"\n            },\n            \"PPSPROD_PSCS1_ZL_DEPART_GEO\": {\n                \"type\": \"STRING\",\n                \"value\": \"69\"\n            }\n        },\n        \"id\": \"20229157\",\n        \"indexable\": false,\n        \"insurerCode\": \"XDSN2\",\n        \"insurerId\": \"20000041\",\n        \"insurerName\": \"INETUM CIE DSN PR2 FFSA\",\n        \"limitationPeriod\": 0,\n        \"management\": {},\n        \"master\": false,\n        \"modularManagement\": false,\n        \"number\": \"PSCS1_C_09267\",\n        \"origin\": 0,\n        \"payment\": {\n            \"bankDetailsUsageCode\": \"P\",\n            \"bankDetailsUsageLabel\": \"Principale\",\n            \"directDebitDay\": 17,\n            \"discountNonDeductedCommissionPayout\": true,\n            \"discountPayer\": \"CUSTOMER\",\n            \"endorsementDiscountCode\": \"PA\",\n            \"endorsementNonDeductedCommissionPayout\": true,\n            \"endorsementPayer\": \"CUSTOMER\",\n            \"endorsementPaymentCode\": \"PA\",\n            \"fiscalTerritory\": \"STD\",\n            \"newBusinessNonDeductedCommissionPayout\": true,\n            \"newBusinessPayer\": \"CUSTOMER\",\n            \"newBusinessPaymentCode\": \"PA\",\n            \"numberMonthsPaymentPeriod\": 0,\n            \"payablePersonCallName\": \"SCHROEDER ALFORD\",\n            \"payerPersonId\": \"20016005\",\n            \"periodicity\": \"QUARTERLY\",\n            \"termPayer\": \"CUSTOMER\",\n            \"termPaymentCode\": \"PA\",\n            \"termPeriodicity\": \"EXPIRED\"\n        },\n        \"previousIndex\": 0,\n        \"productCode\": \"PSCS1\",\n        \"productLabel\": \"Santé précalculé : Produit collectif standard\",\n        \"provisionalPremiumCallRate\": 0,\n        \"quoteNumber\": \"PSCS1_D_09403\",\n        \"revisable\": false,\n        \"status\": {\n            \"code\": \"CONTRACT\",\n            \"creationDate\": \"2023-06-13T09:51:00+02:00\",\n            \"earliestDate\": \"2023-02-13\",\n            \"effectiveDate\": \"2023-02-13\",\n            \"effectiveTime\": \"2023-02-13\",\n            \"lastDeadlineDate\": \"2023-02-13\",\n            \"mainDueDate\": \"0101\",\n            \"nextDueDate\": \"2023-04-01\",\n            \"nextDueDateCode\": \"2304\",\n            \"nextMainDueDate\": \"2024-01-01\",\n            \"originalContractEffectiveDate\": \"2023-02-13\",\n            \"startDate\": \"2023-02-13\",\n            \"subcode\": \"1\",\n            \"sublabel\": \"En cours\",\n            \"termBlocked\": false,\n            \"updateDate\": \"2023-06-13\"\n        },\n        \"termNonDeductedCommissionPayout\": true,\n        \"typology\": {\n            \"basic\": true,\n            \"basicType\": \"ENTERPRISE\",\n            \"mandatoryMembership\": true,\n            \"nonResponsible\": false,\n            \"pensionPlan\": false,\n            \"rightRetention\": false\n        },\n        \"version\": {\n            \"formalNoticeCharges\": 0,\n            \"id\": \"20436878\",\n            \"label\": \"Affaire nouvelle\",\n            \"number\": 1,\n            \"operationDate\": \"2023-06-13T09:53:39+02:00\",\n            \"type\": \"NEW_BUSINESS\",\n            \"userLogin\": \"adp.visiteur\",\n            \"userName\": \"VISITEUR ADP\",\n            \"valueDate\": \"2023-02-13\"\n        }\n    },\n    \"status\": \"SUCCESS\",\n    \"triggeredInfo\": {\n        \"triggeredActions\": [\n            {\n                \"message\": \"L'interface DSN Fiche paramétrage a été créée\",\n                \"objectReference\": {\n                    \"id\": \"20607267\",\n                    \"label\": \"DSNFICHEPARAM\",\n                    \"type\": \"TASK\"\n                },\n                \"option\": \"DSNFICHEPARAM\",\n                \"type\": \"CREATIONAGENDA\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "Récupérer le régime général",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let codes = jsonData.data.values;\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"codeRegimeGeneral\", codes[_.random(0, codes.length-1)].code);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/settings/lists/:helpListCode?text=REGIME GENERAL",
									"host": [
										"{{url}}"
									],
									"path": [
										"settings",
										"lists",
										":helpListCode"
									],
									"query": [
										{
											"key": "text",
											"value": "REGIME GENERAL"
										}
									],
									"variable": [
										{
											"key": "helpListCode",
											"value": "SOCIAL_SYSTEMS"
										}
									]
								}
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/settings/lists/:helpListCode?text=REGIME GENERAL",
											"host": [
												"{{url}}"
											],
											"path": [
												"settings",
												"lists",
												":helpListCode"
											],
											"query": [
												{
													"key": "text",
													"value": "REGIME GENERAL"
												}
											],
											"variable": [
												{
													"key": "helpListCode",
													"value": "SOCIAL_SYSTEMS"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Thu, 20 Jan 2022 15:02:42 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"SOCIAL_SYSTEMS\",\n        \"description\": \"Social systems\",\n        \"moreResults\": false,\n        \"title\": \"SocialSystems\",\n        \"type\": \"BUILTIN\",\n        \"values\": [\n            {\n                \"code\": \"01\",\n                \"label\": \"REGIME GENERAL\"\n            }\n        ]\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Récupérer la liste des caisses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let codes = jsonData.data.values;\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"codeCaisseRO\", codes[_.random(0, codes.length-1)].code);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/settings/lists/:helpListCode?socialSystemCode={{codeRegimeGeneral}}&text=Ain&limit=100",
									"host": [
										"{{url}}"
									],
									"path": [
										"settings",
										"lists",
										":helpListCode"
									],
									"query": [
										{
											"key": "socialSystemCode",
											"value": "{{codeRegimeGeneral}}"
										},
										{
											"key": "text",
											"value": "Ain"
										},
										{
											"key": "limit",
											"value": "100"
										}
									],
									"variable": [
										{
											"key": "helpListCode",
											"value": "MANDATORY_PLAN_ORGANIZATION"
										}
									]
								}
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/settings/lists/:helpListCode?socialSystemCode={{codeRegimeGeneral}}&limit=100",
											"host": [
												"{{url}}"
											],
											"path": [
												"settings",
												"lists",
												":helpListCode"
											],
											"query": [
												{
													"key": "socialSystemCode",
													"value": "{{codeRegimeGeneral}}"
												},
												{
													"key": "text",
													"value": "rhône",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "100"
												}
											],
											"variable": [
												{
													"key": "helpListCode",
													"value": "MANDATORY_PLAN_ORGANIZATION"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Thu, 20 Jan 2022 15:03:20 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"MANDATORY_PLAN_ORGANIZATION\",\n        \"description\": \"Mandatory Plan Organization\",\n        \"moreResults\": true,\n        \"title\": \"MandatoryPlanOrganization\",\n        \"type\": \"BUILTIN\",\n        \"values\": [\n            {\n                \"code\": \"982\",\n                \"label\": \"AURILLAC\"\n            },\n            {\n                \"code\": \"939\",\n                \"label\": \"CAMIEG\"\n            },\n            {\n                \"code\": \"225\",\n                \"label\": \"CANSSM\"\n            },\n            {\n                \"code\": \"100\",\n                \"label\": \"CAVIMAC\"\n            },\n            {\n                \"code\": \"971\",\n                \"label\": \"CGSS Guadeloupe\"\n            },\n            {\n                \"code\": \"973\",\n                \"label\": \"CGSS Guyane\"\n            },\n            {\n                \"code\": \"972\",\n                \"label\": \"CGSS Martinique\"\n            },\n            {\n                \"code\": \"974\",\n                \"label\": \"CGSS Réunion\"\n            },\n            {\n                \"code\": \"758\",\n                \"label\": \"CNMSS personnel CNMSS\"\n            },\n            {\n                \"code\": \"011\",\n                \"label\": \"CPAM Ain\"\n            },\n            {\n                \"code\": \"021\",\n                \"label\": \"CPAM Aisne\"\n            },\n            {\n                \"code\": \"031\",\n                \"label\": \"CPAM Allier\"\n            },\n            {\n                \"code\": \"061\",\n                \"label\": \"CPAM Alpes-Maritimes\"\n            },\n            {\n                \"code\": \"081\",\n                \"label\": \"CPAM Ardennes\"\n            },\n            {\n                \"code\": \"072\",\n                \"label\": \"CPAM Ardèche\"\n            },\n            {\n                \"code\": \"091\",\n                \"label\": \"CPAM Ariège\"\n            },\n            {\n                \"code\": \"101\",\n                \"label\": \"CPAM Aube\"\n            },\n            {\n                \"code\": \"111\",\n                \"label\": \"CPAM Aude\"\n            },\n            {\n                \"code\": \"121\",\n                \"label\": \"CPAM Aveyron\"\n            },\n            {\n                \"code\": \"673\",\n                \"label\": \"CPAM Bas-Rhin\"\n            },\n            {\n                \"code\": \"131\",\n                \"label\": \"CPAM Bouches-du-Rhône\"\n            },\n            {\n                \"code\": \"141\",\n                \"label\": \"CPAM Calvados\"\n            },\n            {\n                \"code\": \"151\",\n                \"label\": \"CPAM Cantal\"\n            },\n            {\n                \"code\": \"161\",\n                \"label\": \"CPAM Charente\"\n            },\n            {\n                \"code\": \"171\",\n                \"label\": \"CPAM Charente-Maritime\"\n            },\n            {\n                \"code\": \"181\",\n                \"label\": \"CPAM Cher\"\n            },\n            {\n                \"code\": \"191\",\n                \"label\": \"CPAM Corrèze\"\n            },\n            {\n                \"code\": \"201\",\n                \"label\": \"CPAM Corse-du-Sud\"\n            },\n            {\n                \"code\": \"231\",\n                \"label\": \"CPAM Creuse\"\n            },\n            {\n                \"code\": \"211\",\n                \"label\": \"CPAM Côte d'Or\"\n            }\n        ]\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Récupérer la liste des centres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let codes = jsonData.data.values;\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"codeCentreRO\", codes[_.random(0, codes.length-1)].code);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/settings/lists/:helpListCode?mandatoryPlanOrgnizationCode={{codeCaisseRO}}&limit=1000",
									"host": [
										"{{url}}"
									],
									"path": [
										"settings",
										"lists",
										":helpListCode"
									],
									"query": [
										{
											"key": "text",
											"value": "Rhône",
											"disabled": true
										},
										{
											"key": "mandatoryPlanOrgnizationCode",
											"value": "{{codeCaisseRO}}"
										},
										{
											"key": "limit",
											"value": "1000"
										}
									],
									"variable": [
										{
											"key": "helpListCode",
											"value": "MANDATORY_PLAN_CENTERS"
										}
									]
								}
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/settings/lists/:helpListCode?mandatoryPlanOrgnizationCode={{codeCaisseRO}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"settings",
												"lists",
												":helpListCode"
											],
											"query": [
												{
													"key": "text",
													"value": "Rhône",
													"disabled": true
												},
												{
													"key": "mandatoryPlanOrgnizationCode",
													"value": "{{codeCaisseRO}}"
												}
											],
											"variable": [
												{
													"key": "helpListCode",
													"value": "MANDATORY_PLAN_CENTERS"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Thu, 20 Jan 2022 15:03:47 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"MANDATORY_PLAN_CENTERS\",\n        \"description\": \"Mandatory Plan Centers\",\n        \"moreResults\": true,\n        \"title\": \"MandatoryPlanCenters\",\n        \"type\": \"BUILTIN\",\n        \"values\": [\n            {\n                \"code\": \"000\",\n                \"label\": \"AURILLAC\"\n            },\n            {\n                \"code\": \"603\",\n                \"label\": \"CAMIEG\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CANSSM\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CAVIMAC\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Guadeloupe\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Guyane\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Martinique\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Réunion\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CNMSS personnel CNMSS\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ain\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aisne\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Allier\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Alpes-Maritimes\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ardennes\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ardèche\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ariège\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aube\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aude\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aveyron\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Bas-Rhin\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Bouches-du-Rhône\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Calvados\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Cantal\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Charente\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Charente-Maritime\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Cher\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Corrèze\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Corse-du-Sud\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Creuse\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Côte d'Or\"\n            }\n        ]\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Ajouter un régime obligatoire",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"//get ID\r",
											"pm.collectionVariables.set(\"mandatoryPlansId\", jsonData.data.identification);\r",
											"\r",
											"//Testing if jsonData is an object\r",
											"pm.test(\"identification is 1800144109133\", () => {\r",
											"    pm.expect(jsonData.data.identification).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"//Testing if jsonData is an object\r",
											"pm.test(\"key is 88\", () => {\r",
											"    pm.expect(jsonData.data.key).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"//Testing if jsonData is an object\r",
											"pm.test(\"systemCode is 01\", () => {\r",
											"    pm.expect(jsonData.data.systemCode).to.be.a(\"string\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [2000]);\r",
											"\r",
											"//NIR generator\r",
											"pm.collectionVariables.set(\"Sexe\", _.random(1, 2));\r",
											"pm.collectionVariables.set(\"AnneeNaissance\", _.random(10, 99));\r",
											"pm.collectionVariables.set(\"MoisNaissance\", \"0\" + _.random(1, 9));\r",
											"pm.collectionVariables.set(\"DepartementNaissance\", _.random(10, 80));\r",
											"pm.collectionVariables.set(\"InseeCommune\", _.random(100, 800));\r",
											"pm.collectionVariables.set(\"NumeroOrdre\", _.random(100, 999));\r",
											"\r",
											"pm.collectionVariables.set(\"nir\",pm.collectionVariables.get(\"Sexe\")+\"\"+pm.collectionVariables.get(\"AnneeNaissance\")+pm.collectionVariables.get(\"MoisNaissance\")+pm.collectionVariables.get(\"DepartementNaissance\")+pm.collectionVariables.get(\"InseeCommune\")+pm.collectionVariables.get(\"NumeroOrdre\"));\r",
											"var cleNir = 97 - (pm.collectionVariables.get(\"nir\") %97);\r",
											"if (cleNir < 10){\r",
											"    cleNir == 0 + \"\"+ cleNir;\r",
											"}\r",
											"pm.collectionVariables.set(\"cleNir\", cleNir);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"activateNOEMIE\": true,\r\n    \"alsaceMoselle\": false,\r\n    \"birthDate\": \"{{35YearsAgo}}\",\r\n    \"effectiveDate\": \"{{5MonthsAgo}}\",\r\n    \"identification\": \"{{nir}}\",\r\n    \"identificationKey\": \"{{cleNir}}\",\r\n    \"key\": \"{{cleNir}}\",\r\n    \"number\": \"{{nir}}\",\r\n    \"centerCode\": \"000\",\r\n    \"organizationCode\": \"011\",\r\n    \"systemCode\": \"{{codeRegimeGeneral}}\"\r\n}\r\n\r\n/*\r\n    \"centerCode\": \"{{codeCentreRO}}\",\r\n    \"organizationCode\": \"{{codeCaisseRO}}\",\r\n    */",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/persons/:id/mandatoryPlans",
									"host": [
										"{{url}}"
									],
									"path": [
										"persons",
										":id",
										"mandatoryPlans"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personId}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "201 ok",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"activateNOEMIE\": true,\r\n    \"alsaceMoselle\": false,\r\n    \"birthDate\": \"{{35YearsAgo}}\",\r\n    \"effectiveDate\": \"{{5MonthsAgo}}\",\r\n    \"identification\": \"{{nir}}\",\r\n    \"identificationKey\": \"{{cleNir}}\",\r\n    \"key\": \"{{cleNir}}\",\r\n    \"number\": \"{{nir}}\",\r\n    \"centerCode\": \"000\",\r\n    \"organizationCode\": \"011\",\r\n    \"systemCode\": \"{{codeRegimeGeneral}}\"\r\n}\r\n\r\n/*\r\n    \"centerCode\": \"{{codeCentreRO}}\",\r\n    \"organizationCode\": \"{{codeCaisseRO}}\",\r\n    */",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/persons/:id/mandatoryPlans",
											"host": [
												"{{url}}"
											],
											"path": [
												"persons",
												":id",
												"mandatoryPlans"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{personId}}"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Language",
											"value": "fr-FR"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Tue, 13 Jun 2023 07:53:52 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 201,\n    \"data\": {\n        \"activateNOEMIE\": true,\n        \"alsaceMoselle\": false,\n        \"centerCode\": \"000\",\n        \"centerLabel\": \"CPAM Ain\",\n        \"effectiveDate\": \"2023-01-13\",\n        \"id\": \"20013193\",\n        \"identification\": \"1690224326133\",\n        \"identificationKey\": \"8\",\n        \"key\": \"8\",\n        \"number\": \"1690224326133\",\n        \"organizationCode\": \"011\",\n        \"organizationLabel\": \"CPAM Ain\",\n        \"personLinkedToName\": \"AUBRY RAPHAEL\",\n        \"systemCode\": \"01\",\n        \"systemLabel\": \"REGIME GENERAL\"\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Ajouter un RIB à une personne physique",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [2000]);\r",
											"\r",
											"var moment = require('moment');\r",
											"\r",
											"window = {};\r",
											"\r",
											"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
											"\r",
											"window.faker.locale = \"fr\";\r",
											"\r",
											"pm.collectionVariables.set('companyAdrZipCode', window.faker.address.zipCode());\r",
											"pm.collectionVariables.set('companyAdrCity', window.faker.address.city());\r",
											"pm.collectionVariables.set('companyAdrStreet', window.faker.address.streetName());\r",
											"\r",
											"pm.collectionVariables.set('companyAdressNumber', _.random(1, 10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201){\r",
											"    //getJson data\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //Content type is json\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    });\r",
											"\r",
											"    //Body of response is present by testing length of response\r",
											"    pm.test(\"Body is present\", () => {\r",
											"        jsonData.length > 1;\r",
											"    });\r",
											"\r",
											"    //Testing if jsonData is an object\r",
											"    pm.test(\"Test jsonData content\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"    });\r",
											"\r",
											"    //testing bank information\r",
											"    pm.test(\"bank name is correct\", () => {\r",
											"        pm.expect(jsonData.data.bank).to.eql(\"Credit agricole\");\r",
											"    });\r",
											"\r",
											"    //testing iban information\r",
											"    pm.test(\"iban is correct\", () => {\r",
											"        pm.expect(jsonData.data.iban).to.eql(\"FR2012739000501327895759P67\");\r",
											"    });\r",
											"\r",
											"    pm.collectionVariables.set(\"personBankDetailsID\", jsonData.data.id)\r",
											"\r",
											"\r",
											"} else {\r",
											"    //status code is not 201\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"iban\": \"FR2012739000501327895759P67\",\r\n    \"bic\": \"AGRIFRPP\",\r\n    \"bank\": \"Credit agricole\",\r\n    \"bankAddress1\": \"14 {{companyAdrStreet}}\",\r\n    \"bankAddress2\": \"Second RIB\",\r\n    \"zipCode\": \"{{companyAdrZipCode}}\",\r\n    \"city\": \"{{companyAdrCity}}\",\r\n    \"activeUses\": [\r\n        {\r\n            \"code\": \"P\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/persons/:id/bankDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"persons",
										":id",
										"bankDetails"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personId}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Ajouter un RIB à une personne physique",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"iban\": \"FR2012739000501327895759P67\",\r\n    \"bic\": \"{{$randomBankAccountBic}}\",\r\n    \"bank\": \"Credit agricole\",\r\n    \"bankAddress1\": \"14 {{companyAdrStreet}}\",\r\n    \"bankAddress2\": \"Second RIB\",\r\n    \"zipCode\": \"{{companyAdrZipCode}}\",\r\n    \"city\": \"{{companyAdrCity}}\",\r\n    \"countryCode\": \"FR\",\r\n    \"activeUses\": [\"AU\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/persons/:id/bankDetails",
											"host": [
												"{{url}}"
											],
											"path": [
												"persons",
												":id",
												"bankDetails"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{personID}}"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Wed, 26 Jan 2022 15:06:17 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 201,\n    \"data\": {\n        \"activeUses\": [\n            \"AU\"\n        ],\n        \"bank\": \"Credit agricole\",\n        \"bankAddress1\": \"14 725 Rue Baraban\",\n        \"bankAddress2\": \"Second RIB\",\n        \"bic\": \"HGMOSIQ1\",\n        \"city\": \"Nanterre\",\n        \"countryCode\": \"FR\",\n        \"creationDate\": \"2022-01-26T16:06:17+01:00\",\n        \"iban\": \"FR2012739000501327895759P67\",\n        \"id\": \"20000237\",\n        \"zipCode\": \"67271\"\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Ajouter une adresse à une personne physique",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [2000]);\r",
											"\r",
											"var moment = require('moment');\r",
											"\r",
											"window = {};\r",
											"\r",
											"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
											"\r",
											"window.faker.locale = \"fr\";\r",
											"\r",
											"pm.collectionVariables.set('customerAdrZipCode', window.faker.address.zipCode());\r",
											"pm.collectionVariables.set('customerAdrCity', window.faker.address.city());\r",
											"pm.collectionVariables.set('customerAdressStreetName', window.faker.address.streetName());\r",
											"\r",
											"\r",
											"pm.collectionVariables.set('customerAdressNumber', _.random(1, 10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201){\r",
											"    //getJson data\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //Content type is json\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    });\r",
											"\r",
											"    //Body of response is present by testing length of response\r",
											"    pm.test(\"Body is present\", () => {\r",
											"        jsonData.length > 1;\r",
											"    });\r",
											"\r",
											"    //Testing if jsonData is an object\r",
											"    pm.test(\"Test jsonData content\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"    });\r",
											"\r",
											"    //testing bank information\r",
											"    pm.test(\"city is correct\", () => {\r",
											"        pm.expect(jsonData.data.city).to.be.a(\"string\");\r",
											"    });\r",
											"\r",
											"    //testing iban information\r",
											"    pm.test(\"street is correct\", () => {\r",
											"        pm.expect(jsonData.data.line3).to.be.a(\"string\");\r",
											"    });\r",
											"\r",
											"} else {\r",
											"    //status code is not 201\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json;charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"city\": \"{{customerAdrCity}}\",\r\n    \"countryCode\": \"FR\",\r\n    \"line2\": \"{{customerAdressNumber}}\",\r\n    \"line3\": \"{{customerAdressStreetName}}\",\r\n    \"mainAddress\": true,\r\n    \"zipCode\": \"{{customerAdrZipCode}}\",\r\n    \"activeUses\": [\r\n        {\r\n            \"code\": \"P\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/persons/:id/addresses",
									"host": [
										"{{url}}"
									],
									"path": [
										"persons",
										":id",
										"addresses"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personId}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "201 ok",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json;charset=UTF-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"city\": \"{{customerAdrCity}}\",\r\n    \"countryCode\": \"FR\",\r\n    \"line2\": \"{{customerAdressNumber}}\",\r\n    \"line3\": \"{{customerAdressStreetName}}\",\r\n    \"mainAddress\": true,\r\n    \"zipCode\": \"{{customerAdrZipCode}}\",\r\n    \"activeUses\": [\r\n        {\r\n            \"code\": \"P\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/persons/:id/addresses",
											"host": [
												"{{url}}"
											],
											"path": [
												"persons",
												":id",
												"addresses"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{personId}}"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Language",
											"value": "fr-FR"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Tue, 13 Jun 2023 07:54:10 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 201,\n    \"data\": {\n        \"activeUses\": [\n            {\n                \"code\": \"P\",\n                \"id\": \"20108461\",\n                \"label\": \"Principale\",\n                \"startDate\": \"2023-06-13\"\n            }\n        ],\n        \"city\": \"East Lou\",\n        \"countryCode\": \"FR\",\n        \"countryName\": \"FRANCE\",\n        \"creationDate\": \"2023-06-13T09:54:09+02:00\",\n        \"id\": \"20114347\",\n        \"latitude\": 43.77326,\n        \"line2\": \"9\",\n        \"line3\": \"Gabriel du Chat-qui-Pêche\",\n        \"longitude\": 6.209060999999999,\n        \"mainAddress\": true,\n        \"resume\": \" 9 Gabriel du Chat-qui-Pêche, 83122 East Lou, FRANCE\",\n        \"zipCode\": \"83122\"\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Lancer batch SOCLE_ATTESTATIONS_AGENDA_VIAMEDIS",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [1000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [120000]);\r",
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set(\"batchDeclarationAssureId\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"SOCLE_ATTESTATIONS_AGENDA_VIAMEDIS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/batch/start",
									"host": [
										"{{url}}"
									],
									"path": [
										"batch",
										"start"
									]
								}
							},
							"response": [
								{
									"name": "200 ok",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"SOCLE_ATTESTATIONS_AGENDA_VIAMEDIS\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/batch/start",
											"host": [
												"{{url}}"
											],
											"path": [
												"batch",
												"start"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Language",
											"value": "fr-FR"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Tue, 13 Jun 2023 07:54:19 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"SOCLE_ATTESTATIONS_AGENDA_VIAMEDIS\",\n        \"description\": \"\",\n        \"id\": \"CLEVA_20016239\",\n        \"implementation\": \"DeclarationAssure\",\n        \"startTime\": \"2023-06-13T09:54:19+02:00\",\n        \"status\": \"STARTED\",\n        \"steps\": []\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Obtenir le status d'un batch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200){\r",
											"    //getJson data\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //Content type is json\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    });\r",
											"\r",
											"    //Body of response is present by testing length of response\r",
											"    pm.test(\"Body is present\", () => {\r",
											"        jsonData.length > 1;\r",
											"    });\r",
											"\r",
											"    //Testing if jsonData is an object\r",
											"    pm.test(\"Test jsonData content\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"    });\r",
											"\r",
											"    console.log(\"le statut du batch est \"+jsonData.data.status)\r",
											"\r",
											"    pm.test(\"le status bu batch est COMPLETED ou COMPLETED_WITH_ERRORS\", function () {\r",
											"        pm.expect(jsonData.data.status).to.be.oneOf(['COMPLETED','COMPLETED_WITH_ERRORS']);\r",
											"    });\r",
											"\r",
											"} else {\r",
											"    //status code is not 200\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/batch/:id",
									"host": [
										"{{url}}"
									],
									"path": [
										"batch",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{batchDeclarationAssureId}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "ok",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/batch/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"batch",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{batchID}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Wed, 21 Apr 2021 15:25:51 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"PPSPROD_PSCS1_TERM\",\n        \"description\": \"\",\n        \"endTime\": \"2021-04-21\",\n        \"id\": \"CLEVA_1000193\",\n        \"implementation\": \"Terme\",\n        \"startTime\": \"2021-04-21\",\n        \"status\": \"FAILED\"\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Lancer batch SOCLE_CARTE_VIAMEDIS",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [1000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [120000]);\r",
											"\r",
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set(\"batchTraitementPonctuelAttestationId\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"SOCLE_CARTE_VIAMEDIS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/batch/start",
									"host": [
										"{{url}}"
									],
									"path": [
										"batch",
										"start"
									]
								}
							},
							"response": [
								{
									"name": "200 ok",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"SOCLE_CARTE_VIAMEDIS\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/batch/start",
											"host": [
												"{{url}}"
											],
											"path": [
												"batch",
												"start"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Language",
											"value": "fr-FR"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Tue, 13 Jun 2023 07:54:35 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"SOCLE_CARTE_VIAMEDIS\",\n        \"description\": \"\",\n        \"id\": \"CLEVA_20016240\",\n        \"implementation\": \"TraitementPonctuelAttestation\",\n        \"startTime\": \"2023-06-13T09:54:35+02:00\",\n        \"status\": \"STARTED\",\n        \"steps\": []\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Obtenir le status d'un batch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200){\r",
											"    //getJson data\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //Content type is json\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    });\r",
											"\r",
											"    //Body of response is present by testing length of response\r",
											"    pm.test(\"Body is present\", () => {\r",
											"        jsonData.length > 1;\r",
											"    });\r",
											"\r",
											"    //Testing if jsonData is an object\r",
											"    pm.test(\"Test jsonData content\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"    });\r",
											"\r",
											"    console.log(\"le statut du batch est \"+jsonData.data.status)\r",
											"\r",
											"    pm.test(\"le status bu batch est COMPLETED ou COMPLETED_WITH_ERRORS\", function () {\r",
											"        pm.expect(jsonData.data.status).to.be.oneOf(['COMPLETED','COMPLETED_WITH_ERRORS']);\r",
											"    });\r",
											"\r",
											"} else {\r",
											"    //status code is not 200\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/batch/:id",
									"host": [
										"{{url}}"
									],
									"path": [
										"batch",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{batchTraitementPonctuelAttestationId}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "ok",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/batch/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"batch",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{batchID}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Wed, 21 Apr 2021 15:25:51 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"PPSPROD_PSCS1_TERM\",\n        \"description\": \"\",\n        \"endTime\": \"2021-04-21\",\n        \"id\": \"CLEVA_1000193\",\n        \"implementation\": \"Terme\",\n        \"startTime\": \"2021-04-21\",\n        \"status\": \"FAILED\"\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Rechercher les droits carte tp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [12000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/health/cards/rights?mandatoryPlanNumber={{mandatoryPlansId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"cards",
										"rights"
									],
									"query": [
										{
											"key": "mandatoryPlanNumber",
											"value": "{{mandatoryPlansId}}"
										},
										{
											"key": "date",
											"value": "{{2MonthsAgo}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Recherche assuré",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let assures = jsonData.data;\r",
											"\r",
											"let assureSelectionne = assures[_.random(0, assures.length-1)];\r",
											"console.log(\"Assure selectionné\",assureSelectionne );\r",
											"\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"insuredIdForStatementGeneralPractitioner\", assureSelectionne.insuredId);\r",
											"if(assureSelectionne.person.familyName!=null){\r",
											"    pm.collectionVariables.set(\"insuredFamilyNameForStatementGeneralPractitioner\", assureSelectionne.person.familyName);\r",
											"}\r",
											"pm.collectionVariables.set(\"insuredFirstNameForStatementGeneralPractitioner\", assureSelectionne.person.firstName);\r",
											"pm.collectionVariables.set(\"insuredBirthDateForStatementGeneralPractitioner\", assureSelectionne.person.birthDate);\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"insuredNameForStatementGeneralPractitioner\", assureSelectionne.insuredName);\r",
											"pm.collectionVariables.set(\"insuredNumberForStatementGeneralPractitioner\", assureSelectionne.insuredNumber);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/health/affiliates?contractNumber={{contractNumberPSCS1}}&status=IN_PROGRESS&insuredName={{insuredName}}&effectiveDateMin={{3MonthsAgo}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"affiliates"
									],
									"query": [
										{
											"key": "contractNumber",
											"value": "{{contractNumberPSCS1}}"
										},
										{
											"key": "limit",
											"value": "30",
											"disabled": true
										},
										{
											"key": "productCode",
											"value": "PSCS1",
											"disabled": true
										},
										{
											"key": "status",
											"value": "IN_PROGRESS"
										},
										{
											"key": "id",
											"value": "{{insuredId}}",
											"disabled": true
										},
										{
											"key": "insuredName",
											"value": "{{insuredName}}"
										},
										{
											"key": "effectiveDateMin",
											"value": "{{3MonthsAgo}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Liste des codes actes RC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"actCodeGeneralPractitioner\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"pm.collectionVariables.set(\"actLabelGeneralPractitioner\", codes[_.random(0, codes.length-1)].label);\r",
									"\r",
									"console.log(\"Code acte selectionné : \" + pm.collectionVariables.get(\"actCodeGeneralPractitioner\") + \" (\" +  pm.collectionVariables.get(\"actLabelGeneralPractitioner\") + \")\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=TCG",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "code",
									"value": "TCG",
									"disabled": true
								},
								{
									"key": "text",
									"value": "TCG"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "SUPPLEMANTARY_PLAN_ACTS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Liste des devises",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"euro\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=EUR",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "limit",
									"value": "10000",
									"disabled": true
								},
								{
									"key": "text",
									"value": "EUR"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "CURRENCIES"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Type prestataire médecin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"codeProviderDoctorType\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"pm.collectionVariables.set(\"labelProviderDoctorType\", codes[_.random(0, codes.length-1)].label);\r",
									"\r",
									"console.log(\"Type prestataire : \" + pm.collectionVariables.get(\"codeProviderDoctorType\") + \" (\" +  pm.collectionVariables.get(\"labelProviderDoctorType\") + \")\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=Médecin Conseil",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "Médecin Conseil"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "SERVICE_PROVIDER_TYPES"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche médecin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"const provider = providers.find(provider => provider.finessAdeliReference ? provider.finessAdeliReference : null);\r",
									"if(provider != null){\r",
									"    pm.collectionVariables.set(\"healthProfessionalFiness\", provider.finessAdeliReference);\r",
									"} else {\r",
									"    console.log(\"Pas de finessAdeliReference trouvé\")\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"healthProfessionalId\", providers[_.random(0, providers.length-1)].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?limit=50&type={{codeProviderDoctorType}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "type",
									"value": "{{codeProviderDoctorType}}"
								},
								{
									"key": "text",
									"value": "Starterbox - ADP",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Créer un décompte consultation généraliste",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"console.log(\"URL pour consulter l'objet créé dans CLEVA Web :\")\r",
									"console.log(pm.environment.get(\"clevaWebUrl\")+ \"sinistre/sante/sousDossier/\" +jsonData.data.id +\"/consultation\");\r",
									"\r",
									"let lignesSaisies = jsonData.data.countLines;\r",
									"let lignesGenerees = jsonData.data.detailsLines;\r",
									"\r",
									"\r",
									"//Identifiant du decompte\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerStatementId\", pm.response.json().data.id);\r",
									"\r",
									"//num du decompte\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerStatementNumber\", pm.response.json().data.number);\r",
									"\r",
									"//Ligne decompte saisie\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerEnteredStatementLines\", lignesSaisies[_.random(0, lignesSaisies.length-1)]);\r",
									"\r",
									"\r",
									"//Ligne decompte generee\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerGeneratedStatementLines\", lignesGenerees[_.random(0, lignesGenerees.length-1)]);\r",
									"\r",
									"//Numéro de facture\r",
									"pm.collectionVariables.set('consultationGeneralPractitionerInvoiceStatement', lignesSaisies[_.random(0, lignesSaisies.length-1)].invoiceNumber);\r",
									"\r",
									"\r",
									"//Le type doit être statement\r",
									"pm.test(\"Count type should be STATEMENT\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerEnteredStatementLines\").countType).to.eql(\"STATEMENT\");\r",
									"});\r",
									"\r",
									"pm.test(\"Insured name is \" + pm.collectionVariables.get(\"insuredNameForStatementGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerGeneratedStatementLines\").insuredName).to.eql(pm.collectionVariables.get(\"insuredNameForStatementGeneralPractitioner\"));\r",
									"});\r",
									"\r",
									"// Une ligne de decompte doit être générée\r",
									"pm.test(\"One computed line generated\", function () {\r",
									"    pm.expect(lignesGenerees.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Supplemantaty plan act code is \" + pm.collectionVariables.get(\"actCodeGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerEnteredStatementLines\").supplementaryPlanActCode).to.eql(pm.collectionVariables.get(\"actCodeGeneralPractitioner\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Supplemantaty plan act label is \" + pm.collectionVariables.get(\"actLabelGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerEnteredStatementLines\").supplementaryPlanActLabel).to.eql(pm.collectionVariables.get(\"actLabelGeneralPractitioner\"));\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"subRecordComment\": \"{{$randomPhrase}}\",\r\n    \"summary\": \"{{$randomPhrase}}\",\r\n    \"insuredId\": \"{{insuredId}}\",\r\n    \"countType\": \"STATEMENT\",\r\n    \"receptionDate\": \"{{1MonthAgo}}\",\r\n    \"currencyCode\": \"{{euro}}\",\r\n    \"invoiceNumber\": \"{{$randomInt}}{{$randomInt}}\",\r\n    \"healthProfessionalId\": \"{{healthProfessionalId}}\",\r\n    \"countLines\": [\r\n        {\r\n            \"supplementaryPlanActCode\": \"{{actCodeGeneralPractitioner}}\",\r\n            \"startDateOfTreatments\": \"{{1MonthAgo}}\",\r\n            \"mandatoryPlanBaseAmount\": 25,\r\n            \"quantity\": \"1\",\r\n            \"actualCostsAmount\": \"30\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/health/statements",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements"
							]
						}
					},
					"response": []
				},
				{
					"name": "Charger la prestation créée",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"console.log(\"URL pour consulter l'objet créé dans CLEVA Web :\")\r",
									"console.log(pm.environment.get(\"clevaWebUrl\")+ \"sinistre/sante/sousDossier/\" +jsonData.data.id +\"/consultation\");\r",
									"\r",
									"let lignesSaisies = jsonData.data.countLines;\r",
									"let lignesGenerees = jsonData.data.detailsLines;\r",
									"\r",
									"\r",
									"//Identifiant du decompte\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerStatementId\", pm.response.json().data.id);\r",
									"\r",
									"//Ligne decompte saisie\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerEnteredStatementLines\", lignesSaisies[_.random(0, lignesSaisies.length-1)]);\r",
									"\r",
									"\r",
									"//Ligne decompte generee\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerGeneratedStatementLines\", lignesGenerees[_.random(0, lignesGenerees.length-1)]);\r",
									"\r",
									"\r",
									"\r",
									"//Le type doit être statement\r",
									"pm.test(\"Count type should be STATEMENT\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerEnteredStatementLines\").countType).to.eql('STATEMENT');\r",
									"});\r",
									"\r",
									"pm.test(\"Insured name is \" + pm.collectionVariables.get(\"insuredNameForStatementGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerGeneratedStatementLines\").insuredName).to.eql(pm.collectionVariables.get(\"insuredNameForStatementGeneralPractitioner\"));\r",
									"});\r",
									"\r",
									"// Une ligne de decompte doit être générée\r",
									"pm.test(\"One computed line generated\", function () {\r",
									"    pm.expect(lignesGenerees.length).to.eql(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act code is \" + pm.collectionVariables.get(\"actCodeGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerEnteredStatementLines\").supplementaryPlanActCode).to.eql(pm.collectionVariables.get(\"actCodeGeneralPractitioner\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act label is \" + pm.collectionVariables.get(\"actLabelGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerEnteredStatementLines\").supplementaryPlanActLabel).to.eql(pm.collectionVariables.get(\"actLabelGeneralPractitioner\"));\r",
									"});\r",
									"\r",
									"pm.test(\"editic label is in response CLEVW-51536\", function () {\r",
									"    pm.expect(jsonData.data.countLines[0].editicLabel).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//Numéro de facture\r",
									"pm.collectionVariables.set('consultationGeneralPractitionerInvoiceStatement', lignesSaisies[_.random(0, lignesSaisies.length-1)].invoiceNumber);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/statements/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{consultationGeneralPractitionerStatementId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Modifier la prestation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"console.log(\"URL pour consulter l'objet créé dans CLEVA Web :\")\r",
									"console.log(pm.environment.get(\"clevaWebUrl\")+ \"sinistre/sante/sousDossier/\" +jsonData.data.id +\"/consultation\");\r",
									"\r",
									"let lignesSaisies = jsonData.data.countLines;\r",
									"let lignesGenerees = jsonData.data.detailsLines;\r",
									"\r",
									"\r",
									"//Identifiant du decompte\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerStatementId\", pm.response.json().data.id);\r",
									"\r",
									"//Ligne decompte saisie\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerEnteredStatementLines\", lignesSaisies[_.random(0, lignesSaisies.length-1)]);\r",
									"\r",
									"\r",
									"//Ligne decompte generee\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerGeneratedStatementLines\", lignesGenerees[_.random(0, lignesGenerees.length-1)]);\r",
									"\r",
									"\r",
									"\r",
									"//Le type doit être statement\r",
									"pm.test(\"Count type should be STATEMENT\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerEnteredStatementLines\").countType).to.eql('STATEMENT');\r",
									"});\r",
									"\r",
									"pm.test(\"Insured name is \" + pm.collectionVariables.get(\"insuredNameForStatementGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerGeneratedStatementLines\").insuredName).to.eql(pm.collectionVariables.get(\"insuredNameForStatementGeneralPractitioner\"));\r",
									"});\r",
									"\r",
									"// Une ligne de decompte doit être générée\r",
									"pm.test(\"One computed line generated\", function () {\r",
									"    pm.expect(lignesGenerees.length).to.eql(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act code is \" + pm.collectionVariables.get(\"actCodeGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerEnteredStatementLines\").supplementaryPlanActCode).to.eql(pm.collectionVariables.get(\"actCodeGeneralPractitioner\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act label is \" + pm.collectionVariables.get(\"actLabelGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerEnteredStatementLines\").supplementaryPlanActLabel).to.eql(pm.collectionVariables.get(\"actLabelGeneralPractitioner\"));\r",
									"});\r",
									"\r",
									"//Numéro de facture\r",
									"pm.collectionVariables.set('consultationGeneralPractitionerInvoiceStatement', lignesSaisies[_.random(0, lignesSaisies.length-1)].invoiceNumber);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"pm.collectionVariables.set('consultationGeneralPractitionerInvoiceStatement', '{{$timestamp}}');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"externalReference\":\"{{$randomInt}}{{$randomInt}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/health/statements/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{consultationGeneralPractitionerStatementId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Rechercher le décompte consultation généraliste",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let resultats = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerSearchedStatement\", resultats[_.random(0, resultats.length-1)]);\r",
									"\r",
									"\r",
									"//Le type doit être statement\r",
									"pm.test(\"Count type should be STATEMENT\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerSearchedStatement\").countType).to.eql('STATEMENT');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act code is \" + pm.collectionVariables.get(\"actCodeGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerSearchedStatement\").supplementaryPlanActCode).to.eql(pm.collectionVariables.get(\"actCodeGeneralPractitioner\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act label is \" + pm.collectionVariables.get(\"actLabelGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerSearchedStatement\").supplementaryPlanActLabel).to.eql(pm.collectionVariables.get(\"actLabelGeneralPractitioner\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/statements/lines?invoiceNumber={{consultationGeneralPractitionerInvoiceStatement}}&limit=5",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								"lines"
							],
							"query": [
								{
									"key": "invoiceNumber",
									"value": "{{consultationGeneralPractitionerInvoiceStatement}}"
								},
								{
									"key": "contractNumber",
									"value": "PSCS1_C_00003",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Rechercher la prestation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let resultats = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"decompteConsultationGeneralisteRecherché\", resultats[_.random(0, resultats.length-1)]);\r",
									"\r",
									"\r",
									"//Le type doit être statement\r",
									"pm.test(\"Count type should be STATEMENT\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"decompteConsultationGeneralisteRecherché\").countType).to.eql('STATEMENT');\r",
									"});\r",
									"\r",
									"   \r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/statements?statementNumber={{consultationGeneralPractitionerStatementNumber}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements"
							],
							"query": [
								{
									"key": "statementNumber",
									"value": "{{consultationGeneralPractitionerStatementNumber}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Décompte PAU Prothèse auditive",
			"item": [
				{
					"name": "Recherche assuré",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let assures = jsonData.data;\r",
									"\r",
									"let assureSelectionne = assures[_.random(0, assures.length-1)];\r",
									"console.log(\"Assure selectionné\",assureSelectionne );\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"insuredId\", assureSelectionne.insuredId);\r",
									"if(assureSelectionne.person.familyName!=null){\r",
									"    pm.collectionVariables.set(\"insuredFamilyName\", assureSelectionne.person.familyName);\r",
									"}\r",
									"pm.collectionVariables.set(\"insuredFirstName\", assureSelectionne.person.firstName);\r",
									"pm.collectionVariables.set(\"insuredBirthDate\", assureSelectionne.person.birthDate);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"insuredName\", assureSelectionne.insuredName);\r",
									"pm.collectionVariables.set(\"insuredNumber\", assureSelectionne.insuredNumber);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/affiliates?contractNumber={{contractNumberPSCS1}}&status=IN_PROGRESS&insuredName={{insuredName}}&effectiveDateMin={{3MonthsAgo}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"affiliates"
							],
							"query": [
								{
									"key": "contractNumber",
									"value": "{{contractNumberPSCS1}}"
								},
								{
									"key": "limit",
									"value": "30",
									"disabled": true
								},
								{
									"key": "productCode",
									"value": "PSCS1",
									"disabled": true
								},
								{
									"key": "status",
									"value": "IN_PROGRESS"
								},
								{
									"key": "id",
									"value": "{{insuredId}}",
									"disabled": true
								},
								{
									"key": "insuredName",
									"value": "{{insuredName}}"
								},
								{
									"key": "effectiveDateMin",
									"value": "{{3MonthsAgo}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Type prestataire Audioprothésiste",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"typePrestataireMedecinCode\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"pm.collectionVariables.set(\"typePrestataireMedecinLabel\", codes[_.random(0, codes.length-1)].label);\r",
									"\r",
									"console.log(jsonData);\r",
									"\r",
									"console.log(\"Type prestataire : \" + pm.collectionVariables.get(\"typePrestataireMedecinCode\") + \" (\" +  pm.collectionVariables.get(\"typePrestataireMedecinLabel\") + \")\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=Audioprot",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "Audioprot"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "SERVICE_PROVIDER_TYPES"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche Audioprothésiste",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"\r",
									"for (let i=0; providers[i].length-1; i++){\r",
									"    if(providers.finessAdeli != null){\r",
									"            pm.collectionVariables.set(\"healthProfessionalFiness\", providers[i].finessAdeli);\r",
									"    }\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?type={{typePrestataireMedecinCode}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "type",
									"value": "{{typePrestataireMedecinCode}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Liste des codes actes PAU",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check response status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"/*\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"codeActe\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"pm.collectionVariables.set(\"libelleActe\", codes[_.random(0, codes.length-1)].label);\r",
									"\r",
									"console.log(jsonData);\r",
									"\r",
									"console.log(\"Code acte selectionné : \" + pm.collectionVariables.get(\"codeActe\") + \" (\" +  pm.collectionVariables.get(\"libelleActe\") + \")\");*/\r",
									"\r",
									"\r",
									"//Listes retournées\r",
									"let codesAudition = jsonData.data.values;\r",
									"\r",
									"function codeIsPAU(code) {\r",
									"  return code.code == 'PAU';\r",
									"}\r",
									"\r",
									"let codePAU = codesAudition.find(codeIsPAU);\r",
									"\r",
									"pm.collectionVariables.set(\"codeActe\",codePAU.code);\r",
									"console.log(pm.collectionVariables.get(\"codeActe\"))\r",
									"pm.collectionVariables.set(\"libelleActe\",codePAU.label);\r",
									"console.log(pm.collectionVariables.get(\"libelleActe\"))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=PROTHESE AUDITIVE",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "code",
									"value": "TCG",
									"disabled": true
								},
								{
									"key": "text",
									"value": "PROTHESE AUDITIVE"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "SUPPLEMANTARY_PLAN_ACTS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Créer un décompte Prothèse auditive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"console.log(\"URL pour consulter l'objet créé dans CLEVA Web :\")\r",
									"console.log(pm.environment.get(\"clevaWebUrl\")+ \"sinistre/sante/sousDossier/\" +jsonData.data.id +\"/consultation\");\r",
									"\r",
									"let lignesSaisies = jsonData.data.countLines;\r",
									"let lignesGenerees = jsonData.data.detailsLines;\r",
									"\r",
									"\r",
									"//Identifiant du decompte\r",
									"pm.collectionVariables.set(\"decompteId\", pm.response.json().data.id);\r",
									"\r",
									"//num du decompte\r",
									"pm.collectionVariables.set(\"decompteNumber\", pm.response.json().data.number);\r",
									"\r",
									"\r",
									"//Ligne decompte saisie\r",
									"pm.collectionVariables.set(\"ligneDecompteSaisiedecompte\", lignesSaisies[_.random(0, lignesSaisies.length-1)]);\r",
									"\r",
									"\r",
									"//Ligne decompte generee\r",
									"pm.collectionVariables.set(\"ligneDecompteGenereedecompte\", lignesGenerees[_.random(0, lignesGenerees.length-1)]);\r",
									"\r",
									"//Numéro de facture\r",
									"pm.collectionVariables.set('invoiceDecomptedecompte', pm.response.json().data.invoiceNumber);\r",
									"\r",
									"\r",
									"//Le type doit être statement\r",
									"pm.test(\"Count type should be STATEMENT\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"ligneDecompteSaisiedecompte\").countType).to.eql('STATEMENT');\r",
									"});\r",
									"\r",
									"pm.test(\"Insured name is \" + pm.collectionVariables.get(\"insuredName\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"ligneDecompteGenereedecompte\").insuredName).to.eql(pm.collectionVariables.get(\"insuredName\"));\r",
									"});\r",
									"\r",
									"// Une ligne de decompte doit être générée\r",
									"pm.test(\"One computed line generated\", function () {\r",
									"    pm.expect(lignesGenerees.length).to.eql(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act code is \" + pm.collectionVariables.get(\"codeActedecompte\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"ligneDecompteSaisiedecompte\").supplementaryPlanActCode).to.eql(pm.collectionVariables.get(\"codeActe\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act label is \" + pm.collectionVariables.get(\"libelleActedecompte\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"ligneDecompteSaisiedecompte\").supplementaryPlanActLabel).to.eql(pm.collectionVariables.get(\"libelleActe\"));\r",
									"});\r",
									"\r",
									"   \r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"pm.collectionVariables.set('invoiceDecompte', '{{$timestamp}}');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"subRecordComment\": \"{{$randomPhrase}}\",\r\n    \"summary\": \"{{$randomPhrase}}\",\r\n    \"insuredId\": \"{{insuredId}}\",\r\n    \"countType\": \"STATEMENT\",\r\n    \"receptionDate\": \"{{1MonthAgo}}\",\r\n    \"invoiceNumber\": \"{{invoiceDecompte}}\",\r\n    \"healthProfessionalFiness\": \"{{healthProfessionalFiness}}\",\r\n    \"countLines\": [\r\n        {\r\n            \"order\": 1,\r\n            \"supplementaryPlanActCode\": \"PAU\",\r\n            \"startDateOfTreatments\": \"{{currentDate}}\",\r\n            \"mandatoryPlanBaseAmount\": 350,\r\n            \"quantity\": \"1\",\r\n            \"coefficient\": 1,\r\n            \"actualCostsAmount\": 500,\r\n            \"mandatoryPlanRate\": 60,\r\n            \"mandatoryPlanAmount\": 21\r\n        }\r\n    ],\r\n    \"freeZones\": {\r\n        \"PPSSANTE_SANTE_ZL_COTE_DROIT_GAUCHE\": {\r\n            \"type\": \"STRING\",\r\n            \"value\": \"G\"\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/health/statements",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Décompte consultation généraliste annulé",
			"item": [
				{
					"name": "Prérequis",
					"item": [
						{
							"name": "Connexion Cleva",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"token\", pm.response.text());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "AALR",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ALR",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login}}\",\n    \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{url}}/me/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"me",
										"login"
									]
								},
								"description": "Chargement d'une tâche"
							},
							"response": []
						},
						{
							"name": "Créer devis base PSCS1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //get ID\r",
											"    pm.collectionVariables.set(\"policeIDPSCS1\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customerId\": \"{{enterpriseCustomerId}}\",\n    \"productCode\": \"PSCS1\",\n    \"hubId\":\"{{VIAMEDISId}}\",\n    \"description\": \"Santé précalculé : Produit collectif standard\",\n    \"status\": {\n        \"subcode\": \"01\",\n        \"effectiveDate\": \"{{2MonthsAgo}}\"\n\n    },\n    \"typology\": {\n        \"basic\": true,\n        \"basicType\": \"ENTERPRISE\"\n    },\n    \"jobClassCode\": \"ENSEMBLE\",\n    \"freeZones\": {\n        \"PPSPROD_PSCS1_ZL_SOCLE_NIV\": {\n            \"type\": \"STRING\",\n            \"value\": \"NIVEAU ESSENTIEL\"\n        },\n        \"PPSPROD_PSCS1_ZL_AGE_MOY_SAL\": {\n            \"type\": \"STRING\",\n            \"value\": \"50\"\n        },\n        \"PPSPROD_PSCS1_ZL_QUALITE_AUTORISEES_SOCLE\": {\n            \"type\": \"STRING\",\n            \"value\": \"A\"\n        },\n        \"PPSPROD_PSCS1_SI_RENFORT\": {\n            \"type\": \"BOOLEAN\",\n            \"value\": false\n        },\n        \"PPSPROD_PSCS1_ZL_DEPART_GEO\": {\n            \"type\": \"STRING\",\n            \"value\": \"69\"\n        },\n        \"PPSPROD_PSCS1_SI_EXTENSION\": {\n            \"type\": \"BOOLEAN\",\n            \"value\": false\n        },\n        \"PPSPROD_PSCS1_COTI_SOCLE\": {\n            \"type\": \"STRING\",\n            \"value\": \"PSCS1_ASS_SAL\"\n        }\n    },\n        \"payment\": {\n        \"periodicity\": \"ANNUAL\",\n        \"termPayer\": \"CUSTOMER\",\n        \"termPaymentCode\": \"PA\",\n        \"directDebitDay\": \"17\"\n    },\n    \"contributionBase\": {\n        \"code\": \"PSCS1_ASS_IF\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/health/collective/contracts",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"collective",
										"contracts"
									]
								},
								"description": "La méthode permet de créer un devis ou contrat collectif en santé ou prévoyance. La création nécessitera un code correspondant à un produit santé disponible. Vous pouvez récuperer la liste des produits disponible avec la ressource HelpList"
							},
							"response": []
						},
						{
							"name": "Définir les modèles de couverture et cotisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "ITN_ACTIVATE_SCENARIO",
										"type": "text",
										"value": "TRUE",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"defaultFormula\":\"PSCS1_F_BASE_ESSENTIEL\",\r\n    \"effectiveDate\":\"{{2MonthsAgo}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/health/collective/contracts/:id/coverageModels",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"collective",
										"contracts",
										":id",
										"coverageModels"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{policeIDPSCS1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Prérequis créer une autre affiliation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"window = {};\r",
											"\r",
											"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
											"\r",
											"window.faker.locale = \"fr\";\r",
											"\r",
											"pm.collectionVariables.set(\"personFamilyName\", window.faker.name.lastName().toUpperCase());\r",
											"pm.collectionVariables.set(\"personFirstName\", window.faker.name.firstName(\"Male\").toUpperCase());\r",
											"\r",
											"pm.collectionVariables.set(\"personGender\",\"MALE\");\r",
											"\r",
											"pm.collectionVariables.set('personAdrZipCode', window.faker.address.zipCode());\r",
											"pm.collectionVariables.set('personAdrCity', window.faker.address.city());\r",
											"pm.collectionVariables.set('personAdressStreetName', window.faker.address.streetName());\r",
											"\r",
											"pm.collectionVariables.set('personPhone', window.faker.phone.phoneNumber());\r",
											"pm.collectionVariables.set('personMail', window.faker.internet.exampleEmail());\r",
											"\r",
											"pm.collectionVariables.set(\"personBirthDate\", moment().add(-30, 'years').format(\"YYYY-MM-DD\"));  \r",
											"\r",
											"pm.collectionVariables.set('personAdressNumber', _.random(1, 10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"    //get ID\r",
											"    pm.collectionVariables.set(\"affiliationPSCS1Id\", jsonData.data.id);\r",
											"        //get ID\r",
											"    pm.collectionVariables.set(\"insuredId\", jsonData.data.insuredId);\r",
											"    //get ID\r",
											"    pm.collectionVariables.set(\"personId\", jsonData.data.person.id);\r",
											"    \r",
											"    pm.collectionVariables.set(\"insuredName\", jsonData.data.person.completeName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "ITN_ACTIVATE_SCENARIO",
										"value": "true",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json;charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": \"{{policeIDPSCS1}}\",\n    \"effectiveDate\": \"{{2MonthsAgo}}\",\n    \"status\": \"IN_PROGRESS\",\n    \"companyEntryDate\": \"{{2MonthsAgo}}\",\n    \"person\": {\n        \"familyName\": \"{{personFamilyName}}\",\n        \"firstName\": \"{{personFirstName}}\",\n        \"gender\": \"{{personGender}}\",\n        \"birthDate\": \"1990-01-01\",\n        \"birthPlace\" : \"{{personAdrCity}}\",\n        \"jobCategoryCode\": \"CADRE\"\n    },\n    \"communication\": {\n        \"cellphone\": \"+33-655-5111-94\",\n        \"email\": \"{{naturalCustomerFirstName}}{{naturalCustomerFamilyName}}@smallville.com\",\n        \"emailSendingAgreement\": \"SENDING_EMAILS_ACCEPTED\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/health/affiliates",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"affiliates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transformer devis PSCS1 en contrat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //get contract Number\r",
											"    pm.collectionVariables.set(\"contractNumberPSCS1\", jsonData.data.number);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/health/collective/contracts/:id/subscribe",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"collective",
										"contracts",
										":id",
										"subscribe"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{policeIDPSCS1}}",
											"description": "(Required) Quote identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Récupérer le régime général",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let codes = jsonData.data.values;\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"codeRegimeGeneral\", codes[_.random(0, codes.length-1)].code);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/settings/lists/:helpListCode?text=REGIME GENERAL",
									"host": [
										"{{url}}"
									],
									"path": [
										"settings",
										"lists",
										":helpListCode"
									],
									"query": [
										{
											"key": "text",
											"value": "REGIME GENERAL"
										}
									],
									"variable": [
										{
											"key": "helpListCode",
											"value": "SOCIAL_SYSTEMS"
										}
									]
								}
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/settings/lists/:helpListCode?text=REGIME GENERAL",
											"host": [
												"{{url}}"
											],
											"path": [
												"settings",
												"lists",
												":helpListCode"
											],
											"query": [
												{
													"key": "text",
													"value": "REGIME GENERAL"
												}
											],
											"variable": [
												{
													"key": "helpListCode",
													"value": "SOCIAL_SYSTEMS"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Thu, 20 Jan 2022 15:02:42 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"SOCIAL_SYSTEMS\",\n        \"description\": \"Social systems\",\n        \"moreResults\": false,\n        \"title\": \"SocialSystems\",\n        \"type\": \"BUILTIN\",\n        \"values\": [\n            {\n                \"code\": \"01\",\n                \"label\": \"REGIME GENERAL\"\n            }\n        ]\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Récupérer la liste des caisses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let codes = jsonData.data.values;\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"codeCaisseRO\", codes[_.random(0, codes.length-1)].code);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/settings/lists/:helpListCode?socialSystemCode={{codeRegimeGeneral}}&text=Ain&limit=100",
									"host": [
										"{{url}}"
									],
									"path": [
										"settings",
										"lists",
										":helpListCode"
									],
									"query": [
										{
											"key": "socialSystemCode",
											"value": "{{codeRegimeGeneral}}"
										},
										{
											"key": "text",
											"value": "Ain"
										},
										{
											"key": "limit",
											"value": "100"
										}
									],
									"variable": [
										{
											"key": "helpListCode",
											"value": "MANDATORY_PLAN_ORGANIZATION"
										}
									]
								}
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/settings/lists/:helpListCode?socialSystemCode={{codeRegimeGeneral}}&limit=100",
											"host": [
												"{{url}}"
											],
											"path": [
												"settings",
												"lists",
												":helpListCode"
											],
											"query": [
												{
													"key": "socialSystemCode",
													"value": "{{codeRegimeGeneral}}"
												},
												{
													"key": "text",
													"value": "rhône",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "100"
												}
											],
											"variable": [
												{
													"key": "helpListCode",
													"value": "MANDATORY_PLAN_ORGANIZATION"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Thu, 20 Jan 2022 15:03:20 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"MANDATORY_PLAN_ORGANIZATION\",\n        \"description\": \"Mandatory Plan Organization\",\n        \"moreResults\": true,\n        \"title\": \"MandatoryPlanOrganization\",\n        \"type\": \"BUILTIN\",\n        \"values\": [\n            {\n                \"code\": \"982\",\n                \"label\": \"AURILLAC\"\n            },\n            {\n                \"code\": \"939\",\n                \"label\": \"CAMIEG\"\n            },\n            {\n                \"code\": \"225\",\n                \"label\": \"CANSSM\"\n            },\n            {\n                \"code\": \"100\",\n                \"label\": \"CAVIMAC\"\n            },\n            {\n                \"code\": \"971\",\n                \"label\": \"CGSS Guadeloupe\"\n            },\n            {\n                \"code\": \"973\",\n                \"label\": \"CGSS Guyane\"\n            },\n            {\n                \"code\": \"972\",\n                \"label\": \"CGSS Martinique\"\n            },\n            {\n                \"code\": \"974\",\n                \"label\": \"CGSS Réunion\"\n            },\n            {\n                \"code\": \"758\",\n                \"label\": \"CNMSS personnel CNMSS\"\n            },\n            {\n                \"code\": \"011\",\n                \"label\": \"CPAM Ain\"\n            },\n            {\n                \"code\": \"021\",\n                \"label\": \"CPAM Aisne\"\n            },\n            {\n                \"code\": \"031\",\n                \"label\": \"CPAM Allier\"\n            },\n            {\n                \"code\": \"061\",\n                \"label\": \"CPAM Alpes-Maritimes\"\n            },\n            {\n                \"code\": \"081\",\n                \"label\": \"CPAM Ardennes\"\n            },\n            {\n                \"code\": \"072\",\n                \"label\": \"CPAM Ardèche\"\n            },\n            {\n                \"code\": \"091\",\n                \"label\": \"CPAM Ariège\"\n            },\n            {\n                \"code\": \"101\",\n                \"label\": \"CPAM Aube\"\n            },\n            {\n                \"code\": \"111\",\n                \"label\": \"CPAM Aude\"\n            },\n            {\n                \"code\": \"121\",\n                \"label\": \"CPAM Aveyron\"\n            },\n            {\n                \"code\": \"673\",\n                \"label\": \"CPAM Bas-Rhin\"\n            },\n            {\n                \"code\": \"131\",\n                \"label\": \"CPAM Bouches-du-Rhône\"\n            },\n            {\n                \"code\": \"141\",\n                \"label\": \"CPAM Calvados\"\n            },\n            {\n                \"code\": \"151\",\n                \"label\": \"CPAM Cantal\"\n            },\n            {\n                \"code\": \"161\",\n                \"label\": \"CPAM Charente\"\n            },\n            {\n                \"code\": \"171\",\n                \"label\": \"CPAM Charente-Maritime\"\n            },\n            {\n                \"code\": \"181\",\n                \"label\": \"CPAM Cher\"\n            },\n            {\n                \"code\": \"191\",\n                \"label\": \"CPAM Corrèze\"\n            },\n            {\n                \"code\": \"201\",\n                \"label\": \"CPAM Corse-du-Sud\"\n            },\n            {\n                \"code\": \"231\",\n                \"label\": \"CPAM Creuse\"\n            },\n            {\n                \"code\": \"211\",\n                \"label\": \"CPAM Côte d'Or\"\n            }\n        ]\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Récupérer la liste des centres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let codes = jsonData.data.values;\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"codeCentreRO\", codes[_.random(0, codes.length-1)].code);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/settings/lists/:helpListCode?mandatoryPlanOrgnizationCode={{codeCaisseRO}}&limit=1000",
									"host": [
										"{{url}}"
									],
									"path": [
										"settings",
										"lists",
										":helpListCode"
									],
									"query": [
										{
											"key": "text",
											"value": "Rhône",
											"disabled": true
										},
										{
											"key": "mandatoryPlanOrgnizationCode",
											"value": "{{codeCaisseRO}}"
										},
										{
											"key": "limit",
											"value": "1000"
										}
									],
									"variable": [
										{
											"key": "helpListCode",
											"value": "MANDATORY_PLAN_CENTERS"
										}
									]
								}
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/settings/lists/:helpListCode?mandatoryPlanOrgnizationCode={{codeCaisseRO}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"settings",
												"lists",
												":helpListCode"
											],
											"query": [
												{
													"key": "text",
													"value": "Rhône",
													"disabled": true
												},
												{
													"key": "mandatoryPlanOrgnizationCode",
													"value": "{{codeCaisseRO}}"
												}
											],
											"variable": [
												{
													"key": "helpListCode",
													"value": "MANDATORY_PLAN_CENTERS"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Thu, 20 Jan 2022 15:03:47 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"MANDATORY_PLAN_CENTERS\",\n        \"description\": \"Mandatory Plan Centers\",\n        \"moreResults\": true,\n        \"title\": \"MandatoryPlanCenters\",\n        \"type\": \"BUILTIN\",\n        \"values\": [\n            {\n                \"code\": \"000\",\n                \"label\": \"AURILLAC\"\n            },\n            {\n                \"code\": \"603\",\n                \"label\": \"CAMIEG\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CANSSM\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CAVIMAC\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Guadeloupe\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Guyane\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Martinique\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Réunion\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CNMSS personnel CNMSS\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ain\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aisne\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Allier\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Alpes-Maritimes\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ardennes\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ardèche\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ariège\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aube\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aude\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aveyron\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Bas-Rhin\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Bouches-du-Rhône\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Calvados\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Cantal\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Charente\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Charente-Maritime\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Cher\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Corrèze\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Corse-du-Sud\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Creuse\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Côte d'Or\"\n            }\n        ]\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Ajouter un régime obligatoire",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"//get ID\r",
											"pm.collectionVariables.set(\"mandatoryPlansId\", jsonData.data.identification);\r",
											"\r",
											"//Testing if jsonData is an object\r",
											"pm.test(\"identification is 1800144109133\", () => {\r",
											"    pm.expect(jsonData.data.identification).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"//Testing if jsonData is an object\r",
											"pm.test(\"key is 88\", () => {\r",
											"    pm.expect(jsonData.data.key).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"//Testing if jsonData is an object\r",
											"pm.test(\"systemCode is 01\", () => {\r",
											"    pm.expect(jsonData.data.systemCode).to.be.a(\"string\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//NIR generator\r",
											"pm.collectionVariables.set(\"Sexe\", _.random(1, 2));\r",
											"pm.collectionVariables.set(\"AnneeNaissance\", _.random(10, 99));\r",
											"pm.collectionVariables.set(\"MoisNaissance\", \"0\" + _.random(1, 9));\r",
											"pm.collectionVariables.set(\"DepartementNaissance\", _.random(10, 80));\r",
											"pm.collectionVariables.set(\"InseeCommune\", _.random(100, 800));\r",
											"pm.collectionVariables.set(\"NumeroOrdre\", _.random(100, 999));\r",
											"\r",
											"pm.collectionVariables.set(\"nir\",pm.collectionVariables.get(\"Sexe\")+\"\"+pm.collectionVariables.get(\"AnneeNaissance\")+pm.collectionVariables.get(\"MoisNaissance\")+pm.collectionVariables.get(\"DepartementNaissance\")+pm.collectionVariables.get(\"InseeCommune\")+pm.collectionVariables.get(\"NumeroOrdre\"));\r",
											"var cleNir = 97 - (pm.collectionVariables.get(\"nir\") %97);\r",
											"if (cleNir < 10){\r",
											"    cleNir == 0 + \"\"+ cleNir;\r",
											"}\r",
											"pm.collectionVariables.set(\"cleNir\", cleNir);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"activateNOEMIE\": true,\r\n    \"alsaceMoselle\": false,\r\n    \"birthDate\": \"{{35YearsAgo}}\",\r\n    \"effectiveDate\": \"{{5MonthsAgo}}\",\r\n    \"identification\": \"{{nir}}\",\r\n    \"identificationKey\": \"{{cleNir}}\",\r\n    \"key\": \"{{cleNir}}\",\r\n    \"number\": \"{{nir}}\",\r\n    \"centerCode\": \"000\",\r\n    \"organizationCode\": \"011\",\r\n    \"systemCode\": \"{{codeRegimeGeneral}}\"\r\n}\r\n\r\n/*\r\n    \"centerCode\": \"{{codeCentreRO}}\",\r\n    \"organizationCode\": \"{{codeCaisseRO}}\",\r\n    */",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/persons/:id/mandatoryPlans",
									"host": [
										"{{url}}"
									],
									"path": [
										"persons",
										":id",
										"mandatoryPlans"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ajouter un RIB à une personne physique",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"window = {};\r",
											"\r",
											"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
											"\r",
											"window.faker.locale = \"fr\";\r",
											"\r",
											"pm.collectionVariables.set('companyAdrZipCode', window.faker.address.zipCode());\r",
											"pm.collectionVariables.set('companyAdrCity', window.faker.address.city());\r",
											"pm.collectionVariables.set('companyAdrStreet', window.faker.address.streetName());\r",
											"\r",
											"\r",
											"pm.collectionVariables.set('companyAdressNumber', _.random(1, 10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201){\r",
											"    //getJson data\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //Content type is json\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    });\r",
											"\r",
											"    //Body of response is present by testing length of response\r",
											"    pm.test(\"Body is present\", () => {\r",
											"        jsonData.length > 1;\r",
											"    });\r",
											"\r",
											"    //Testing if jsonData is an object\r",
											"    pm.test(\"Test jsonData content\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"    });\r",
											"\r",
											"    //testing bank information\r",
											"    pm.test(\"bank name is correct\", () => {\r",
											"        pm.expect(jsonData.data.bank).to.eql(\"Credit agricole\");\r",
											"    });\r",
											"\r",
											"    //testing iban information\r",
											"    pm.test(\"iban is correct\", () => {\r",
											"        pm.expect(jsonData.data.iban).to.eql(\"FR2012739000501327895759P67\");\r",
											"    });\r",
											"\r",
											"    pm.collectionVariables.set(\"personBankDetailsID\", jsonData.data.id)\r",
											"\r",
											"\r",
											"} else {\r",
											"    //status code is not 201\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"iban\": \"FR2012739000501327895759P67\",\r\n    \"bic\": \"AGRIFRPP\",\r\n    \"bank\": \"Credit agricole\",\r\n    \"bankAddress1\": \"14 {{companyAdrStreet}}\",\r\n    \"bankAddress2\": \"Second RIB\",\r\n    \"zipCode\": \"{{companyAdrZipCode}}\",\r\n    \"city\": \"{{companyAdrCity}}\",\r\n    \"activeUses\": [\r\n        {\r\n            \"code\": \"P\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/persons/:id/bankDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"persons",
										":id",
										"bankDetails"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personId}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Ajouter un RIB à une personne physique",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"iban\": \"FR2012739000501327895759P67\",\r\n    \"bic\": \"{{$randomBankAccountBic}}\",\r\n    \"bank\": \"Credit agricole\",\r\n    \"bankAddress1\": \"14 {{companyAdrStreet}}\",\r\n    \"bankAddress2\": \"Second RIB\",\r\n    \"zipCode\": \"{{companyAdrZipCode}}\",\r\n    \"city\": \"{{companyAdrCity}}\",\r\n    \"countryCode\": \"FR\",\r\n    \"activeUses\": [\"AU\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/persons/:id/bankDetails",
											"host": [
												"{{url}}"
											],
											"path": [
												"persons",
												":id",
												"bankDetails"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{personID}}"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Wed, 26 Jan 2022 15:06:17 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 201,\n    \"data\": {\n        \"activeUses\": [\n            \"AU\"\n        ],\n        \"bank\": \"Credit agricole\",\n        \"bankAddress1\": \"14 725 Rue Baraban\",\n        \"bankAddress2\": \"Second RIB\",\n        \"bic\": \"HGMOSIQ1\",\n        \"city\": \"Nanterre\",\n        \"countryCode\": \"FR\",\n        \"creationDate\": \"2022-01-26T16:06:17+01:00\",\n        \"iban\": \"FR2012739000501327895759P67\",\n        \"id\": \"20000237\",\n        \"zipCode\": \"67271\"\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Ajouter une adresse à une personne physique",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"window = {};\r",
											"\r",
											"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
											"\r",
											"window.faker.locale = \"fr\";\r",
											"\r",
											"pm.collectionVariables.set('customerAdrZipCode', window.faker.address.zipCode());\r",
											"pm.collectionVariables.set('customerAdrCity', window.faker.address.city());\r",
											"pm.collectionVariables.set('customerAdressStreetName', window.faker.address.streetName());\r",
											"\r",
											"pm.collectionVariables.set('customerAdressNumber', _.random(1, 10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201){\r",
											"    //getJson data\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //Content type is json\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    });\r",
											"\r",
											"    //Body of response is present by testing length of response\r",
											"    pm.test(\"Body is present\", () => {\r",
											"        jsonData.length > 1;\r",
											"    });\r",
											"\r",
											"    //Testing if jsonData is an object\r",
											"    pm.test(\"Test jsonData content\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"    });\r",
											"\r",
											"    //testing bank information\r",
											"    pm.test(\"city is correct\", () => {\r",
											"        pm.expect(jsonData.data.city).to.be.a(\"string\");\r",
											"    });\r",
											"\r",
											"    //testing iban information\r",
											"    pm.test(\"street is correct\", () => {\r",
											"        pm.expect(jsonData.data.line3).to.be.a(\"string\");\r",
											"    });\r",
											"\r",
											"} else {\r",
											"    //status code is not 201\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json;charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"city\": \"{{customerAdrCity}}\",\r\n    \"countryCode\": \"FR\",\r\n    \"line2\": \"{{customerAdressNumber}}\",\r\n    \"line3\": \"{{customerAdressStreetName}}\",\r\n    \"mainAddress\": true,\r\n    \"zipCode\": \"{{customerAdrZipCode}}\",\r\n    \"activeUses\": [\r\n        {\r\n            \"code\": \"P\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/persons/:id/addresses",
									"host": [
										"{{url}}"
									],
									"path": [
										"persons",
										":id",
										"addresses"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Lancer batch SOCLE_ATTESTATIONS_AGENDA_VIAMEDIS",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [1000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [6000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"SOCLE_ATTESTATIONS_AGENDA_VIAMEDIS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/batch/start",
									"host": [
										"{{url}}"
									],
									"path": [
										"batch",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Lancer batch SOCLE_CARTE_VIAMEDIS",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [1000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [6000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"SOCLE_CARTE_VIAMEDIS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/batch/start",
									"host": [
										"{{url}}"
									],
									"path": [
										"batch",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Rechercher les droits carte tp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [12000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/health/cards/rights?mandatoryPlanNumber={{mandatoryPlansId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"cards",
										"rights"
									],
									"query": [
										{
											"key": "mandatoryPlanNumber",
											"value": "{{mandatoryPlansId}}"
										},
										{
											"key": "date",
											"value": "{{2MonthsAgo}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Recherche assuré",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let assures = jsonData.data;\r",
											"\r",
											"let assureSelectionne = assures[_.random(0, assures.length-1)];\r",
											"console.log(\"Assure selectionné\",assureSelectionne );\r",
											"\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"insuredIdForStatementGeneralPractitioner\", assureSelectionne.insuredId);\r",
											"if(assureSelectionne.person.familyName!=null){\r",
											"    pm.collectionVariables.set(\"insuredFamilyNameForStatementGeneralPractitioner\", assureSelectionne.person.familyName);\r",
											"}\r",
											"pm.collectionVariables.set(\"insuredFirstNameForStatementGeneralPractitioner\", assureSelectionne.person.firstName);\r",
											"pm.collectionVariables.set(\"insuredBirthDateForStatementGeneralPractitioner\", assureSelectionne.person.birthDate);\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"insuredNameForStatementGeneralPractitioner\", assureSelectionne.insuredName);\r",
											"pm.collectionVariables.set(\"insuredNumberForStatementGeneralPractitioner\", assureSelectionne.insuredNumber);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/health/affiliates?contractNumber={{contractNumberPSCS1}}&status=IN_PROGRESS&insuredName={{insuredName}}&effectiveDateMin={{3MonthsAgo}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"affiliates"
									],
									"query": [
										{
											"key": "contractNumber",
											"value": "{{contractNumberPSCS1}}"
										},
										{
											"key": "limit",
											"value": "30",
											"disabled": true
										},
										{
											"key": "productCode",
											"value": "PSCS1",
											"disabled": true
										},
										{
											"key": "status",
											"value": "IN_PROGRESS"
										},
										{
											"key": "id",
											"value": "{{insuredId}}",
											"disabled": true
										},
										{
											"key": "insuredName",
											"value": "{{insuredName}}"
										},
										{
											"key": "effectiveDateMin",
											"value": "{{3MonthsAgo}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Liste des codes actes RC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"actCodeGeneralPractitioner\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"pm.collectionVariables.set(\"actLabelGeneralPractitioner\", codes[_.random(0, codes.length-1)].label);\r",
									"\r",
									"console.log(\"Code acte selectionné : \" + pm.collectionVariables.get(\"actCodeGeneralPractitioner\") + \" (\" +  pm.collectionVariables.get(\"actLabelGeneralPractitioner\") + \")\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=TCG",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "TCG"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "SUPPLEMANTARY_PLAN_ACTS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Liste des devises",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"euro\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=Euro",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "Euro"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "CURRENCIES"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Créer un décompte consultation généralise",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"console.log(\"URL pour consulter l'objet créé dans CLEVA Web :\")\r",
									"console.log(pm.environment.get(\"clevaWebUrl\")+ \"sinistre/sante/sousDossier/\" +jsonData.data.id +\"/consultation\");\r",
									"\r",
									"let lignesSaisies = jsonData.data.countLines;\r",
									"let lignesGenerees = jsonData.data.detailsLines;\r",
									"\r",
									"\r",
									"//Identifiant du decompte\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerStatementId\", pm.response.json().data.id);\r",
									"\r",
									"//Ligne decompte saisie\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerEnteredStatementLines\", lignesSaisies[_.random(0, lignesSaisies.length-1)]);\r",
									"\r",
									"\r",
									"//Ligne decompte generee\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerGeneratedStatementLines\", lignesGenerees[_.random(0, lignesGenerees.length-1)]);\r",
									"\r",
									"//Numéro de facture\r",
									"pm.collectionVariables.set('consultationGeneralPractitionerInvoiceStatement', lignesSaisies[_.random(0, lignesSaisies.length-1)].invoiceNumber);\r",
									"\r",
									"\r",
									"//Le type doit être statement\r",
									"pm.test(\"Count type should be STATEMENT\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerEnteredStatementLines\").countType).to.eql(\"STATEMENT\");\r",
									"});\r",
									"\r",
									"pm.test(\"Insured name is \" + pm.collectionVariables.get(\"insuredNameForStatementGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerGeneratedStatementLines\").insuredName).to.eql(pm.collectionVariables.get(\"insuredNameForStatementGeneralPractitioner\"));\r",
									"});\r",
									"\r",
									"// Une ligne de decompte doit être générée\r",
									"pm.test(\"One computed line generated\", function () {\r",
									"    pm.expect(lignesGenerees.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Supplemantaty plan act code is \" + pm.collectionVariables.get(\"actCodeGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerEnteredStatementLines\").supplementaryPlanActCode).to.eql(pm.collectionVariables.get(\"actCodeGeneralPractitioner\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Supplemantaty plan act label is \" + pm.collectionVariables.get(\"actLabelGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerEnteredStatementLines\").supplementaryPlanActLabel).to.eql(pm.collectionVariables.get(\"actLabelGeneralPractitioner\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"pm.collectionVariables.set('consultationGeneralPractitionerInvoiceStatement', '{{$timestamp}}');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"subRecordComment\": \"{{$randomPhrase}}\",\r\n    \"summary\": \"{{$randomPhrase}}\",\r\n    \"insuredId\": \"{{insuredIdForStatementGeneralPractitioner}}\",\r\n    \"countType\": \"STATEMENT\",\r\n    \"receptionDate\": \"{{1MonthAgo}}\",\r\n    \"currencyCode\": \"{{euro}}\",\r\n    \"invoiceNumber\": \"{{consultationGeneralPractitionerInvoiceStatement}}\",\r\n    \"healthProfessionalId\": \"{{healthProfessionalId}}\",\r\n    \"countLines\": [\r\n        {\r\n            \"supplementaryPlanActCode\": \"{{actCodeGeneralPractitioner}}\",\r\n            \"startDateOfTreatments\": \"{{1MonthAgo}}\",\r\n            \"mandatoryPlanBaseAmount\": 27,\r\n            \"mandatoryPlanRate\": 100,\r\n            \"quantity\": \"1\",\r\n            \"mandatoryPlanAmount\": 27,\r\n            \"actualCostsAmount\": \"30\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/health/statements",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements"
							]
						}
					},
					"response": []
				},
				{
					"name": "Charger la prestation créée",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"console.log(\"URL pour consulter l'objet créé dans CLEVA Web :\")\r",
									"console.log(pm.environment.get(\"clevaWebUrl\")+ \"sinistre/sante/sousDossier/\" +jsonData.data.id +\"/consultation\");\r",
									"\r",
									"let lignesSaisies = jsonData.data.countLines;\r",
									"let lignesGenerees = jsonData.data.detailsLines;\r",
									"\r",
									"\r",
									"//Identifiant du decompte\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerStatementId\", pm.response.json().data.id);\r",
									"\r",
									"//Ligne decompte saisie\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerEnteredStatementLines\", lignesSaisies[_.random(0, lignesSaisies.length-1)]);\r",
									"\r",
									"\r",
									"//Ligne decompte generee\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerGeneratedStatementLines\", lignesGenerees[_.random(0, lignesGenerees.length-1)]);\r",
									"\r",
									"\r",
									"\r",
									"//Le type doit être statement\r",
									"pm.test(\"Count type should be STATEMENT\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerEnteredStatementLines\").countType).to.eql('STATEMENT');\r",
									"});\r",
									"\r",
									"pm.test(\"Insured name is \" + pm.collectionVariables.get(\"insuredNameForStatementGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerGeneratedStatementLines\").insuredName).to.eql(pm.collectionVariables.get(\"insuredNameForStatementGeneralPractitioner\"));\r",
									"});\r",
									"\r",
									"// Une ligne de decompte doit être générée\r",
									"pm.test(\"One computed line generated\", function () {\r",
									"    pm.expect(lignesGenerees.length).to.eql(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act code is \" + pm.collectionVariables.get(\"actCodeGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerEnteredStatementLines\").supplementaryPlanActCode).to.eql(pm.collectionVariables.get(\"actCodeGeneralPractitioner\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act label is \" + pm.collectionVariables.get(\"actLabelGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerEnteredStatementLines\").supplementaryPlanActLabel).to.eql(pm.collectionVariables.get(\"actLabelGeneralPractitioner\"));\r",
									"});\r",
									"\r",
									"//Numéro de facture\r",
									"pm.collectionVariables.set('consultationGeneralPractitionerInvoiceStatement', lignesSaisies[_.random(0, lignesSaisies.length-1)].invoiceNumber);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/health/statements/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{consultationGeneralPractitionerStatementId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Rechercher le décompte consultation généraliste",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let resultats = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"consultationGeneralPractitionerSearchedStatement\", resultats[_.random(0, resultats.length-1)]);\r",
									"\r",
									"\r",
									"//Le type doit être statement\r",
									"pm.test(\"Count type should be STATEMENT\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerSearchedStatement\").countType).to.eql('STATEMENT');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act code is \" + pm.collectionVariables.get(\"actCodeGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerSearchedStatement\").supplementaryPlanActCode).to.eql(pm.collectionVariables.get(\"actCodeGeneralPractitioner\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act label is \" + pm.collectionVariables.get(\"actLabelGeneralPractitioner\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"consultationGeneralPractitionerSearchedStatement\").supplementaryPlanActLabel).to.eql(pm.collectionVariables.get(\"actLabelGeneralPractitioner\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/statements/lines?invoiceNumber={{consultationGeneralPractitionerInvoiceStatement}}&limit=5",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								"lines"
							],
							"query": [
								{
									"key": "invoiceNumber",
									"value": "{{consultationGeneralPractitionerInvoiceStatement}}"
								},
								{
									"key": "insuredId",
									"value": "{{insuredIdForStatement}}",
									"disabled": true
								},
								{
									"key": "contractNumber",
									"value": "PSCS1_C_00003",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Liste des états d'annulation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"statement_Cancellation_Status\", codes[_.random(0, codes.length-1)].code);\r",
									"\r"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?grouping=CANCELED",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "Euro",
									"disabled": true
								},
								{
									"key": "grouping",
									"value": "CANCELED"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "STATEMENT_STATUSES"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Annuler le décompte",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"console.log(\"URL pour consulter l'objet créé dans CLEVA Web :\")\r",
									"console.log(pm.environment.get(\"clevaWebUrl\")+ \"sinistre/sante/sousDossier/\" +jsonData.data.id +\"/consultation\");\r",
									"\r",
									"let lignesSaisies = jsonData.data[_.random(0, data.length-1)].countLines;\r",
									"let lignesGenerees = jsonData.data[_.random(0, data.length-1)].detailsLines;\r",
									"\r",
									"// La ligne doit être annulée\r",
									"pm.test(\"The line is canceled\", function () {\r",
									"    pm.expect(lignesSaisies[_.random(0, lignesSaisies.length-1)].statusGrouping).to.eql(\"ANNULE\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"pm.collectionVariables.set('consultationGeneralPractitionerInvoiceStatement', '{{$timestamp}}');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"comments\": \"{{$randomPhrase}}\",\r\n  \"reason\": \"End of the purpose\",\r\n  \"status\": \"{{statement_Cancellation_Status}}\",\r\n  \"summary\": \"{{$randomPhrase}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/health/statements/:id/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								":id",
								"status"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{consultationGeneralPractitionerStatementId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Rechercher les assurés du contrat",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let assures = jsonData.data;\r",
									"\r",
									"let assureSelectionne = assures[_.random(0, assures.length-1)];\r",
									"console.log(\"Assure selectionné\",assureSelectionne );\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"insuredIdForStatementGeneralPractitioner\", assureSelectionne.id);\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"insuredNameForStatementGeneralPractitioner\", assureSelectionne.person.completeName);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/insureds?contractNumber={{contractNumberPSCS1}}&limit=30",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"insureds"
							],
							"query": [
								{
									"key": "contractNumber",
									"value": "{{contractNumberPSCS1}}",
									"description": "Contract number"
								},
								{
									"key": "limit",
									"value": "30",
									"description": "Maximum of items returned"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Devis prothèse dentaire métallique",
			"item": [
				{
					"name": "Prérequis",
					"item": [
						{
							"name": "Connexion Cleva",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"token\", pm.response.text());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "AALR",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ALR",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login}}\",\n    \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{url}}/me/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"me",
										"login"
									]
								},
								"description": "Chargement d'une tâche"
							},
							"response": []
						},
						{
							"name": "Créer devis base PSCS1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //get ID\r",
											"    pm.collectionVariables.set(\"policeIDPSCS1\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customerId\": \"{{enterpriseCustomerId}}\",\n    \"productCode\": \"PSCS1\",\n    \"hubId\":\"{{VIAMEDISId}}\",\n    \"description\": \"Santé précalculé : Produit collectif standard\",\n    \"status\": {\n        \"subcode\": \"01\",\n        \"effectiveDate\": \"{{2MonthsAgo}}\"\n\n    },\n    \"typology\": {\n        \"basic\": true,\n        \"basicType\": \"ENTERPRISE\"\n    },\n    \"jobClassCode\": \"ENSEMBLE\",\n    \"freeZones\": {\n        \"PPSPROD_PSCS1_ZL_SOCLE_NIV\": {\n            \"type\": \"STRING\",\n            \"value\": \"NIVEAU ESSENTIEL\"\n        },\n        \"PPSPROD_PSCS1_ZL_AGE_MOY_SAL\": {\n            \"type\": \"STRING\",\n            \"value\": \"50\"\n        },\n        \"PPSPROD_PSCS1_ZL_QUALITE_AUTORISEES_SOCLE\": {\n            \"type\": \"STRING\",\n            \"value\": \"A\"\n        },\n        \"PPSPROD_PSCS1_SI_RENFORT\": {\n            \"type\": \"BOOLEAN\",\n            \"value\": false\n        },\n        \"PPSPROD_PSCS1_ZL_DEPART_GEO\": {\n            \"type\": \"STRING\",\n            \"value\": \"69\"\n        },\n        \"PPSPROD_PSCS1_SI_EXTENSION\": {\n            \"type\": \"BOOLEAN\",\n            \"value\": false\n        },\n        \"PPSPROD_PSCS1_COTI_SOCLE\": {\n            \"type\": \"STRING\",\n            \"value\": \"PSCS1_ASS_SAL\"\n        }\n    },\n        \"payment\": {\n        \"periodicity\": \"ANNUAL\",\n        \"termPayer\": \"CUSTOMER\",\n        \"termPaymentCode\": \"PA\",\n        \"directDebitDay\": \"17\"\n    },\n    \"contributionBase\": {\n        \"code\": \"PSCS1_ASS_IF\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/health/collective/contracts",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"collective",
										"contracts"
									]
								},
								"description": "La méthode permet de créer un devis ou contrat collectif en santé ou prévoyance. La création nécessitera un code correspondant à un produit santé disponible. Vous pouvez récuperer la liste des produits disponible avec la ressource HelpList"
							},
							"response": []
						},
						{
							"name": "Définir les modèles de couverture et cotisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "ITN_ACTIVATE_SCENARIO",
										"type": "text",
										"value": "TRUE",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"defaultFormula\":\"PSCS1_F_BASE_ESSENTIEL\",\r\n    \"effectiveDate\":\"{{2MonthsAgo}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/health/collective/contracts/:id/coverageModels",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"collective",
										"contracts",
										":id",
										"coverageModels"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{policeIDPSCS1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Prérequis créer une autre affiliation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"window = {};\r",
											"\r",
											"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
											"\r",
											"window.faker.locale = \"fr\";\r",
											"\r",
											"pm.collectionVariables.set(\"personFamilyName\", window.faker.name.lastName().toUpperCase());\r",
											"pm.collectionVariables.set(\"personFirstName\", window.faker.name.firstName(\"Male\").toUpperCase());\r",
											"\r",
											"pm.collectionVariables.set(\"personGender\",\"MALE\");\r",
											"\r",
											"pm.collectionVariables.set('personAdrZipCode', window.faker.address.zipCode());\r",
											"pm.collectionVariables.set('personAdrCity', window.faker.address.city());\r",
											"pm.collectionVariables.set('personAdressStreetName', window.faker.address.streetName());\r",
											"\r",
											"pm.collectionVariables.set('personPhone', window.faker.phone.phoneNumber());\r",
											"pm.collectionVariables.set('personMail', window.faker.internet.exampleEmail());\r",
											"\r",
											"pm.collectionVariables.set(\"personBirthDate\", moment().add(-30, 'years').format(\"YYYY-MM-DD\"));  \r",
											"\r",
											"pm.collectionVariables.set('personAdressNumber', _.random(1, 10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"    //get ID\r",
											"    pm.collectionVariables.set(\"affiliationPSCS1Id\", jsonData.data.id);\r",
											"        //get ID\r",
											"    pm.collectionVariables.set(\"insuredId\", jsonData.data.insuredId);\r",
											"    //get ID\r",
											"    pm.collectionVariables.set(\"personId\", jsonData.data.person.id);\r",
											"    \r",
											"    pm.collectionVariables.set(\"insuredName\", jsonData.data.person.completeName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "ITN_ACTIVATE_SCENARIO",
										"value": "true",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json;charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": \"{{policeIDPSCS1}}\",\n    \"effectiveDate\": \"{{2MonthsAgo}}\",\n    \"status\": \"IN_PROGRESS\",\n    \"companyEntryDate\": \"{{2MonthsAgo}}\",\n    \"person\": {\n        \"familyName\": \"{{personFamilyName}}\",\n        \"firstName\": \"{{personFirstName}}\",\n        \"gender\": \"{{personGender}}\",\n        \"birthDate\": \"1990-01-01\",\n        \"birthPlace\" : \"{{personAdrCity}}\",\n        \"jobCategoryCode\": \"CADRE\"\n    },\n    \"communication\": {\n        \"cellphone\": \"+33-655-5111-94\",\n        \"email\": \"{{naturalCustomerFirstName}}{{naturalCustomerFamilyName}}@smallville.com\",\n        \"emailSendingAgreement\": \"SENDING_EMAILS_ACCEPTED\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/health/affiliates",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"affiliates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transformer devis PSCS1 en contrat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //get contract Number\r",
											"    pm.collectionVariables.set(\"contractNumberPSCS1\", jsonData.data.number);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/health/collective/contracts/:id/subscribe",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"collective",
										"contracts",
										":id",
										"subscribe"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{policeIDPSCS1}}",
											"description": "(Required) Quote identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Récupérer le régime général",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let codes = jsonData.data.values;\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"codeRegimeGeneral\", codes[_.random(0, codes.length-1)].code);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/settings/lists/:helpListCode?text=REGIME GENERAL",
									"host": [
										"{{url}}"
									],
									"path": [
										"settings",
										"lists",
										":helpListCode"
									],
									"query": [
										{
											"key": "text",
											"value": "REGIME GENERAL"
										}
									],
									"variable": [
										{
											"key": "helpListCode",
											"value": "SOCIAL_SYSTEMS"
										}
									]
								}
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/settings/lists/:helpListCode?text=REGIME GENERAL",
											"host": [
												"{{url}}"
											],
											"path": [
												"settings",
												"lists",
												":helpListCode"
											],
											"query": [
												{
													"key": "text",
													"value": "REGIME GENERAL"
												}
											],
											"variable": [
												{
													"key": "helpListCode",
													"value": "SOCIAL_SYSTEMS"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Thu, 20 Jan 2022 15:02:42 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"SOCIAL_SYSTEMS\",\n        \"description\": \"Social systems\",\n        \"moreResults\": false,\n        \"title\": \"SocialSystems\",\n        \"type\": \"BUILTIN\",\n        \"values\": [\n            {\n                \"code\": \"01\",\n                \"label\": \"REGIME GENERAL\"\n            }\n        ]\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Récupérer la liste des caisses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let codes = jsonData.data.values;\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"codeCaisseRO\", codes[_.random(0, codes.length-1)].code);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/settings/lists/:helpListCode?socialSystemCode={{codeRegimeGeneral}}&text=Ain&limit=100",
									"host": [
										"{{url}}"
									],
									"path": [
										"settings",
										"lists",
										":helpListCode"
									],
									"query": [
										{
											"key": "socialSystemCode",
											"value": "{{codeRegimeGeneral}}"
										},
										{
											"key": "text",
											"value": "Ain"
										},
										{
											"key": "limit",
											"value": "100"
										}
									],
									"variable": [
										{
											"key": "helpListCode",
											"value": "MANDATORY_PLAN_ORGANIZATION"
										}
									]
								}
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/settings/lists/:helpListCode?socialSystemCode={{codeRegimeGeneral}}&limit=100",
											"host": [
												"{{url}}"
											],
											"path": [
												"settings",
												"lists",
												":helpListCode"
											],
											"query": [
												{
													"key": "socialSystemCode",
													"value": "{{codeRegimeGeneral}}"
												},
												{
													"key": "text",
													"value": "rhône",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "100"
												}
											],
											"variable": [
												{
													"key": "helpListCode",
													"value": "MANDATORY_PLAN_ORGANIZATION"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Thu, 20 Jan 2022 15:03:20 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"MANDATORY_PLAN_ORGANIZATION\",\n        \"description\": \"Mandatory Plan Organization\",\n        \"moreResults\": true,\n        \"title\": \"MandatoryPlanOrganization\",\n        \"type\": \"BUILTIN\",\n        \"values\": [\n            {\n                \"code\": \"982\",\n                \"label\": \"AURILLAC\"\n            },\n            {\n                \"code\": \"939\",\n                \"label\": \"CAMIEG\"\n            },\n            {\n                \"code\": \"225\",\n                \"label\": \"CANSSM\"\n            },\n            {\n                \"code\": \"100\",\n                \"label\": \"CAVIMAC\"\n            },\n            {\n                \"code\": \"971\",\n                \"label\": \"CGSS Guadeloupe\"\n            },\n            {\n                \"code\": \"973\",\n                \"label\": \"CGSS Guyane\"\n            },\n            {\n                \"code\": \"972\",\n                \"label\": \"CGSS Martinique\"\n            },\n            {\n                \"code\": \"974\",\n                \"label\": \"CGSS Réunion\"\n            },\n            {\n                \"code\": \"758\",\n                \"label\": \"CNMSS personnel CNMSS\"\n            },\n            {\n                \"code\": \"011\",\n                \"label\": \"CPAM Ain\"\n            },\n            {\n                \"code\": \"021\",\n                \"label\": \"CPAM Aisne\"\n            },\n            {\n                \"code\": \"031\",\n                \"label\": \"CPAM Allier\"\n            },\n            {\n                \"code\": \"061\",\n                \"label\": \"CPAM Alpes-Maritimes\"\n            },\n            {\n                \"code\": \"081\",\n                \"label\": \"CPAM Ardennes\"\n            },\n            {\n                \"code\": \"072\",\n                \"label\": \"CPAM Ardèche\"\n            },\n            {\n                \"code\": \"091\",\n                \"label\": \"CPAM Ariège\"\n            },\n            {\n                \"code\": \"101\",\n                \"label\": \"CPAM Aube\"\n            },\n            {\n                \"code\": \"111\",\n                \"label\": \"CPAM Aude\"\n            },\n            {\n                \"code\": \"121\",\n                \"label\": \"CPAM Aveyron\"\n            },\n            {\n                \"code\": \"673\",\n                \"label\": \"CPAM Bas-Rhin\"\n            },\n            {\n                \"code\": \"131\",\n                \"label\": \"CPAM Bouches-du-Rhône\"\n            },\n            {\n                \"code\": \"141\",\n                \"label\": \"CPAM Calvados\"\n            },\n            {\n                \"code\": \"151\",\n                \"label\": \"CPAM Cantal\"\n            },\n            {\n                \"code\": \"161\",\n                \"label\": \"CPAM Charente\"\n            },\n            {\n                \"code\": \"171\",\n                \"label\": \"CPAM Charente-Maritime\"\n            },\n            {\n                \"code\": \"181\",\n                \"label\": \"CPAM Cher\"\n            },\n            {\n                \"code\": \"191\",\n                \"label\": \"CPAM Corrèze\"\n            },\n            {\n                \"code\": \"201\",\n                \"label\": \"CPAM Corse-du-Sud\"\n            },\n            {\n                \"code\": \"231\",\n                \"label\": \"CPAM Creuse\"\n            },\n            {\n                \"code\": \"211\",\n                \"label\": \"CPAM Côte d'Or\"\n            }\n        ]\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Récupérer la liste des centres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let codes = jsonData.data.values;\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"codeCentreRO\", codes[_.random(0, codes.length-1)].code);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/settings/lists/:helpListCode?mandatoryPlanOrgnizationCode={{codeCaisseRO}}&limit=1000",
									"host": [
										"{{url}}"
									],
									"path": [
										"settings",
										"lists",
										":helpListCode"
									],
									"query": [
										{
											"key": "text",
											"value": "Rhône",
											"disabled": true
										},
										{
											"key": "mandatoryPlanOrgnizationCode",
											"value": "{{codeCaisseRO}}"
										},
										{
											"key": "limit",
											"value": "1000"
										}
									],
									"variable": [
										{
											"key": "helpListCode",
											"value": "MANDATORY_PLAN_CENTERS"
										}
									]
								}
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/settings/lists/:helpListCode?mandatoryPlanOrgnizationCode={{codeCaisseRO}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"settings",
												"lists",
												":helpListCode"
											],
											"query": [
												{
													"key": "text",
													"value": "Rhône",
													"disabled": true
												},
												{
													"key": "mandatoryPlanOrgnizationCode",
													"value": "{{codeCaisseRO}}"
												}
											],
											"variable": [
												{
													"key": "helpListCode",
													"value": "MANDATORY_PLAN_CENTERS"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Thu, 20 Jan 2022 15:03:47 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"MANDATORY_PLAN_CENTERS\",\n        \"description\": \"Mandatory Plan Centers\",\n        \"moreResults\": true,\n        \"title\": \"MandatoryPlanCenters\",\n        \"type\": \"BUILTIN\",\n        \"values\": [\n            {\n                \"code\": \"000\",\n                \"label\": \"AURILLAC\"\n            },\n            {\n                \"code\": \"603\",\n                \"label\": \"CAMIEG\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CANSSM\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CAVIMAC\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Guadeloupe\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Guyane\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Martinique\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Réunion\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CNMSS personnel CNMSS\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ain\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aisne\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Allier\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Alpes-Maritimes\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ardennes\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ardèche\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ariège\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aube\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aude\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aveyron\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Bas-Rhin\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Bouches-du-Rhône\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Calvados\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Cantal\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Charente\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Charente-Maritime\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Cher\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Corrèze\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Corse-du-Sud\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Creuse\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Côte d'Or\"\n            }\n        ]\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Ajouter un régime obligatoire",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"//get ID\r",
											"pm.collectionVariables.set(\"mandatoryPlansId\", jsonData.data.identification);\r",
											"\r",
											"//Testing if jsonData is an object\r",
											"pm.test(\"identification is 1800144109133\", () => {\r",
											"    pm.expect(jsonData.data.identification).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"//Testing if jsonData is an object\r",
											"pm.test(\"key is 88\", () => {\r",
											"    pm.expect(jsonData.data.key).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"//Testing if jsonData is an object\r",
											"pm.test(\"systemCode is 01\", () => {\r",
											"    pm.expect(jsonData.data.systemCode).to.be.a(\"string\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//NIR generator\r",
											"pm.collectionVariables.set(\"Sexe\", _.random(1, 2));\r",
											"pm.collectionVariables.set(\"AnneeNaissance\", _.random(10, 99));\r",
											"pm.collectionVariables.set(\"MoisNaissance\", \"0\" + _.random(1, 9));\r",
											"pm.collectionVariables.set(\"DepartementNaissance\", _.random(10, 80));\r",
											"pm.collectionVariables.set(\"InseeCommune\", _.random(100, 800));\r",
											"pm.collectionVariables.set(\"NumeroOrdre\", _.random(100, 999));\r",
											"\r",
											"pm.collectionVariables.set(\"nir\",pm.collectionVariables.get(\"Sexe\")+\"\"+pm.collectionVariables.get(\"AnneeNaissance\")+pm.collectionVariables.get(\"MoisNaissance\")+pm.collectionVariables.get(\"DepartementNaissance\")+pm.collectionVariables.get(\"InseeCommune\")+pm.collectionVariables.get(\"NumeroOrdre\"));\r",
											"var cleNir = 97 - (pm.collectionVariables.get(\"nir\") %97);\r",
											"if (cleNir < 10){\r",
											"    cleNir == 0 + \"\"+ cleNir;\r",
											"}\r",
											"pm.collectionVariables.set(\"cleNir\", cleNir);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"activateNOEMIE\": true,\r\n    \"alsaceMoselle\": false,\r\n    \"birthDate\": \"{{35YearsAgo}}\",\r\n    \"effectiveDate\": \"{{5MonthsAgo}}\",\r\n    \"identification\": \"{{nir}}\",\r\n    \"identificationKey\": \"{{cleNir}}\",\r\n    \"key\": \"{{cleNir}}\",\r\n    \"number\": \"{{nir}}\",\r\n    \"centerCode\": \"000\",\r\n    \"organizationCode\": \"011\",\r\n    \"systemCode\": \"{{codeRegimeGeneral}}\"\r\n}\r\n\r\n/*\r\n    \"centerCode\": \"{{codeCentreRO}}\",\r\n    \"organizationCode\": \"{{codeCaisseRO}}\",\r\n    */",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/persons/:id/mandatoryPlans",
									"host": [
										"{{url}}"
									],
									"path": [
										"persons",
										":id",
										"mandatoryPlans"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personId}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "201 ok",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"activateNOEMIE\": true,\r\n    \"alsaceMoselle\": false,\r\n    \"birthDate\": \"{{35YearsAgo}}\",\r\n    \"effectiveDate\": \"{{5MonthsAgo}}\",\r\n    \"identification\": \"{{nir}}\",\r\n    \"identificationKey\": \"{{cleNir}}\",\r\n    \"key\": \"{{cleNir}}\",\r\n    \"number\": \"{{nir}}\",\r\n    \"centerCode\": \"000\",\r\n    \"organizationCode\": \"011\",\r\n    \"systemCode\": \"{{codeRegimeGeneral}}\"\r\n}\r\n\r\n/*\r\n    \"centerCode\": \"{{codeCentreRO}}\",\r\n    \"organizationCode\": \"{{codeCaisseRO}}\",\r\n    */",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/persons/:id/mandatoryPlans",
											"host": [
												"{{url}}"
											],
											"path": [
												"persons",
												":id",
												"mandatoryPlans"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{personId}}"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Language",
											"value": "fr-FR"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 19 Jun 2023 08:59:59 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 201,\n    \"data\": {\n        \"activateNOEMIE\": true,\n        \"alsaceMoselle\": false,\n        \"centerCode\": \"000\",\n        \"centerLabel\": \"CPAM Ain\",\n        \"effectiveDate\": \"2023-01-19\",\n        \"id\": \"20013375\",\n        \"identification\": \"2860515316743\",\n        \"identificationKey\": \"76\",\n        \"key\": \"76\",\n        \"number\": \"2860515316743\",\n        \"organizationCode\": \"011\",\n        \"organizationLabel\": \"CPAM Ain\",\n        \"personId\": \"20154146\",\n        \"systemCode\": \"01\",\n        \"systemLabel\": \"REGIME GENERAL\"\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Ajouter un RIB à une personne physique",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"window = {};\r",
											"\r",
											"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
											"\r",
											"window.faker.locale = \"fr\";\r",
											"\r",
											"pm.collectionVariables.set('companyAdrZipCode', window.faker.address.zipCode());\r",
											"pm.collectionVariables.set('companyAdrCity', window.faker.address.city());\r",
											"pm.collectionVariables.set('companyAdrStreet', window.faker.address.streetName());\r",
											"\r",
											"\r",
											"pm.collectionVariables.set('companyAdressNumber', _.random(1, 10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201){\r",
											"    //getJson data\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //Content type is json\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    });\r",
											"\r",
											"    //Body of response is present by testing length of response\r",
											"    pm.test(\"Body is present\", () => {\r",
											"        jsonData.length > 1;\r",
											"    });\r",
											"\r",
											"    //Testing if jsonData is an object\r",
											"    pm.test(\"Test jsonData content\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"    });\r",
											"\r",
											"    //testing bank information\r",
											"    pm.test(\"bank name is correct\", () => {\r",
											"        pm.expect(jsonData.data.bank).to.eql(\"Credit agricole\");\r",
											"    });\r",
											"\r",
											"    //testing iban information\r",
											"    pm.test(\"iban is correct\", () => {\r",
											"        pm.expect(jsonData.data.iban).to.eql(\"FR2012739000501327895759P67\");\r",
											"    });\r",
											"\r",
											"    pm.collectionVariables.set(\"personBankDetailsID\", jsonData.data.id)\r",
											"\r",
											"\r",
											"} else {\r",
											"    //status code is not 201\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"iban\": \"FR2012739000501327895759P67\",\r\n    \"bic\": \"AGRIFRPP\",\r\n    \"bank\": \"Credit agricole\",\r\n    \"bankAddress1\": \"14 {{companyAdrStreet}}\",\r\n    \"bankAddress2\": \"Second RIB\",\r\n    \"zipCode\": \"{{companyAdrZipCode}}\",\r\n    \"city\": \"{{companyAdrCity}}\",\r\n    \"activeUses\": [\r\n        {\r\n            \"code\": \"P\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/persons/:id/bankDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"persons",
										":id",
										"bankDetails"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personId}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Ajouter un RIB à une personne physique",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"iban\": \"FR2012739000501327895759P67\",\r\n    \"bic\": \"{{$randomBankAccountBic}}\",\r\n    \"bank\": \"Credit agricole\",\r\n    \"bankAddress1\": \"14 {{companyAdrStreet}}\",\r\n    \"bankAddress2\": \"Second RIB\",\r\n    \"zipCode\": \"{{companyAdrZipCode}}\",\r\n    \"city\": \"{{companyAdrCity}}\",\r\n    \"countryCode\": \"FR\",\r\n    \"activeUses\": [\"AU\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/persons/:id/bankDetails",
											"host": [
												"{{url}}"
											],
											"path": [
												"persons",
												":id",
												"bankDetails"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{personID}}"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Wed, 26 Jan 2022 15:06:17 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 201,\n    \"data\": {\n        \"activeUses\": [\n            \"AU\"\n        ],\n        \"bank\": \"Credit agricole\",\n        \"bankAddress1\": \"14 725 Rue Baraban\",\n        \"bankAddress2\": \"Second RIB\",\n        \"bic\": \"HGMOSIQ1\",\n        \"city\": \"Nanterre\",\n        \"countryCode\": \"FR\",\n        \"creationDate\": \"2022-01-26T16:06:17+01:00\",\n        \"iban\": \"FR2012739000501327895759P67\",\n        \"id\": \"20000237\",\n        \"zipCode\": \"67271\"\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Ajouter une adresse à une personne physique",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"window = {};\r",
											"\r",
											"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
											"\r",
											"window.faker.locale = \"fr\";\r",
											"\r",
											"pm.collectionVariables.set('customerAdrZipCode', window.faker.address.zipCode());\r",
											"pm.collectionVariables.set('customerAdrCity', window.faker.address.city());\r",
											"pm.collectionVariables.set('customerAdressStreetName', window.faker.address.streetName());\r",
											"\r",
											"\r",
											"pm.collectionVariables.set('customerAdressNumber', _.random(1, 10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201){\r",
											"    //getJson data\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //Content type is json\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    });\r",
											"\r",
											"    //Body of response is present by testing length of response\r",
											"    pm.test(\"Body is present\", () => {\r",
											"        jsonData.length > 1;\r",
											"    });\r",
											"\r",
											"    //Testing if jsonData is an object\r",
											"    pm.test(\"Test jsonData content\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"    });\r",
											"\r",
											"    //testing bank information\r",
											"    pm.test(\"city is correct\", () => {\r",
											"        pm.expect(jsonData.data.city).to.be.a(\"string\");\r",
											"    });\r",
											"\r",
											"    //testing iban information\r",
											"    pm.test(\"street is correct\", () => {\r",
											"        pm.expect(jsonData.data.line3).to.be.a(\"string\");\r",
											"    });\r",
											"\r",
											"} else {\r",
											"    //status code is not 201\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json;charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"city\": \"{{customerAdrCity}}\",\r\n    \"countryCode\": \"FR\",\r\n    \"line2\": \"{{customerAdressNumber}}\",\r\n    \"line3\": \"{{customerAdressStreetName}}\",\r\n    \"mainAddress\": true,\r\n    \"zipCode\": \"{{customerAdrZipCode}}\",\r\n    \"activeUses\": [\r\n        {\r\n            \"code\": \"P\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/persons/:id/addresses",
									"host": [
										"{{url}}"
									],
									"path": [
										"persons",
										":id",
										"addresses"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personId}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "201 ok",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json;charset=UTF-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"city\": \"{{customerAdrCity}}\",\r\n    \"countryCode\": \"FR\",\r\n    \"line2\": \"{{customerAdressNumber}}\",\r\n    \"line3\": \"{{customerAdressStreetName}}\",\r\n    \"mainAddress\": true,\r\n    \"zipCode\": \"{{customerAdrZipCode}}\",\r\n    \"activeUses\": [\r\n        {\r\n            \"code\": \"P\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/persons/:id/addresses",
											"host": [
												"{{url}}"
											],
											"path": [
												"persons",
												":id",
												"addresses"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{personId}}"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Content-Language",
											"value": "fr-FR"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Mon, 19 Jun 2023 09:00:55 GMT"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 201,\n    \"data\": {\n        \"activeUses\": [\n            {\n                \"code\": \"P\",\n                \"id\": \"20110529\",\n                \"label\": \"Principale\",\n                \"startDate\": \"2023-06-19\"\n            }\n        ],\n        \"city\": \"West Juliettehaven\",\n        \"countryCode\": \"FR\",\n        \"countryName\": \"FRANCE\",\n        \"creationDate\": \"2023-06-19T11:00:54+02:00\",\n        \"id\": \"20116450\",\n        \"latitude\": 46.227638,\n        \"line2\": \"5\",\n        \"line3\": \"Valentin de la Paix\",\n        \"longitude\": 2.213749,\n        \"mainAddress\": true,\n        \"resume\": \" 5 Valentin de la Paix, 90066 West Juliettehaven, FRANCE\",\n        \"zipCode\": \"90066\"\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Lancer batch SOCLE_ATTESTATIONS_AGENDA_VIAMEDIS",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [1000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [6000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"SOCLE_ATTESTATIONS_AGENDA_VIAMEDIS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/batch/start",
									"host": [
										"{{url}}"
									],
									"path": [
										"batch",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Lancer batch SOCLE_CARTE_VIAMEDIS",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [1000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [6000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"SOCLE_CARTE_VIAMEDIS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/batch/start",
									"host": [
										"{{url}}"
									],
									"path": [
										"batch",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Rechercher les droits carte tp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [12000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/health/cards/rights?mandatoryPlanNumber={{mandatoryPlansId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"cards",
										"rights"
									],
									"query": [
										{
											"key": "mandatoryPlanNumber",
											"value": "{{mandatoryPlansId}}"
										},
										{
											"key": "date",
											"value": "{{2MonthsAgo}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Recherche assuré",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let assures = jsonData.data;\r",
											"\r",
											"let assureSelectionne = assures[_.random(0, assures.length-1)];\r",
											"console.log(\"Assure selectionné\",assureSelectionne );\r",
											"\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"insuredIdForDentalProsthesisQuote\", assureSelectionne.insuredId);\r",
											"if(assureSelectionne.person.familyName!=null){\r",
											"    pm.collectionVariables.set(\"insuredFamilyNameForDentalProsthesisQuote\", assureSelectionne.person.familyName);\r",
											"}\r",
											"pm.collectionVariables.set(\"insuredFirstNameForDentalProsthesisQuote\", assureSelectionne.person.firstName);\r",
											"pm.collectionVariables.set(\"insuredBirthDateForDentalProsthesisQuote\", assureSelectionne.person.birthDate);\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"insuredNameForDentalProsthesisQuote\", assureSelectionne.insuredName);\r",
											"pm.collectionVariables.set(\"insuredNumberForDentalProsthesisQuote\", assureSelectionne.insuredNumber);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/health/affiliates?contractNumber={{contractNumberPSCS1}}&status=IN_PROGRESS&insuredName={{insuredName}}&effectiveDateMin={{3MonthsAgo}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"affiliates"
									],
									"query": [
										{
											"key": "contractNumber",
											"value": "{{contractNumberPSCS1}}"
										},
										{
											"key": "limit",
											"value": "30",
											"disabled": true
										},
										{
											"key": "productCode",
											"value": "PSCS1",
											"disabled": true
										},
										{
											"key": "status",
											"value": "IN_PROGRESS"
										},
										{
											"key": "id",
											"value": "{{insuredId}}",
											"disabled": true
										},
										{
											"key": "insuredName",
											"value": "{{insuredName}}"
										},
										{
											"key": "effectiveDateMin",
											"value": "{{2MonthsAgo}}",
											"disabled": true
										},
										{
											"key": "effectiveDateMin",
											"value": "{{3MonthsAgo}}"
										},
										{
											"key": "effectiveDateMin",
											"value": "{{4MonthsAgo}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Liste des codes actes RC",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"actCodeMetalDentalProsthesis\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"pm.collectionVariables.set(\"actLabelMetalDentalProsthesis\", codes[_.random(0, codes.length-1)].label);\r",
									"\r",
									"console.log(\"Code acte RC prothèse dentaire choisi : \" + pm.collectionVariables.get(\"actCodeMetalDentalProsthesis\") + \" (\" +  pm.collectionVariables.get(\"actLabelMetalDentalProsthesis\") + \")\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=PFM",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "PFM"
								},
								{
									"key": "code",
									"value": "DC",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "SUPPLEMANTARY_PLAN_ACTS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Créer un devis prothèse dentaire",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"console.log(\"URL pour consulter l'objet créé dans CLEVA Web :\")\r",
									"console.log(pm.environment.get(\"clevaWebUrl\")+ \"sinistre/sante/sousDossier/\" +jsonData.data.id +\"/consultation\");\r",
									"\r",
									"let lignesSaisies = jsonData.data.countLines;\r",
									"let lignesGenerees = jsonData.data.detailsLines;\r",
									"\r",
									"\r",
									"//Identifiant du decompte\r",
									"pm.collectionVariables.set(\"dentalProsthesisQuoteId\", pm.response.json().data.id);\r",
									"\r",
									"//Ligne decompte saisie\r",
									"pm.collectionVariables.set(\"dentalProsthesisQuoteEnteredStatementLines\", lignesSaisies[_.random(0, lignesSaisies.length-1)]);\r",
									"\r",
									"//Ligne decompte generee\r",
									"pm.collectionVariables.set(\"dentalProsthesisQuoteGeneratedStatementLines\", lignesGenerees[_.random(0, lignesGenerees.length-1)]);\r",
									"\r",
									"//Numéro de facture\r",
									"pm.collectionVariables.set('dentalProsthesisQuoteInvoiceStatement', pm.response.json().data.invoiceNumber);\r",
									"\r",
									"pm.test(\"Check health professional Id\", function () {\r",
									"    pm.expect(jsonData.data.healthProfessionalId).to.eql(pm.collectionVariables.get(\"dentisteId\").toString()); \r",
									"});\r",
									"\r",
									"pm.test(\"Check health insured Id\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"dentalProsthesisQuoteGeneratedStatementLines\").insuredId).to.eql(pm.collectionVariables.get(\"insuredIdForDentalProsthesisQuote\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check invoice number\", function () {\r",
									"    pm.expect(jsonData.data.invoiceNumber).to.eql(pm.collectionVariables.get(\"dentalProsthesisQuoteInvoiceStatement\")); \r",
									"});\r",
									"\r",
									"//Le type doit être statement\r",
									"pm.test(\"Count type should be QUOTE\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"dentalProsthesisQuoteEnteredStatementLines\").countType).to.eql('QUOTE');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Insured name is \" + pm.collectionVariables.get(\"insuredNameForDentalProsthesisQuote\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"dentalProsthesisQuoteGeneratedStatementLines\").insuredName).to.eql(pm.collectionVariables.get(\"insuredNameForDentalProsthesisQuote\"));\r",
									"});\r",
									"\r",
									"// Une ligne de decompte doit être générée\r",
									"pm.test(\"One computed line generated\", function () {\r",
									"    pm.expect(lignesGenerees.length).to.eql(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act code is \" + pm.collectionVariables.get(\"actCodeMetalDentalProsthesis\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"dentalProsthesisQuoteEnteredStatementLines\").supplementaryPlanActCode).to.eql(pm.collectionVariables.get(\"actCodeMetalDentalProsthesis\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act label is \" + pm.collectionVariables.get(\"actLabelMetalDentalProsthesis\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"dentalProsthesisQuoteEnteredStatementLines\").supplementaryPlanActLabel).to.eql(pm.collectionVariables.get(\"actLabelMetalDentalProsthesis\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"pm.collectionVariables.set('invoiceNumberDentalQuote', '{{$timestamp}}');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"subRecordComment\": \"{{$randomPhrase}}\",\r\n    \"summary\": \"{{$randomPhrase}}\",\r\n    \"insuredId\": \"{{insuredIdForDentalProsthesisQuote}}\",\r\n    \"countType\": \"QUOTE\",\r\n    \"invoiceNumber\": \"{{invoiceNumberDentalQuote}}\",\r\n    \"currencyCode\": \"{{euro}}\",\r\n    \"receptionDate\": \"{{currentDate}}\",\r\n    \"healthProfessionalId\": \"{{dentisteId}}\",\r\n    \"countLines\": [\r\n        {\r\n            \"supplementaryPlanActCode\": \"{{actCodeMetalDentalProsthesis}}\",\r\n            \"startDateOfTreatments\": \"{{currentDate}}\",\r\n            \"actualCostsAmount\": \"500\",\r\n            \"mandatoryPlanBaseAmount\": 150,\r\n            \"quantity\": \"1\",\r\n            \"dental\": {\r\n                \"isDental\": true,\r\n                \"location12\": \"15\",\r\n                \"location13\": \"17\"\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/health/statements",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements"
							]
						}
					},
					"response": []
				},
				{
					"name": "Charger la prestation créée",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"console.log(\"URL pour consulter l'objet créé dans CLEVA Web :\")\r",
									"console.log(pm.environment.get(\"clevaWebUrl\")+ \"sinistre/sante/sousDossier/\" +jsonData.data.id +\"/consultation\");\r",
									"\r",
									"let lignesSaisies = jsonData.data.countLines;\r",
									"let lignesGenerees = jsonData.data.detailsLines;\r",
									"\r",
									"\r",
									"//Identifiant du decompte\r",
									"pm.collectionVariables.set(\"dentalProsthesisQuoteId\", pm.response.json().data.id);\r",
									"\r",
									"//Ligne decompte saisie\r",
									"pm.collectionVariables.set(\"dentalProsthesisQuoteEnteredStatementLines\", lignesSaisies[_.random(0, lignesSaisies.length-1)]);\r",
									"\r",
									"//Ligne decompte generee\r",
									"pm.collectionVariables.set(\"dentalProsthesisQuoteGeneratedStatementLines\", lignesGenerees[_.random(0, lignesGenerees.length-1)]);\r",
									"\r",
									"//Numéro de facture\r",
									"pm.collectionVariables.set('dentalProsthesisQuoteInvoiceStatement', pm.response.json().data.invoiceNumber);\r",
									"\r",
									"pm.test(\"Check health professional Id\", function () {\r",
									"    pm.expect(jsonData.data.healthProfessionalId).to.eql(pm.collectionVariables.get(\"dentisteId\").toString()); \r",
									"});\r",
									"\r",
									"pm.test(\"Check health insured Id\", function () {\r",
									"    pm.expect(jsonData.data.insuredId).to.eql(pm.collectionVariables.get(\"insuredIdForDentalProsthesisQuote\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check invoice number\", function () {\r",
									"    pm.expect(jsonData.data.invoiceNumber).to.eql(pm.collectionVariables.get(\"dentalProsthesisQuoteInvoiceStatement\")); \r",
									"});\r",
									"\r",
									"//Le type doit être statement\r",
									"pm.test(\"Count type should be QUOTE\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"dentalProsthesisQuoteEnteredStatementLines\").countType).to.eql('QUOTE');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Insured name is \" + pm.collectionVariables.get(\"insuredNameForDentalProsthesisQuote\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"dentalProsthesisQuoteGeneratedStatementLines\").insuredName).to.eql(pm.collectionVariables.get(\"insuredNameForDentalProsthesisQuote\"));\r",
									"});\r",
									"\r",
									"// Une ligne de decompte doit être générée\r",
									"pm.test(\"One computed line generated\", function () {\r",
									"    pm.expect(lignesGenerees.length).to.eql(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act code is \" + pm.collectionVariables.get(\"actCodeMetalDentalProsthesis\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"dentalProsthesisQuoteEnteredStatementLines\").supplementaryPlanActCode).to.eql(pm.collectionVariables.get(\"actCodeMetalDentalProsthesis\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act label is \" + pm.collectionVariables.get(\"actLabelMetalDentalProsthesis\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"dentalProsthesisQuoteEnteredStatementLines\").supplementaryPlanActLabel).to.eql(pm.collectionVariables.get(\"actLabelMetalDentalProsthesis\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"pm.collectionVariables.set('invoiceNumberDevisDentaire', '{{$timestamp}}');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/statements/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{dentalProsthesisQuoteId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Rechercher les lignes de prestations du devis dentaire",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let resultats = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedDentalProsthesisQuote\", resultats[_.random(0, resultats.length-1)]);\r",
									"\r",
									"\r",
									"//Le type doit être statement\r",
									"pm.test(\"Count type should be QUOTE\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"searchedDentalProsthesisQuote\").countType).to.eql('QUOTE');\r",
									"});\r",
									"\r",
									"pm.test(\"Supplemantaty plan act code is \" + pm.collectionVariables.get(\"actCodeMetalDentalProsthesis\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"searchedDentalProsthesisQuote\").supplementaryPlanActCode).to.eql(pm.collectionVariables.get(\"actCodeMetalDentalProsthesis\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Supplemantaty plan act label is \" + pm.collectionVariables.get(\"actLabelMetalDentalProsthesis\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"searchedDentalProsthesisQuote\").supplementaryPlanActLabel).to.eql(pm.collectionVariables.get(\"actLabelMetalDentalProsthesis\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/statements/lines?invoiceNumber={{dentalProsthesisQuoteInvoiceStatement}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								"lines"
							],
							"query": [
								{
									"key": "invoiceNumber",
									"value": "{{dentalProsthesisQuoteInvoiceStatement}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Prise en charge dentaire",
			"item": [
				{
					"name": "Connexion Cleva",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"token\", pm.response.text());",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"console.log(pm.response.text());",
									"",
									"//En attendant d'avoir l'API sur le professionnel de santé je le mock ici",
									"pm.collectionVariables.set(\"healthProfessionalId\", 1000010);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"pm.collectionVariables.set(\"dateDuJour\", moment().format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateDuJour_Plus_1_Mois\", moment().add(30, 'days').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateDuJour_Plus_6_Mois\", moment().add(180, 'days').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateDuJour_Moins_1_Mois\", moment().add(-30, 'days').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateDuJour_Moins_6_Mois\", moment().add(-180, 'days').format(\"YYYY-MM-DD\"));\r",
									"\r",
									"//Date de naissances\r",
									"pm.collectionVariables.set(\"dateNaissance10Ans\", moment().add(-10, 'years').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateNaissance20Ans\", moment().add(-20, 'years').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateNaissance30Ans\", moment().add(-30, 'years').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateNaissance40Ans\", moment().add(-40, 'years').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateNaissance50Ans\", moment().add(-50, 'years').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateNaissance60Ans\", moment().add(-60, 'years').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateNaissance70Ans\", moment().add(-70, 'years').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateNaissance80Ans\", moment().add(-80, 'years').format(\"YYYY-MM-DD\"));\r",
									"\r",
									"pm.collectionVariables.set(\"dateDuJourFormatRecherche\", moment().format(\"YYYY/MM/DD\"));\r",
									"\r",
									"console.info(pm.collectionVariables.get('folderName') + \" --> \" + this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "AALR",
									"type": "string"
								},
								{
									"key": "username",
									"value": "ALR",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"{{login}}\",\n    \"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/me/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"me",
								"login"
							]
						},
						"description": "Chargement d'une tâche"
					},
					"response": []
				},
				{
					"name": "Recherche assuré",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let assures = jsonData.data;\r",
									"\r",
									"let assureSelectionne = assures[_.random(0, assures.length-1)];\r",
									"console.log(\"Assure selectionné\",assureSelectionne );\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"insuredIdForStatement\", assureSelectionne.insuredId);\r",
									"pm.collectionVariables.set(\"insuredFamilyNameForStatementGeneralPractitioner\", assureSelectionne.person.familyName);\r",
									"pm.collectionVariables.set(\"insuredFirstNameForStatementGeneralPractitioner\", assureSelectionne.person.firstName);\r",
									"pm.collectionVariables.set(\"insuredBirthDateForStatementGeneralPractitioner\", assureSelectionne.person.birthDate);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"insuredNameForStatementGeneralPractitioner\", assureSelectionne.insuredName);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/affiliates?status=IN_PROGRESS&contractNumber={{contractNumberPSCS1}}&limit=50",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"affiliates"
							],
							"query": [
								{
									"key": "status",
									"value": "IN_PROGRESS"
								},
								{
									"key": "contractNumber",
									"value": "{{contractNumberPSCS1}}"
								},
								{
									"key": "effectiveDateMin",
									"value": "{{1MonthAgo}}",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Code acte Anesthesie dentaire",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"RCActCodeDentalAnesthesia\", codes[_.random(0, codes.length-1)].code);\r",
									"pm.collectionVariables.set(\"RCActCLabelDentalAnesthesia\", codes[_.random(0, codes.length-1)].label);\r",
									"\r",
									"console.log(jsonData);\r",
									"\r",
									"\r",
									"console.log(\"Code acte RC anesthésie dentaire choisi : \" + pm.collectionVariables.get(\"RCActCodeDentalAnesthesia\") + \" (\" +  pm.collectionVariables.get(\"RCActCLabelDentalAnesthesia\") + \")\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=ADA_D",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "ADA_D"
								},
								{
									"key": "code",
									"value": "DC",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "SUPPLEMANTARY_PLAN_ACTS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Code acte chirurgie dentaire",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"RCActCodeDentalSurgery\", codes[_.random(0, codes.length-1)].code);\r",
									"pm.collectionVariables.set(\"RCActCLabelDentalSurgery\", codes[_.random(0, codes.length-1)].label);\r",
									"\r",
									"console.log(\"Code acte RC chirurgie dentaire choisi : \" + pm.collectionVariables.get(\"RCActCodeDentalSurgery\") + \" (\" +  pm.collectionVariables.get(\"RCActCLabelDentalSurgery\") + \")\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=ADC_D",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "ADC_D"
								},
								{
									"key": "code",
									"value": "DC",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "SUPPLEMANTARY_PLAN_ACTS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Créer un devis chirurgie dentaire",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"surgeryQuoteId\", pm.response.json().data.id);\r",
									"\r",
									"console.log(\"URL pour consulter l'objet créé dans CLEVA Web :\")\r",
									"console.log(pm.environment.get(\"clevaWebUrl\")+ \"sinistre/sante/sousDossier/\" +jsonData.data.id +\"/consultation\");\r",
									"\r",
									"\r",
									"//Numéro de facture\r",
									"pm.collectionVariables.set('dentalSurgeryQuoteInvoice', jsonData.data.countLines[_.random(0, jsonData.data.countLines.length-1)].invoiceNumber);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"pm.collectionVariables.set('invoiceNumberDentalQuote', '{{$timestamp}}');\r",
									"\r",
									"pm.collectionVariables.set(\"externalReference\", \"REF-\"+_.random(11, 99))\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"subRecordComment\": \"Devis de chirurgie dentaire par API REST\",\r\n    \"summary\": \"Devis de chirurgie dentaire par API REST\",\r\n    \"insuredId\": \"{{insuredIdForStatement}}\",\r\n    \"countType\": \"QUOTE\",\r\n    \"invoiceNumber\": \"{{$randomInt}}{{$randomInt}}{{$randomInt}}\",\r\n    \"currencyCode\": \"EUR\",\r\n    \"startDate\": \"{{currentDate}}\",\r\n    \"countLines\": [\r\n        {\r\n            \"supplementaryPlanActCode\": \"{{RCActCodeDentalSurgery}}\",\r\n            \"startDateOfTreatments\": \"{{currentDate}}\",\r\n            \"actualCostsAmount\": 500,\r\n            \"quantity\": 1,\r\n            \"saleLimitPrice\": 1000\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/health/statements",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements"
							]
						}
					},
					"response": []
				},
				{
					"name": "Rechercher les lignes de prestations du devis dentaire",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/statements/lines?invoiceNumber={{dentalSurgeryQuoteInvoice}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								"lines"
							],
							"query": [
								{
									"key": "invoiceNumber",
									"value": "{{dentalSurgeryQuoteInvoice}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Consulter le devis de chirurgie dentaire",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/health/statements/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{surgeryQuoteId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mettre à jour la ref externe du devis dentaire",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"externalReference\", \"REF-\"+_.random(11, 99)+_.random(11, 99))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"externalReference\", jsonData.data.externalReference)\r",
									"\r",
									"//Check external reference\r",
									"pm.test(\"external reference is \" + pm.collectionVariables.get(\"externalReference\"), function () {\r",
									"        pm.expect(jsonData.data.externalReference).to.eql(pm.collectionVariables.get(\"externalReference\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"externalReference\":\"{{$randomInt}}{{$randomInt}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/health/statements/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{surgeryQuoteId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Annuler la prise en charge",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"//Check statement comment\r",
									"pm.test(\"statement comment is Essai avec reference externe\", function () {\r",
									"    pm.expect(jsonData.data[_.random(0, data.length-1)].subRecordComment).to.eql(\"Essai avec reference externe\");\r",
									"});\r",
									"\r",
									"//Check statement comment\r",
									"pm.test(\"statement status is ANNULE\", function () {\r",
									"    pm.expect(jsonData.data[_.random(0, data.length-1)].countLines[_.random(0, data.length-1)].statusGrouping).to.eql(\"ANNULE\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"comments\": \"Essai avec reference externe\",\r\n    \"reason\": \"End of the purpose\",\r\n    \"status\": \"AN\",\r\n    \"summary\": \"Essai avec reference externe\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/health/statements/externalReference:{{externalReference}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								"externalReference:{{externalReference}}",
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Devis prothèse dentaire métallique avec code RO",
			"item": [
				{
					"name": "Connexion Cleva",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"token\", pm.response.text());",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"console.log(pm.response.text());",
									"",
									"//En attendant d'avoir l'API sur le professionnel de santé je le mock ici",
									"pm.collectionVariables.set(\"healthProfessionalId\", 1000010);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"pm.collectionVariables.set(\"dateDuJour\", moment().format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateDuJour_Plus_1_Mois\", moment().add(30, 'days').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateDuJour_Plus_6_Mois\", moment().add(180, 'days').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateDuJour_Moins_1_Mois\", moment().add(-30, 'days').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateDuJour_Moins_6_Mois\", moment().add(-180, 'days').format(\"YYYY-MM-DD\"));\r",
									"\r",
									"//Date de naissances\r",
									"pm.collectionVariables.set(\"dateNaissance10Ans\", moment().add(-10, 'years').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateNaissance20Ans\", moment().add(-20, 'years').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateNaissance30Ans\", moment().add(-30, 'years').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateNaissance40Ans\", moment().add(-40, 'years').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateNaissance50Ans\", moment().add(-50, 'years').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateNaissance60Ans\", moment().add(-60, 'years').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateNaissance70Ans\", moment().add(-70, 'years').format(\"YYYY-MM-DD\"));\r",
									"pm.collectionVariables.set(\"dateNaissance80Ans\", moment().add(-80, 'years').format(\"YYYY-MM-DD\"));\r",
									"\r",
									"pm.collectionVariables.set(\"dateDuJourFormatRecherche\", moment().format(\"YYYY/MM/DD\"));\r",
									"\r",
									"console.info(pm.collectionVariables.get('folderName') + \" --> \" + this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "AALR",
									"type": "string"
								},
								{
									"key": "username",
									"value": "ALR",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"{{login}}\",\n    \"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/me/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"me",
								"login"
							]
						},
						"description": "Chargement d'une tâche"
					},
					"response": []
				},
				{
					"name": "Recherche assuré",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let assures = jsonData.data;\r",
									"\r",
									"let assureSelectionne = assures[_.random(0, assures.length-1)];\r",
									"console.log(\"Assure selectionné\",assureSelectionne );\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"insuredIdForDentalProsthesisQuote\", assureSelectionne.insuredId);\r",
									"pm.collectionVariables.set(\"insuredFamilyNameForDentalProsthesisQuote\", assureSelectionne.person.familyName);\r",
									"pm.collectionVariables.set(\"insuredFirstNameForDentalProsthesisQuote\", assureSelectionne.person.firstName);\r",
									"pm.collectionVariables.set(\"insuredBirthDateForDentalProsthesisQuote\", assureSelectionne.person.birthDate);\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"insuredNameForDentalProsthesisQuote\", assureSelectionne.insuredName);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/affiliates?status=IN_PROGRESS&contractNumber={{contractNumberPSCS1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"affiliates"
							],
							"query": [
								{
									"key": "status",
									"value": "IN_PROGRESS"
								},
								{
									"key": "contractNumber",
									"value": "PSCS1_C_01396",
									"disabled": true
								},
								{
									"key": "productCode",
									"value": "PSCS1",
									"disabled": true
								},
								{
									"key": "productCode",
									"value": "{{contractNumberPSCS1}}",
									"disabled": true
								},
								{
									"key": "contractNumber",
									"value": "{{contractNumberPSCS1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Liste des codes actes RO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"ROactCodeMetalDentalProsthesis\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"pm.collectionVariables.set(\"ROactLabelMetalDentalProsthesis\", codes[_.random(0, codes.length-1)].label);\r",
									"\r",
									"console.log(\"Code acte RC prothèse dentaire choisi : \" + pm.collectionVariables.get(\"ROactCodeMetalDentalProsthesis\") + \" (\" +  pm.collectionVariables.get(\"ROactLabelMetalDentalProsthesis\") + \")\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=PFM",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "PFM"
								},
								{
									"key": "code",
									"value": "DC",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "500",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "MANDATORY_PLAN_ACTS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Créer un devis prothèse dentaire",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"console.log(\"URL pour consulter l'objet créé dans CLEVA Web :\")\r",
									"console.log(pm.environment.get(\"clevaWebUrl\")+ \"sinistre/sante/sousDossier/\" +jsonData.data.id +\"/consultation\");\r",
									"\r",
									"let lignesSaisies = jsonData.data.countLines;\r",
									"let lignesGenerees = jsonData.data.detailsLines;\r",
									"\r",
									"\r",
									"//Identifiant du decompte\r",
									"pm.collectionVariables.set(\"dentalProsthesisQuoteId\", pm.response.json().data.id);\r",
									"\r",
									"//Ligne decompte saisie\r",
									"pm.collectionVariables.set(\"dentalProsthesisQuoteEnteredStatementLines\", lignesSaisies[_.random(0, lignesSaisies.length-1)]);\r",
									"\r",
									"//Ligne decompte generee\r",
									"pm.collectionVariables.set(\"dentalProsthesisQuoteGeneratedStatementLines\", lignesGenerees[_.random(0, lignesGenerees.length-1)]);\r",
									"\r",
									"//Numéro de facture\r",
									"pm.collectionVariables.set('dentalProsthesisQuoteInvoiceStatement', pm.response.json().data.invoiceNumber);\r",
									"\r",
									"pm.test(\"Check health professional Id\", function () {\r",
									"    pm.expect(jsonData.data.healthProfessionalId).to.be.a(\"string\"); \r",
									"});\r",
									"\r",
									"pm.test(\"Check health insured Id\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"dentalProsthesisQuoteGeneratedStatementLines\").insuredId).to.eql(pm.collectionVariables.get(\"insuredIdForDentalProsthesisQuote\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check invoice number\", function () {\r",
									"    pm.expect(jsonData.data.invoiceNumber).to.eql(pm.collectionVariables.get(\"dentalProsthesisQuoteInvoiceStatement\")); \r",
									"});\r",
									"\r",
									"//Le type doit être statement\r",
									"pm.test(\"Count type should be QUOTE\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"dentalProsthesisQuoteEnteredStatementLines\").countType).to.eql('QUOTE');\r",
									"});\r",
									"\r",
									"pm.test(\"Insured name is \" + pm.collectionVariables.get(\"insuredNameForDentalProsthesisQuote\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"dentalProsthesisQuoteGeneratedStatementLines\").insuredName).to.eql(pm.collectionVariables.get(\"insuredNameForDentalProsthesisQuote\"));\r",
									"});\r",
									"\r",
									"// Une ligne de decompte doit être générée\r",
									"pm.test(\"One computed line generated\", function () {\r",
									"    pm.expect(lignesGenerees.length).to.eql(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act code is \" + pm.collectionVariables.get(\"actCodeMetalDentalProsthesis\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"dentalProsthesisQuoteEnteredStatementLines\").supplementaryPlanActCode).to.eql(pm.collectionVariables.get(\"actCodeMetalDentalProsthesis\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act label is \" + pm.collectionVariables.get(\"actLabelMetalDentalProsthesis\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"dentalProsthesisQuoteEnteredStatementLines\").supplementaryPlanActLabel).to.eql(pm.collectionVariables.get(\"actLabelMetalDentalProsthesis\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"pm.collectionVariables.set('invoiceNumberDevisDentaire', '{{$timestamp}}');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"subRecordComment\": \"{{$randomPhrase}}\",\r\n    \"summary\": \"{{$randomPhrase}}\",\r\n    \"insuredId\": \"{{insuredIdForDentalProsthesisQuote}}\",\r\n    \"countType\": \"QUOTE\",\r\n    \"invoiceNumber\": \"{{invoiceNumberDentalQuote}}\",\r\n    \"currencyCode\": \"{{euro}}\",\r\n    \"receptionDate\": \"{{currentDate}}\",\r\n    \"healthProfessionalId\": \"{{dentisteId}}\",\r\n    \"countLines\": [\r\n        {\r\n            \"mandatoryPlanActCode\": \"{{ROactCodeMetalDentalProsthesis}}\",\r\n            \"startDateOfTreatments\": \"{{currentDate}}\",\r\n            \"actualCostsAmount\": \"500\",\r\n            \"mandatoryPlanBaseAmount\": 150,\r\n            \"quantity\": \"1\",\r\n            \"dental\": {\r\n                \"isDental\": true,\r\n                \"location12\": \"15\",\r\n                \"location13\": \"17\"\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/health/statements",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements"
							]
						}
					},
					"response": []
				},
				{
					"name": "Charger la prestation créée",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"console.log(\"URL pour consulter l'objet créé dans CLEVA Web :\")\r",
									"console.log(pm.environment.get(\"clevaWebUrl\")+ \"sinistre/sante/sousDossier/\" +jsonData.data.id +\"/consultation\");\r",
									"\r",
									"let lignesSaisies = jsonData.data.countLines;\r",
									"let lignesGenerees = jsonData.data.detailsLines;\r",
									"\r",
									"\r",
									"//Identifiant du decompte\r",
									"pm.collectionVariables.set(\"dentalProsthesisQuoteId\", pm.response.json().data.id);\r",
									"\r",
									"//Ligne decompte saisie\r",
									"pm.collectionVariables.set(\"dentalProsthesisQuoteEnteredStatementLines\", lignesSaisies[_.random(0, lignesSaisies.length-1)]);\r",
									"\r",
									"//Ligne decompte generee\r",
									"pm.collectionVariables.set(\"dentalProsthesisQuoteGeneratedStatementLines\", lignesGenerees[_.random(0, lignesGenerees.length-1)]);\r",
									"\r",
									"//Numéro de facture\r",
									"pm.collectionVariables.set('dentalProsthesisQuoteInvoiceStatement', pm.response.json().data.invoiceNumber);\r",
									"\r",
									"pm.test(\"Check health professional Id\", function () {\r",
									"    pm.expect(jsonData.data.healthProfessionalId).to.be.a(\"string\"); \r",
									"});\r",
									"\r",
									"pm.test(\"Check health insured Id\", function () {\r",
									"    pm.expect(jsonData.data.insuredId).to.eql(pm.collectionVariables.get(\"insuredIdForDentalProsthesisQuote\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check invoice number\", function () {\r",
									"    pm.expect(jsonData.data.invoiceNumber).to.eql(pm.collectionVariables.get(\"dentalProsthesisQuoteInvoiceStatement\")); \r",
									"});\r",
									"\r",
									"//Le type doit être statement\r",
									"pm.test(\"Count type should be QUOTE\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"dentalProsthesisQuoteEnteredStatementLines\").countType).to.eql('QUOTE');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Insured name is \" + pm.collectionVariables.get(\"insuredNameForDentalProsthesisQuote\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"dentalProsthesisQuoteGeneratedStatementLines\").insuredName).to.eql(pm.collectionVariables.get(\"insuredNameForDentalProsthesisQuote\"));\r",
									"});\r",
									"\r",
									"// Une ligne de decompte doit être générée\r",
									"pm.test(\"One computed line generated\", function () {\r",
									"    pm.expect(lignesGenerees.length).to.eql(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act code is \" + pm.collectionVariables.get(\"actCodeMetalDentalProsthesis\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"dentalProsthesisQuoteEnteredStatementLines\").supplementaryPlanActCode).to.eql(pm.collectionVariables.get(\"actCodeMetalDentalProsthesis\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act label is \" + pm.collectionVariables.get(\"actLabelMetalDentalProsthesis\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"dentalProsthesisQuoteEnteredStatementLines\").supplementaryPlanActLabel).to.eql(pm.collectionVariables.get(\"actLabelMetalDentalProsthesis\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"pm.collectionVariables.set('invoiceNumberDevisDentaire', '{{$timestamp}}');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/statements/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{dentalProsthesisQuoteId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Rechercher les lignes de prestations du devis dentaire",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let resultats = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedDentalProsthesisQuote\", resultats[_.random(0, resultats.length-1)]);\r",
									"\r",
									"\r",
									"//Le type doit être statement\r",
									"pm.test(\"Count type should be QUOTE\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"searchedDentalProsthesisQuote\").countType).to.eql('QUOTE');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act code is \" + pm.collectionVariables.get(\"actCodeMetalDentalProsthesis\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"searchedDentalProsthesisQuote\").supplementaryPlanActCode).to.eql(pm.collectionVariables.get(\"actCodeMetalDentalProsthesis\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act label is \" + pm.collectionVariables.get(\"actLabelMetalDentalProsthesis\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"searchedDentalProsthesisQuote\").supplementaryPlanActLabel).to.eql(pm.collectionVariables.get(\"actLabelMetalDentalProsthesis\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/statements/lines?invoiceNumber={{dentalProsthesisQuoteInvoiceStatement}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								"lines"
							],
							"query": [
								{
									"key": "invoiceNumber",
									"value": "{{dentalProsthesisQuoteInvoiceStatement}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PEC chirurgie dentaire",
			"item": [
				{
					"name": "Prérequis",
					"item": [
						{
							"name": "Connexion Cleva",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"token\", pm.response.text());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "AALR",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ALR",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login}}\",\n    \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{url}}/me/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"me",
										"login"
									]
								},
								"description": "Chargement d'une tâche"
							},
							"response": []
						},
						{
							"name": "Créer devis base PSCS1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //get ID\r",
											"    pm.collectionVariables.set(\"policeIDPSCS1\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customerId\": \"{{enterpriseCustomerId}}\",\n    \"productCode\": \"PSCS1\",\n    \"hubId\":\"{{VIAMEDISId}}\",\n    \"description\": \"Santé précalculé : Produit collectif standard\",\n    \"status\": {\n        \"subcode\": \"01\",\n        \"effectiveDate\": \"{{2MonthsAgo}}\"\n\n    },\n    \"typology\": {\n        \"basic\": true,\n        \"basicType\": \"ENTERPRISE\"\n    },\n    \"jobClassCode\": \"ENSEMBLE\",\n    \"freeZones\": {\n        \"PPSPROD_PSCS1_ZL_SOCLE_NIV\": {\n            \"type\": \"STRING\",\n            \"value\": \"NIVEAU ESSENTIEL\"\n        },\n        \"PPSPROD_PSCS1_ZL_AGE_MOY_SAL\": {\n            \"type\": \"STRING\",\n            \"value\": \"50\"\n        },\n        \"PPSPROD_PSCS1_ZL_QUALITE_AUTORISEES_SOCLE\": {\n            \"type\": \"STRING\",\n            \"value\": \"A\"\n        },\n        \"PPSPROD_PSCS1_SI_RENFORT\": {\n            \"type\": \"BOOLEAN\",\n            \"value\": false\n        },\n        \"PPSPROD_PSCS1_ZL_DEPART_GEO\": {\n            \"type\": \"STRING\",\n            \"value\": \"69\"\n        },\n        \"PPSPROD_PSCS1_SI_EXTENSION\": {\n            \"type\": \"BOOLEAN\",\n            \"value\": false\n        },\n        \"PPSPROD_PSCS1_COTI_SOCLE\": {\n            \"type\": \"STRING\",\n            \"value\": \"PSCS1_ASS_SAL\"\n        }\n    },\n        \"payment\": {\n        \"periodicity\": \"ANNUAL\",\n        \"termPayer\": \"CUSTOMER\",\n        \"termPaymentCode\": \"PA\",\n        \"directDebitDay\": \"17\"\n    },\n    \"contributionBase\": {\n        \"code\": \"PSCS1_ASS_IF\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/health/collective/contracts",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"collective",
										"contracts"
									]
								},
								"description": "La méthode permet de créer un devis ou contrat collectif en santé ou prévoyance. La création nécessitera un code correspondant à un produit santé disponible. Vous pouvez récuperer la liste des produits disponible avec la ressource HelpList"
							},
							"response": []
						},
						{
							"name": "Définir les modèles de couverture et cotisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "ITN_ACTIVATE_SCENARIO",
										"type": "text",
										"value": "TRUE",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"defaultFormula\":\"PSCS1_F_BASE_ESSENTIEL\",\r\n    \"effectiveDate\":\"{{2MonthsAgo}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/health/collective/contracts/:id/coverageModels",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"collective",
										"contracts",
										":id",
										"coverageModels"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{policeIDPSCS1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Prérequis créer une autre affiliation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"window = {};\r",
											"\r",
											"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
											"\r",
											"window.faker.locale = \"fr\";\r",
											"\r",
											"pm.collectionVariables.set(\"personFamilyName\", window.faker.name.lastName().toUpperCase());\r",
											"pm.collectionVariables.set(\"personFirstName\", window.faker.name.firstName(\"Male\").toUpperCase());\r",
											"\r",
											"pm.collectionVariables.set(\"personGender\",\"MALE\");\r",
											"\r",
											"pm.collectionVariables.set('personAdrZipCode', window.faker.address.zipCode());\r",
											"pm.collectionVariables.set('personAdrCity', window.faker.address.city());\r",
											"pm.collectionVariables.set('personAdressStreetName', window.faker.address.streetName());\r",
											"\r",
											"pm.collectionVariables.set('personPhone', window.faker.phone.phoneNumber());\r",
											"pm.collectionVariables.set('personMail', window.faker.internet.exampleEmail());\r",
											"\r",
											"pm.collectionVariables.set(\"personBirthDate\", moment().add(-30, 'years').format(\"YYYY-MM-DD\"));  \r",
											"\r",
											"pm.collectionVariables.set('personAdressNumber', _.random(1, 10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"    //get ID\r",
											"    pm.collectionVariables.set(\"affiliationPSCS1Id\", jsonData.data.id);\r",
											"        //get ID\r",
											"    pm.collectionVariables.set(\"insuredId\", jsonData.data.insuredId);\r",
											"    //get ID\r",
											"    pm.collectionVariables.set(\"personId\", jsonData.data.person.id);\r",
											"    \r",
											"    pm.collectionVariables.set(\"insuredName\", jsonData.data.person.completeName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "ITN_ACTIVATE_SCENARIO",
										"value": "true",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json;charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": \"{{policeIDPSCS1}}\",\n    \"effectiveDate\": \"{{2MonthsAgo}}\",\n    \"status\": \"IN_PROGRESS\",\n    \"companyEntryDate\": \"{{2MonthsAgo}}\",\n    \"person\": {\n        \"familyName\": \"{{personFamilyName}}\",\n        \"firstName\": \"{{personFirstName}}\",\n        \"gender\": \"{{personGender}}\",\n        \"birthDate\": \"1990-01-01\",\n        \"birthPlace\" : \"{{personAdrCity}}\",\n        \"jobCategoryCode\": \"CADRE\"\n    },\n    \"communication\": {\n        \"cellphone\": \"+33-655-5111-94\",\n        \"email\": \"{{naturalCustomerFirstName}}{{naturalCustomerFamilyName}}@smallville.com\",\n        \"emailSendingAgreement\": \"SENDING_EMAILS_ACCEPTED\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/health/affiliates",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"affiliates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transformer devis PSCS1 en contrat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //get contract Number\r",
											"    pm.collectionVariables.set(\"contractNumberPSCS1\", jsonData.data.number);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/health/collective/contracts/:id/subscribe",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"collective",
										"contracts",
										":id",
										"subscribe"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{policeIDPSCS1}}",
											"description": "(Required) Quote identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Récupérer le régime général",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let codes = jsonData.data.values;\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"codeRegimeGeneral\", codes[_.random(0, codes.length-1)].code);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/settings/lists/:helpListCode?text=REGIME GENERAL",
									"host": [
										"{{url}}"
									],
									"path": [
										"settings",
										"lists",
										":helpListCode"
									],
									"query": [
										{
											"key": "text",
											"value": "REGIME GENERAL"
										}
									],
									"variable": [
										{
											"key": "helpListCode",
											"value": "SOCIAL_SYSTEMS"
										}
									]
								}
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/settings/lists/:helpListCode?text=REGIME GENERAL",
											"host": [
												"{{url}}"
											],
											"path": [
												"settings",
												"lists",
												":helpListCode"
											],
											"query": [
												{
													"key": "text",
													"value": "REGIME GENERAL"
												}
											],
											"variable": [
												{
													"key": "helpListCode",
													"value": "SOCIAL_SYSTEMS"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Thu, 20 Jan 2022 15:02:42 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"SOCIAL_SYSTEMS\",\n        \"description\": \"Social systems\",\n        \"moreResults\": false,\n        \"title\": \"SocialSystems\",\n        \"type\": \"BUILTIN\",\n        \"values\": [\n            {\n                \"code\": \"01\",\n                \"label\": \"REGIME GENERAL\"\n            }\n        ]\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Récupérer la liste des caisses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let codes = jsonData.data.values;\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"codeCaisseRO\", codes[_.random(0, codes.length-1)].code);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/settings/lists/:helpListCode?socialSystemCode={{codeRegimeGeneral}}&text=Ain&limit=100",
									"host": [
										"{{url}}"
									],
									"path": [
										"settings",
										"lists",
										":helpListCode"
									],
									"query": [
										{
											"key": "socialSystemCode",
											"value": "{{codeRegimeGeneral}}"
										},
										{
											"key": "text",
											"value": "Ain"
										},
										{
											"key": "limit",
											"value": "100"
										}
									],
									"variable": [
										{
											"key": "helpListCode",
											"value": "MANDATORY_PLAN_ORGANIZATION"
										}
									]
								}
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/settings/lists/:helpListCode?socialSystemCode={{codeRegimeGeneral}}&limit=100",
											"host": [
												"{{url}}"
											],
											"path": [
												"settings",
												"lists",
												":helpListCode"
											],
											"query": [
												{
													"key": "socialSystemCode",
													"value": "{{codeRegimeGeneral}}"
												},
												{
													"key": "text",
													"value": "rhône",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "100"
												}
											],
											"variable": [
												{
													"key": "helpListCode",
													"value": "MANDATORY_PLAN_ORGANIZATION"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Thu, 20 Jan 2022 15:03:20 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"MANDATORY_PLAN_ORGANIZATION\",\n        \"description\": \"Mandatory Plan Organization\",\n        \"moreResults\": true,\n        \"title\": \"MandatoryPlanOrganization\",\n        \"type\": \"BUILTIN\",\n        \"values\": [\n            {\n                \"code\": \"982\",\n                \"label\": \"AURILLAC\"\n            },\n            {\n                \"code\": \"939\",\n                \"label\": \"CAMIEG\"\n            },\n            {\n                \"code\": \"225\",\n                \"label\": \"CANSSM\"\n            },\n            {\n                \"code\": \"100\",\n                \"label\": \"CAVIMAC\"\n            },\n            {\n                \"code\": \"971\",\n                \"label\": \"CGSS Guadeloupe\"\n            },\n            {\n                \"code\": \"973\",\n                \"label\": \"CGSS Guyane\"\n            },\n            {\n                \"code\": \"972\",\n                \"label\": \"CGSS Martinique\"\n            },\n            {\n                \"code\": \"974\",\n                \"label\": \"CGSS Réunion\"\n            },\n            {\n                \"code\": \"758\",\n                \"label\": \"CNMSS personnel CNMSS\"\n            },\n            {\n                \"code\": \"011\",\n                \"label\": \"CPAM Ain\"\n            },\n            {\n                \"code\": \"021\",\n                \"label\": \"CPAM Aisne\"\n            },\n            {\n                \"code\": \"031\",\n                \"label\": \"CPAM Allier\"\n            },\n            {\n                \"code\": \"061\",\n                \"label\": \"CPAM Alpes-Maritimes\"\n            },\n            {\n                \"code\": \"081\",\n                \"label\": \"CPAM Ardennes\"\n            },\n            {\n                \"code\": \"072\",\n                \"label\": \"CPAM Ardèche\"\n            },\n            {\n                \"code\": \"091\",\n                \"label\": \"CPAM Ariège\"\n            },\n            {\n                \"code\": \"101\",\n                \"label\": \"CPAM Aube\"\n            },\n            {\n                \"code\": \"111\",\n                \"label\": \"CPAM Aude\"\n            },\n            {\n                \"code\": \"121\",\n                \"label\": \"CPAM Aveyron\"\n            },\n            {\n                \"code\": \"673\",\n                \"label\": \"CPAM Bas-Rhin\"\n            },\n            {\n                \"code\": \"131\",\n                \"label\": \"CPAM Bouches-du-Rhône\"\n            },\n            {\n                \"code\": \"141\",\n                \"label\": \"CPAM Calvados\"\n            },\n            {\n                \"code\": \"151\",\n                \"label\": \"CPAM Cantal\"\n            },\n            {\n                \"code\": \"161\",\n                \"label\": \"CPAM Charente\"\n            },\n            {\n                \"code\": \"171\",\n                \"label\": \"CPAM Charente-Maritime\"\n            },\n            {\n                \"code\": \"181\",\n                \"label\": \"CPAM Cher\"\n            },\n            {\n                \"code\": \"191\",\n                \"label\": \"CPAM Corrèze\"\n            },\n            {\n                \"code\": \"201\",\n                \"label\": \"CPAM Corse-du-Sud\"\n            },\n            {\n                \"code\": \"231\",\n                \"label\": \"CPAM Creuse\"\n            },\n            {\n                \"code\": \"211\",\n                \"label\": \"CPAM Côte d'Or\"\n            }\n        ]\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Récupérer la liste des centres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let codes = jsonData.data.values;\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"codeCentreRO\", codes[_.random(0, codes.length-1)].code);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/settings/lists/:helpListCode?mandatoryPlanOrgnizationCode={{codeCaisseRO}}&limit=1000",
									"host": [
										"{{url}}"
									],
									"path": [
										"settings",
										"lists",
										":helpListCode"
									],
									"query": [
										{
											"key": "text",
											"value": "Rhône",
											"disabled": true
										},
										{
											"key": "mandatoryPlanOrgnizationCode",
											"value": "{{codeCaisseRO}}"
										},
										{
											"key": "limit",
											"value": "1000"
										}
									],
									"variable": [
										{
											"key": "helpListCode",
											"value": "MANDATORY_PLAN_CENTERS"
										}
									]
								}
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/settings/lists/:helpListCode?mandatoryPlanOrgnizationCode={{codeCaisseRO}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"settings",
												"lists",
												":helpListCode"
											],
											"query": [
												{
													"key": "text",
													"value": "Rhône",
													"disabled": true
												},
												{
													"key": "mandatoryPlanOrgnizationCode",
													"value": "{{codeCaisseRO}}"
												}
											],
											"variable": [
												{
													"key": "helpListCode",
													"value": "MANDATORY_PLAN_CENTERS"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Thu, 20 Jan 2022 15:03:47 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"MANDATORY_PLAN_CENTERS\",\n        \"description\": \"Mandatory Plan Centers\",\n        \"moreResults\": true,\n        \"title\": \"MandatoryPlanCenters\",\n        \"type\": \"BUILTIN\",\n        \"values\": [\n            {\n                \"code\": \"000\",\n                \"label\": \"AURILLAC\"\n            },\n            {\n                \"code\": \"603\",\n                \"label\": \"CAMIEG\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CANSSM\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CAVIMAC\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Guadeloupe\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Guyane\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Martinique\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Réunion\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CNMSS personnel CNMSS\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ain\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aisne\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Allier\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Alpes-Maritimes\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ardennes\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ardèche\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ariège\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aube\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aude\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aveyron\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Bas-Rhin\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Bouches-du-Rhône\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Calvados\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Cantal\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Charente\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Charente-Maritime\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Cher\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Corrèze\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Corse-du-Sud\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Creuse\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Côte d'Or\"\n            }\n        ]\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Ajouter un régime obligatoire",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"//get ID\r",
											"pm.collectionVariables.set(\"mandatoryPlansId\", jsonData.data.identification);\r",
											"\r",
											"//Testing if jsonData is an object\r",
											"pm.test(\"identification is 1800144109133\", () => {\r",
											"    pm.expect(jsonData.data.identification).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"//Testing if jsonData is an object\r",
											"pm.test(\"key is 88\", () => {\r",
											"    pm.expect(jsonData.data.key).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"//Testing if jsonData is an object\r",
											"pm.test(\"systemCode is 01\", () => {\r",
											"    pm.expect(jsonData.data.systemCode).to.be.a(\"string\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//NIR generator\r",
											"pm.collectionVariables.set(\"Sexe\", _.random(1, 2));\r",
											"pm.collectionVariables.set(\"AnneeNaissance\", _.random(10, 99));\r",
											"pm.collectionVariables.set(\"MoisNaissance\", \"0\" + _.random(1, 9));\r",
											"pm.collectionVariables.set(\"DepartementNaissance\", _.random(10, 80));\r",
											"pm.collectionVariables.set(\"InseeCommune\", _.random(100, 800));\r",
											"pm.collectionVariables.set(\"NumeroOrdre\", _.random(100, 999));\r",
											"\r",
											"pm.collectionVariables.set(\"nir\",pm.collectionVariables.get(\"Sexe\")+\"\"+pm.collectionVariables.get(\"AnneeNaissance\")+pm.collectionVariables.get(\"MoisNaissance\")+pm.collectionVariables.get(\"DepartementNaissance\")+pm.collectionVariables.get(\"InseeCommune\")+pm.collectionVariables.get(\"NumeroOrdre\"));\r",
											"var cleNir = 97 - (pm.collectionVariables.get(\"nir\") %97);\r",
											"if (cleNir < 10){\r",
											"    cleNir == 0 + \"\"+ cleNir;\r",
											"}\r",
											"pm.collectionVariables.set(\"cleNir\", cleNir);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"activateNOEMIE\": true,\r\n    \"alsaceMoselle\": false,\r\n    \"birthDate\": \"{{35YearsAgo}}\",\r\n    \"effectiveDate\": \"{{5MonthsAgo}}\",\r\n    \"identification\": \"{{nir}}\",\r\n    \"identificationKey\": \"{{cleNir}}\",\r\n    \"key\": \"{{cleNir}}\",\r\n    \"number\": \"{{nir}}\",\r\n    \"centerCode\": \"000\",\r\n    \"organizationCode\": \"011\",\r\n    \"systemCode\": \"{{codeRegimeGeneral}}\"\r\n}\r\n\r\n/*\r\n    \"centerCode\": \"{{codeCentreRO}}\",\r\n    \"organizationCode\": \"{{codeCaisseRO}}\",\r\n    */",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/persons/:id/mandatoryPlans",
									"host": [
										"{{url}}"
									],
									"path": [
										"persons",
										":id",
										"mandatoryPlans"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ajouter un RIB à une personne physique",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"window = {};\r",
											"\r",
											"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
											"\r",
											"window.faker.locale = \"fr\";\r",
											"\r",
											"pm.collectionVariables.set('companyAdrZipCode', window.faker.address.zipCode());\r",
											"pm.collectionVariables.set('companyAdrCity', window.faker.address.city());\r",
											"pm.collectionVariables.set('companyAdrStreet', window.faker.address.streetName());\r",
											"\r",
											"pm.collectionVariables.set('companyAdressNumber', _.random(1, 10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201){\r",
											"    //getJson data\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //Content type is json\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    });\r",
											"\r",
											"    //Body of response is present by testing length of response\r",
											"    pm.test(\"Body is present\", () => {\r",
											"        jsonData.length > 1;\r",
											"    });\r",
											"\r",
											"    //Testing if jsonData is an object\r",
											"    pm.test(\"Test jsonData content\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"    });\r",
											"\r",
											"    //testing bank information\r",
											"    pm.test(\"bank name is correct\", () => {\r",
											"        pm.expect(jsonData.data.bank).to.eql(\"Credit agricole\");\r",
											"    });\r",
											"\r",
											"    //testing iban information\r",
											"    pm.test(\"iban is correct\", () => {\r",
											"        pm.expect(jsonData.data.iban).to.eql(\"FR2012739000501327895759P67\");\r",
											"    });\r",
											"\r",
											"    pm.collectionVariables.set(\"personBankDetailsID\", jsonData.data.id)\r",
											"\r",
											"\r",
											"} else {\r",
											"    //status code is not 201\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"iban\": \"FR2012739000501327895759P67\",\r\n    \"bic\": \"AGRIFRPP\",\r\n    \"bank\": \"Credit agricole\",\r\n    \"bankAddress1\": \"14 {{companyAdrStreet}}\",\r\n    \"bankAddress2\": \"Second RIB\",\r\n    \"zipCode\": \"{{companyAdrZipCode}}\",\r\n    \"city\": \"{{companyAdrCity}}\",\r\n    \"activeUses\": [\r\n        {\r\n            \"code\": \"P\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/persons/:id/bankDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"persons",
										":id",
										"bankDetails"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personId}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Ajouter un RIB à une personne physique",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"iban\": \"FR2012739000501327895759P67\",\r\n    \"bic\": \"{{$randomBankAccountBic}}\",\r\n    \"bank\": \"Credit agricole\",\r\n    \"bankAddress1\": \"14 {{companyAdrStreet}}\",\r\n    \"bankAddress2\": \"Second RIB\",\r\n    \"zipCode\": \"{{companyAdrZipCode}}\",\r\n    \"city\": \"{{companyAdrCity}}\",\r\n    \"countryCode\": \"FR\",\r\n    \"activeUses\": [\"AU\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/persons/:id/bankDetails",
											"host": [
												"{{url}}"
											],
											"path": [
												"persons",
												":id",
												"bankDetails"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{personID}}"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Wed, 26 Jan 2022 15:06:17 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 201,\n    \"data\": {\n        \"activeUses\": [\n            \"AU\"\n        ],\n        \"bank\": \"Credit agricole\",\n        \"bankAddress1\": \"14 725 Rue Baraban\",\n        \"bankAddress2\": \"Second RIB\",\n        \"bic\": \"HGMOSIQ1\",\n        \"city\": \"Nanterre\",\n        \"countryCode\": \"FR\",\n        \"creationDate\": \"2022-01-26T16:06:17+01:00\",\n        \"iban\": \"FR2012739000501327895759P67\",\n        \"id\": \"20000237\",\n        \"zipCode\": \"67271\"\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Ajouter une adresse à une personne physique",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"window = {};\r",
											"\r",
											"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
											"\r",
											"window.faker.locale = \"fr\";\r",
											"\r",
											"pm.collectionVariables.set('customerAdrZipCode', window.faker.address.zipCode());\r",
											"pm.collectionVariables.set('customerAdrCity', window.faker.address.city());\r",
											"pm.collectionVariables.set('customerAdressStreetName', window.faker.address.streetName());\r",
											"\r",
											"pm.collectionVariables.set('customerAdressNumber', _.random(1, 10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201){\r",
											"    //getJson data\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //Content type is json\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    });\r",
											"\r",
											"    //Body of response is present by testing length of response\r",
											"    pm.test(\"Body is present\", () => {\r",
											"        jsonData.length > 1;\r",
											"    });\r",
											"\r",
											"    //Testing if jsonData is an object\r",
											"    pm.test(\"Test jsonData content\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"    });\r",
											"\r",
											"    //testing bank information\r",
											"    pm.test(\"city is correct\", () => {\r",
											"        pm.expect(jsonData.data.city).to.be.a(\"string\");\r",
											"    });\r",
											"\r",
											"    //testing iban information\r",
											"    pm.test(\"street is correct\", () => {\r",
											"        pm.expect(jsonData.data.line3).to.be.a(\"string\");\r",
											"    });\r",
											"\r",
											"} else {\r",
											"    //status code is not 201\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json;charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"city\": \"{{customerAdrCity}}\",\r\n    \"countryCode\": \"FR\",\r\n    \"line2\": \"{{customerAdressNumber}}\",\r\n    \"line3\": \"{{customerAdressStreetName}}\",\r\n    \"mainAddress\": true,\r\n    \"zipCode\": \"{{customerAdrZipCode}}\",\r\n    \"activeUses\": [\r\n        {\r\n            \"code\": \"P\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/persons/:id/addresses",
									"host": [
										"{{url}}"
									],
									"path": [
										"persons",
										":id",
										"addresses"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Lancer batch SOCLE_ATTESTATIONS_AGENDA_VIAMEDIS",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [1000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [6000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"SOCLE_ATTESTATIONS_AGENDA_VIAMEDIS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/batch/start",
									"host": [
										"{{url}}"
									],
									"path": [
										"batch",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Lancer batch SOCLE_CARTE_VIAMEDIS",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [1000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [6000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"SOCLE_CARTE_VIAMEDIS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/batch/start",
									"host": [
										"{{url}}"
									],
									"path": [
										"batch",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Rechercher les droits carte tp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [12000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/health/cards/rights?mandatoryPlanNumber={{mandatoryPlansId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"cards",
										"rights"
									],
									"query": [
										{
											"key": "mandatoryPlanNumber",
											"value": "{{mandatoryPlansId}}"
										},
										{
											"key": "date",
											"value": "{{2MonthsAgo}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Recherche assuré",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let assures = jsonData.data;\r",
											"\r",
											"let assureSelectionne = assures[_.random(0, assures.length-1)];\r",
											"console.log(\"Assure selectionné\",assureSelectionne );\r",
											"\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"insuredIdForStatement\", assureSelectionne.insuredId);\r",
											"if(assureSelectionne.person.familyName!=null){\r",
											"    pm.collectionVariables.set(\"insuredFamilyNameForStatement\", assureSelectionne.person.familyName);\r",
											"}\r",
											"pm.collectionVariables.set(\"insuredFirstNameForStatement\", assureSelectionne.person.firstName);\r",
											"pm.collectionVariables.set(\"insuredBirthDateForStatement\", assureSelectionne.person.birthDate);\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"insuredNameForStatement\", assureSelectionne.insuredName);\r",
											"pm.collectionVariables.set(\"insuredNumberForStatement\", assureSelectionne.insuredNumber);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/health/affiliates?contractNumber={{contractNumberPSCS1}}&status=IN_PROGRESS&insuredName={{insuredName}}&effectiveDateMin={{3MonthsAgo}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"affiliates"
									],
									"query": [
										{
											"key": "contractNumber",
											"value": "{{contractNumberPSCS1}}"
										},
										{
											"key": "limit",
											"value": "30",
											"disabled": true
										},
										{
											"key": "productCode",
											"value": "PSCS1",
											"disabled": true
										},
										{
											"key": "status",
											"value": "IN_PROGRESS"
										},
										{
											"key": "id",
											"value": "{{insuredId}}",
											"disabled": true
										},
										{
											"key": "insuredName",
											"value": "{{insuredName}}"
										},
										{
											"key": "effectiveDateMin",
											"value": "{{3MonthsAgo}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Code acte Anesthesie dentaire",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"codeActeRCAnesthesieDentaire\", codes[_.random(0, codes.length-1)].code);\r",
									"pm.collectionVariables.set(\"libelleActeRCAnesthesieDentaire\", codes[_.random(0, codes.length-1)].label);\r",
									"\r",
									"console.log(jsonData);\r",
									"\r",
									"\r",
									"console.log(\"Code acte RC anesthésie dentaire choisi : \" + pm.collectionVariables.get(\"codeActeRCAnesthesieDentaire\") + \" (\" +  pm.collectionVariables.get(\"libelleActeRCAnesthesieDentaire\") + \")\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=ADA_D",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "ADA_D"
								},
								{
									"key": "code",
									"value": "DC",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "SUPPLEMANTARY_PLAN_ACTS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Code acte chirurgie dentaire",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"codeActeRCChirurgieDentaire\", codes[_.random(0, codes.length-1)].code);\r",
									"pm.collectionVariables.set(\"libelleActeRCChirurgieDentaire\", codes[_.random(0, codes.length-1)].label);\r",
									"\r",
									"console.log(jsonData);\r",
									"\r",
									"\r",
									"console.log(\"Code acte RC chirurgie dentaire choisi : \" + pm.collectionVariables.get(\"codeActeRCChirurgieDentaire\") + \" (\" +  pm.collectionVariables.get(\"libelleActeRCChirurgieDentaire\") + \")\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=ADC_D",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "ADC_D"
								},
								{
									"key": "code",
									"value": "DC",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "SUPPLEMANTARY_PLAN_ACTS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Créer une PEC chirurgie dentaire",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"dentaltProposalId\", pm.response.json().data.id);\r",
									"\r",
									"console.log(\"URL pour consulter l'objet créé dans CLEVA Web :\")\r",
									"console.log(pm.environment.get(\"clevaWebUrl\")+ \"sinistre/sante/sousDossier/\" +jsonData.data.id +\"/consultation\");\r",
									"\r",
									"\r",
									"//Numéro de facture\r",
									"pm.collectionVariables.set('invoicePECDevisChirurgieDentaire', jsonData.data.countLines[0].invoiceNumber);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"pm.collectionVariables.set('invoiceNumberDevisDentaire', '{{$timestamp}}');\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"subRecordComment\": \"{{$randomPhrase}}\",\r\n    \"summary\": \"{{$randomPhrase}}\",\r\n    \"insuredId\": \"{{insuredIdForStatement}}\",\r\n    \"countType\": \"PROPOSAL\",\r\n    \"invoiceNumber\": \"{{$randomInt}}{{$randomInt}}{{$randomInt}}\",\r\n    \"receptionDate\": \"{{currentDate}}\",\r\n    \"countLines\": [\r\n        {\r\n            \"order\": 1,\r\n            \"supplementaryPlanActCode\": \"{{codeActeRCChirurgieDentaire}}\",\r\n            \"startDateOfTreatments\": \"{{currentDate}}\",\r\n            \"actualCostsAmount\": \"200\",\r\n            \"mandatoryPlanBaseAmount\": 180,\r\n            \"quantity\": \"1\",\r\n            \"dental\": {\r\n                \"isDental\": true,\r\n                \"location12\": \"15\"\r\n            }\r\n        },\r\n        {\r\n            \"order\": 2,\r\n            \"supplementaryPlanActCode\": \"{{codeActeRCAnesthesieDentaire}}\",\r\n            \"startDateOfTreatments\": \"{{currentDate}}\",\r\n            \"actualCostsAmount\": \"50\",\r\n            \"mandatoryPlanBaseAmount\": 40,\r\n            \"quantity\": \"1\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/health/statements",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements"
							]
						}
					},
					"response": []
				},
				{
					"name": "Chargler la PEC dentaire créée",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"dentaltProposalId\", pm.response.json().data.id);\r",
									"\r",
									"console.log(\"URL pour consulter l'objet créé dans CLEVA Web :\")\r",
									"console.log(pm.environment.get(\"clevaWebUrl\")+ \"sinistre/sante/sousDossier/\" +jsonData.data.id +\"/consultation\");\r",
									"\r",
									"//Check response status\r",
									"pm.test(\"invoice number est \"+ pm.collectionVariables.get(\"invoicePECDevisChirurgieDentaire\"), function () {\r",
									"    pm.expect(jsonData.data.countLines[0].invoiceNumber).to.eql(pm.collectionVariables.get(\"invoicePECDevisChirurgieDentaire\"))\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"pm.collectionVariables.set('invoiceNumberDevisDentaire', '{{$timestamp}}');\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/statements/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{dentaltProposalId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Rechercher les lignes de prestations de la PEC dentaire",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/statements/lines?invoiceNumber={{invoiceDentalProposal}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								"lines"
							],
							"query": [
								{
									"key": "invoiceNumber",
									"value": "{{invoiceDentalProposal}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Devis équipement optique",
			"item": [
				{
					"name": "Prérequis",
					"item": [
						{
							"name": "Connexion Cleva",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"token\", pm.response.text());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "AALR",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ALR",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login}}\",\n    \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{url}}/me/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"me",
										"login"
									]
								},
								"description": "Chargement d'une tâche"
							},
							"response": []
						},
						{
							"name": "Créer devis base PSCS1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //get ID\r",
											"    pm.collectionVariables.set(\"policeIDPSCS1\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customerId\": \"{{enterpriseCustomerId}}\",\n    \"productCode\": \"PSCS1\",\n    \"hubId\":\"{{VIAMEDISId}}\",\n    \"description\": \"Santé précalculé : Produit collectif standard\",\n    \"status\": {\n        \"subcode\": \"01\",\n        \"effectiveDate\": \"{{2MonthsAgo}}\"\n\n    },\n    \"typology\": {\n        \"basic\": true,\n        \"basicType\": \"ENTERPRISE\"\n    },\n    \"jobClassCode\": \"ENSEMBLE\",\n    \"freeZones\": {\n        \"PPSPROD_PSCS1_ZL_SOCLE_NIV\": {\n            \"type\": \"STRING\",\n            \"value\": \"NIVEAU ESSENTIEL\"\n        },\n        \"PPSPROD_PSCS1_ZL_AGE_MOY_SAL\": {\n            \"type\": \"STRING\",\n            \"value\": \"50\"\n        },\n        \"PPSPROD_PSCS1_ZL_QUALITE_AUTORISEES_SOCLE\": {\n            \"type\": \"STRING\",\n            \"value\": \"A\"\n        },\n        \"PPSPROD_PSCS1_SI_RENFORT\": {\n            \"type\": \"BOOLEAN\",\n            \"value\": false\n        },\n        \"PPSPROD_PSCS1_ZL_DEPART_GEO\": {\n            \"type\": \"STRING\",\n            \"value\": \"69\"\n        },\n        \"PPSPROD_PSCS1_SI_EXTENSION\": {\n            \"type\": \"BOOLEAN\",\n            \"value\": false\n        },\n        \"PPSPROD_PSCS1_COTI_SOCLE\": {\n            \"type\": \"STRING\",\n            \"value\": \"PSCS1_ASS_SAL\"\n        }\n    },\n        \"payment\": {\n        \"periodicity\": \"ANNUAL\",\n        \"termPayer\": \"CUSTOMER\",\n        \"termPaymentCode\": \"PA\",\n        \"directDebitDay\": \"17\"\n    },\n    \"contributionBase\": {\n        \"code\": \"PSCS1_ASS_IF\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/health/collective/contracts",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"collective",
										"contracts"
									]
								},
								"description": "La méthode permet de créer un devis ou contrat collectif en santé ou prévoyance. La création nécessitera un code correspondant à un produit santé disponible. Vous pouvez récuperer la liste des produits disponible avec la ressource HelpList"
							},
							"response": []
						},
						{
							"name": "Définir les modèles de couverture et cotisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "ITN_ACTIVATE_SCENARIO",
										"type": "text",
										"value": "TRUE",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"defaultFormula\":\"PSCS1_F_BASE_ESSENTIEL\",\r\n    \"effectiveDate\":\"{{2MonthsAgo}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/health/collective/contracts/:id/coverageModels",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"collective",
										"contracts",
										":id",
										"coverageModels"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{policeIDPSCS1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Prérequis créer une autre affiliation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"window = {};\r",
											"\r",
											"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
											"\r",
											"window.faker.locale = \"fr\";\r",
											"\r",
											"pm.collectionVariables.set(\"personFamilyName\", window.faker.name.lastName().toUpperCase());\r",
											"pm.collectionVariables.set(\"personFirstName\", window.faker.name.firstName(\"Male\").toUpperCase());\r",
											"\r",
											"pm.collectionVariables.set(\"personGender\",\"MALE\");\r",
											"\r",
											"pm.collectionVariables.set('personAdrZipCode', window.faker.address.zipCode());\r",
											"pm.collectionVariables.set('personAdrCity', window.faker.address.city());\r",
											"pm.collectionVariables.set('personAdressStreetName', window.faker.address.streetName());\r",
											"\r",
											"pm.collectionVariables.set('personPhone', window.faker.phone.phoneNumber());\r",
											"pm.collectionVariables.set('personMail', window.faker.internet.exampleEmail());\r",
											"\r",
											"pm.collectionVariables.set(\"personBirthDate\", moment().add(-30, 'years').format(\"YYYY-MM-DD\"));  \r",
											"\r",
											"pm.collectionVariables.set('personAdressNumber', _.random(1, 10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"    //get ID\r",
											"    pm.collectionVariables.set(\"affiliationPSCS1Id\", jsonData.data.id);\r",
											"        //get ID\r",
											"    pm.collectionVariables.set(\"insuredId\", jsonData.data.insuredId);\r",
											"    //get ID\r",
											"    pm.collectionVariables.set(\"personId\", jsonData.data.person.id);\r",
											"    \r",
											"    pm.collectionVariables.set(\"insuredName\", jsonData.data.person.completeName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "ITN_ACTIVATE_SCENARIO",
										"value": "true",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json;charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": \"{{policeIDPSCS1}}\",\n    \"effectiveDate\": \"{{2MonthsAgo}}\",\n    \"status\": \"IN_PROGRESS\",\n    \"companyEntryDate\": \"{{2MonthsAgo}}\",\n    \"person\": {\n        \"familyName\": \"{{personFamilyName}}\",\n        \"firstName\": \"{{personFirstName}}\",\n        \"gender\": \"{{personGender}}\",\n        \"birthDate\": \"1990-01-01\",\n        \"birthPlace\" : \"{{personAdrCity}}\",\n        \"jobCategoryCode\": \"CADRE\"\n    },\n    \"communication\": {\n        \"cellphone\": \"+33-655-5111-94\",\n        \"email\": \"{{naturalCustomerFirstName}}{{naturalCustomerFamilyName}}@smallville.com\",\n        \"emailSendingAgreement\": \"SENDING_EMAILS_ACCEPTED\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/health/affiliates",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"affiliates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transformer devis PSCS1 en contrat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //get contract Number\r",
											"    pm.collectionVariables.set(\"contractNumberPSCS1\", jsonData.data.number);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/health/collective/contracts/:id/subscribe",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"collective",
										"contracts",
										":id",
										"subscribe"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{policeIDPSCS1}}",
											"description": "(Required) Quote identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Récupérer le régime général",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let codes = jsonData.data.values;\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"codeRegimeGeneral\", codes[_.random(0, codes.length-1)].code);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/settings/lists/:helpListCode?text=REGIME GENERAL",
									"host": [
										"{{url}}"
									],
									"path": [
										"settings",
										"lists",
										":helpListCode"
									],
									"query": [
										{
											"key": "text",
											"value": "REGIME GENERAL"
										}
									],
									"variable": [
										{
											"key": "helpListCode",
											"value": "SOCIAL_SYSTEMS"
										}
									]
								}
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/settings/lists/:helpListCode?text=REGIME GENERAL",
											"host": [
												"{{url}}"
											],
											"path": [
												"settings",
												"lists",
												":helpListCode"
											],
											"query": [
												{
													"key": "text",
													"value": "REGIME GENERAL"
												}
											],
											"variable": [
												{
													"key": "helpListCode",
													"value": "SOCIAL_SYSTEMS"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Thu, 20 Jan 2022 15:02:42 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"SOCIAL_SYSTEMS\",\n        \"description\": \"Social systems\",\n        \"moreResults\": false,\n        \"title\": \"SocialSystems\",\n        \"type\": \"BUILTIN\",\n        \"values\": [\n            {\n                \"code\": \"01\",\n                \"label\": \"REGIME GENERAL\"\n            }\n        ]\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Récupérer la liste des caisses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let codes = jsonData.data.values;\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"codeCaisseRO\", codes[_.random(0, codes.length-1)].code);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/settings/lists/:helpListCode?socialSystemCode={{codeRegimeGeneral}}&text=Ain&limit=100",
									"host": [
										"{{url}}"
									],
									"path": [
										"settings",
										"lists",
										":helpListCode"
									],
									"query": [
										{
											"key": "socialSystemCode",
											"value": "{{codeRegimeGeneral}}"
										},
										{
											"key": "text",
											"value": "Ain"
										},
										{
											"key": "limit",
											"value": "100"
										}
									],
									"variable": [
										{
											"key": "helpListCode",
											"value": "MANDATORY_PLAN_ORGANIZATION"
										}
									]
								}
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/settings/lists/:helpListCode?socialSystemCode={{codeRegimeGeneral}}&limit=100",
											"host": [
												"{{url}}"
											],
											"path": [
												"settings",
												"lists",
												":helpListCode"
											],
											"query": [
												{
													"key": "socialSystemCode",
													"value": "{{codeRegimeGeneral}}"
												},
												{
													"key": "text",
													"value": "rhône",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "100"
												}
											],
											"variable": [
												{
													"key": "helpListCode",
													"value": "MANDATORY_PLAN_ORGANIZATION"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Thu, 20 Jan 2022 15:03:20 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"MANDATORY_PLAN_ORGANIZATION\",\n        \"description\": \"Mandatory Plan Organization\",\n        \"moreResults\": true,\n        \"title\": \"MandatoryPlanOrganization\",\n        \"type\": \"BUILTIN\",\n        \"values\": [\n            {\n                \"code\": \"982\",\n                \"label\": \"AURILLAC\"\n            },\n            {\n                \"code\": \"939\",\n                \"label\": \"CAMIEG\"\n            },\n            {\n                \"code\": \"225\",\n                \"label\": \"CANSSM\"\n            },\n            {\n                \"code\": \"100\",\n                \"label\": \"CAVIMAC\"\n            },\n            {\n                \"code\": \"971\",\n                \"label\": \"CGSS Guadeloupe\"\n            },\n            {\n                \"code\": \"973\",\n                \"label\": \"CGSS Guyane\"\n            },\n            {\n                \"code\": \"972\",\n                \"label\": \"CGSS Martinique\"\n            },\n            {\n                \"code\": \"974\",\n                \"label\": \"CGSS Réunion\"\n            },\n            {\n                \"code\": \"758\",\n                \"label\": \"CNMSS personnel CNMSS\"\n            },\n            {\n                \"code\": \"011\",\n                \"label\": \"CPAM Ain\"\n            },\n            {\n                \"code\": \"021\",\n                \"label\": \"CPAM Aisne\"\n            },\n            {\n                \"code\": \"031\",\n                \"label\": \"CPAM Allier\"\n            },\n            {\n                \"code\": \"061\",\n                \"label\": \"CPAM Alpes-Maritimes\"\n            },\n            {\n                \"code\": \"081\",\n                \"label\": \"CPAM Ardennes\"\n            },\n            {\n                \"code\": \"072\",\n                \"label\": \"CPAM Ardèche\"\n            },\n            {\n                \"code\": \"091\",\n                \"label\": \"CPAM Ariège\"\n            },\n            {\n                \"code\": \"101\",\n                \"label\": \"CPAM Aube\"\n            },\n            {\n                \"code\": \"111\",\n                \"label\": \"CPAM Aude\"\n            },\n            {\n                \"code\": \"121\",\n                \"label\": \"CPAM Aveyron\"\n            },\n            {\n                \"code\": \"673\",\n                \"label\": \"CPAM Bas-Rhin\"\n            },\n            {\n                \"code\": \"131\",\n                \"label\": \"CPAM Bouches-du-Rhône\"\n            },\n            {\n                \"code\": \"141\",\n                \"label\": \"CPAM Calvados\"\n            },\n            {\n                \"code\": \"151\",\n                \"label\": \"CPAM Cantal\"\n            },\n            {\n                \"code\": \"161\",\n                \"label\": \"CPAM Charente\"\n            },\n            {\n                \"code\": \"171\",\n                \"label\": \"CPAM Charente-Maritime\"\n            },\n            {\n                \"code\": \"181\",\n                \"label\": \"CPAM Cher\"\n            },\n            {\n                \"code\": \"191\",\n                \"label\": \"CPAM Corrèze\"\n            },\n            {\n                \"code\": \"201\",\n                \"label\": \"CPAM Corse-du-Sud\"\n            },\n            {\n                \"code\": \"231\",\n                \"label\": \"CPAM Creuse\"\n            },\n            {\n                \"code\": \"211\",\n                \"label\": \"CPAM Côte d'Or\"\n            }\n        ]\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Récupérer la liste des centres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let codes = jsonData.data.values;\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"codeCentreRO\", codes[_.random(0, codes.length-1)].code);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/settings/lists/:helpListCode?mandatoryPlanOrgnizationCode={{codeCaisseRO}}&limit=1000",
									"host": [
										"{{url}}"
									],
									"path": [
										"settings",
										"lists",
										":helpListCode"
									],
									"query": [
										{
											"key": "text",
											"value": "Rhône",
											"disabled": true
										},
										{
											"key": "mandatoryPlanOrgnizationCode",
											"value": "{{codeCaisseRO}}"
										},
										{
											"key": "limit",
											"value": "1000"
										}
									],
									"variable": [
										{
											"key": "helpListCode",
											"value": "MANDATORY_PLAN_CENTERS"
										}
									]
								}
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/settings/lists/:helpListCode?mandatoryPlanOrgnizationCode={{codeCaisseRO}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"settings",
												"lists",
												":helpListCode"
											],
											"query": [
												{
													"key": "text",
													"value": "Rhône",
													"disabled": true
												},
												{
													"key": "mandatoryPlanOrgnizationCode",
													"value": "{{codeCaisseRO}}"
												}
											],
											"variable": [
												{
													"key": "helpListCode",
													"value": "MANDATORY_PLAN_CENTERS"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Thu, 20 Jan 2022 15:03:47 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"MANDATORY_PLAN_CENTERS\",\n        \"description\": \"Mandatory Plan Centers\",\n        \"moreResults\": true,\n        \"title\": \"MandatoryPlanCenters\",\n        \"type\": \"BUILTIN\",\n        \"values\": [\n            {\n                \"code\": \"000\",\n                \"label\": \"AURILLAC\"\n            },\n            {\n                \"code\": \"603\",\n                \"label\": \"CAMIEG\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CANSSM\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CAVIMAC\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Guadeloupe\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Guyane\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Martinique\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Réunion\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CNMSS personnel CNMSS\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ain\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aisne\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Allier\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Alpes-Maritimes\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ardennes\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ardèche\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ariège\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aube\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aude\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aveyron\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Bas-Rhin\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Bouches-du-Rhône\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Calvados\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Cantal\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Charente\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Charente-Maritime\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Cher\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Corrèze\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Corse-du-Sud\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Creuse\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Côte d'Or\"\n            }\n        ]\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Ajouter un régime obligatoire",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"//get ID\r",
											"pm.collectionVariables.set(\"mandatoryPlansId\", jsonData.data.identification);\r",
											"\r",
											"//Testing if jsonData is an object\r",
											"pm.test(\"identification is 1800144109133\", () => {\r",
											"    pm.expect(jsonData.data.identification).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"//Testing if jsonData is an object\r",
											"pm.test(\"key is 88\", () => {\r",
											"    pm.expect(jsonData.data.key).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"//Testing if jsonData is an object\r",
											"pm.test(\"systemCode is 01\", () => {\r",
											"    pm.expect(jsonData.data.systemCode).to.be.a(\"string\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//NIR generator\r",
											"pm.collectionVariables.set(\"Sexe\", _.random(1, 2));\r",
											"pm.collectionVariables.set(\"AnneeNaissance\", _.random(10, 99));\r",
											"pm.collectionVariables.set(\"MoisNaissance\", \"0\" + _.random(1, 9));\r",
											"pm.collectionVariables.set(\"DepartementNaissance\", _.random(10, 80));\r",
											"pm.collectionVariables.set(\"InseeCommune\", _.random(100, 800));\r",
											"pm.collectionVariables.set(\"NumeroOrdre\", _.random(100, 999));\r",
											"\r",
											"pm.collectionVariables.set(\"nir\",pm.collectionVariables.get(\"Sexe\")+\"\"+pm.collectionVariables.get(\"AnneeNaissance\")+pm.collectionVariables.get(\"MoisNaissance\")+pm.collectionVariables.get(\"DepartementNaissance\")+pm.collectionVariables.get(\"InseeCommune\")+pm.collectionVariables.get(\"NumeroOrdre\"));\r",
											"var cleNir = 97 - (pm.collectionVariables.get(\"nir\") %97);\r",
											"if (cleNir < 10){\r",
											"    cleNir == 0 + \"\"+ cleNir;\r",
											"}\r",
											"pm.collectionVariables.set(\"cleNir\", cleNir);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"activateNOEMIE\": true,\r\n    \"alsaceMoselle\": false,\r\n    \"birthDate\": \"{{35YearsAgo}}\",\r\n    \"effectiveDate\": \"{{5MonthsAgo}}\",\r\n    \"identification\": \"{{nir}}\",\r\n    \"identificationKey\": \"{{cleNir}}\",\r\n    \"key\": \"{{cleNir}}\",\r\n    \"number\": \"{{nir}}\",\r\n    \"centerCode\": \"000\",\r\n    \"organizationCode\": \"011\",\r\n    \"systemCode\": \"{{codeRegimeGeneral}}\"\r\n}\r\n\r\n/*\r\n    \"centerCode\": \"{{codeCentreRO}}\",\r\n    \"organizationCode\": \"{{codeCaisseRO}}\",\r\n    */",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/persons/:id/mandatoryPlans",
									"host": [
										"{{url}}"
									],
									"path": [
										"persons",
										":id",
										"mandatoryPlans"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ajouter un RIB à une personne physique",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"window = {};\r",
											"\r",
											"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
											"\r",
											"window.faker.locale = \"fr\";\r",
											"\r",
											"pm.collectionVariables.set('companyAdrZipCode', window.faker.address.zipCode());\r",
											"pm.collectionVariables.set('companyAdrCity', window.faker.address.city());\r",
											"pm.collectionVariables.set('companyAdrStreet', window.faker.address.streetName());\r",
											"\r",
											"\r",
											"pm.collectionVariables.set('companyAdressNumber', _.random(1, 10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201){\r",
											"    //getJson data\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //Content type is json\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    });\r",
											"\r",
											"    //Body of response is present by testing length of response\r",
											"    pm.test(\"Body is present\", () => {\r",
											"        jsonData.length > 1;\r",
											"    });\r",
											"\r",
											"    //Testing if jsonData is an object\r",
											"    pm.test(\"Test jsonData content\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"    });\r",
											"\r",
											"    //testing bank information\r",
											"    pm.test(\"bank name is correct\", () => {\r",
											"        pm.expect(jsonData.data.bank).to.eql(\"Credit agricole\");\r",
											"    });\r",
											"\r",
											"    //testing iban information\r",
											"    pm.test(\"iban is correct\", () => {\r",
											"        pm.expect(jsonData.data.iban).to.eql(\"FR2012739000501327895759P67\");\r",
											"    });\r",
											"\r",
											"    pm.collectionVariables.set(\"personBankDetailsID\", jsonData.data.id)\r",
											"\r",
											"\r",
											"} else {\r",
											"    //status code is not 201\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"iban\": \"FR2012739000501327895759P67\",\r\n    \"bic\": \"AGRIFRPP\",\r\n    \"bank\": \"Credit agricole\",\r\n    \"bankAddress1\": \"14 {{companyAdrStreet}}\",\r\n    \"bankAddress2\": \"Second RIB\",\r\n    \"zipCode\": \"{{companyAdrZipCode}}\",\r\n    \"city\": \"{{companyAdrCity}}\",\r\n    \"activeUses\": [\r\n        {\r\n            \"code\": \"P\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/persons/:id/bankDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"persons",
										":id",
										"bankDetails"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personId}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Ajouter un RIB à une personne physique",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"iban\": \"FR2012739000501327895759P67\",\r\n    \"bic\": \"{{$randomBankAccountBic}}\",\r\n    \"bank\": \"Credit agricole\",\r\n    \"bankAddress1\": \"14 {{companyAdrStreet}}\",\r\n    \"bankAddress2\": \"Second RIB\",\r\n    \"zipCode\": \"{{companyAdrZipCode}}\",\r\n    \"city\": \"{{companyAdrCity}}\",\r\n    \"countryCode\": \"FR\",\r\n    \"activeUses\": [\"AU\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/persons/:id/bankDetails",
											"host": [
												"{{url}}"
											],
											"path": [
												"persons",
												":id",
												"bankDetails"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{personID}}"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Wed, 26 Jan 2022 15:06:17 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 201,\n    \"data\": {\n        \"activeUses\": [\n            \"AU\"\n        ],\n        \"bank\": \"Credit agricole\",\n        \"bankAddress1\": \"14 725 Rue Baraban\",\n        \"bankAddress2\": \"Second RIB\",\n        \"bic\": \"HGMOSIQ1\",\n        \"city\": \"Nanterre\",\n        \"countryCode\": \"FR\",\n        \"creationDate\": \"2022-01-26T16:06:17+01:00\",\n        \"iban\": \"FR2012739000501327895759P67\",\n        \"id\": \"20000237\",\n        \"zipCode\": \"67271\"\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Ajouter une adresse à une personne physique",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"window = {};\r",
											"\r",
											"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
											"\r",
											"window.faker.locale = \"fr\";\r",
											"\r",
											"pm.collectionVariables.set('customerAdrZipCode', window.faker.address.zipCode());\r",
											"pm.collectionVariables.set('customerAdrCity', window.faker.address.city());\r",
											"pm.collectionVariables.set('customerAdressStreetName', window.faker.address.streetName());\r",
											"\r",
											"pm.collectionVariables.set('customerAdressNumber', _.random(1, 10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201){\r",
											"    //getJson data\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //Content type is json\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    });\r",
											"\r",
											"    //Body of response is present by testing length of response\r",
											"    pm.test(\"Body is present\", () => {\r",
											"        jsonData.length > 1;\r",
											"    });\r",
											"\r",
											"    //Testing if jsonData is an object\r",
											"    pm.test(\"Test jsonData content\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"    });\r",
											"\r",
											"    //testing bank information\r",
											"    pm.test(\"city is correct\", () => {\r",
											"        pm.expect(jsonData.data.city).to.be.a(\"string\");\r",
											"    });\r",
											"\r",
											"    //testing iban information\r",
											"    pm.test(\"street is correct\", () => {\r",
											"        pm.expect(jsonData.data.line3).to.be.a(\"string\");\r",
											"    });\r",
											"\r",
											"} else {\r",
											"    //status code is not 201\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json;charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"city\": \"{{customerAdrCity}}\",\r\n    \"countryCode\": \"FR\",\r\n    \"line2\": \"{{customerAdressNumber}}\",\r\n    \"line3\": \"{{customerAdressStreetName}}\",\r\n    \"mainAddress\": true,\r\n    \"zipCode\": \"{{customerAdrZipCode}}\",\r\n    \"activeUses\": [\r\n        {\r\n            \"code\": \"P\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/persons/:id/addresses",
									"host": [
										"{{url}}"
									],
									"path": [
										"persons",
										":id",
										"addresses"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Lancer batch SOCLE_ATTESTATIONS_AGENDA_VIAMEDIS",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [1000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [6000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"SOCLE_ATTESTATIONS_AGENDA_VIAMEDIS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/batch/start",
									"host": [
										"{{url}}"
									],
									"path": [
										"batch",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Lancer batch SOCLE_CARTE_VIAMEDIS",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [1000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [6000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"SOCLE_CARTE_VIAMEDIS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/batch/start",
									"host": [
										"{{url}}"
									],
									"path": [
										"batch",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Rechercher les droits carte tp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [12000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/health/cards/rights?mandatoryPlanNumber={{mandatoryPlansId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"cards",
										"rights"
									],
									"query": [
										{
											"key": "mandatoryPlanNumber",
											"value": "{{mandatoryPlansId}}"
										},
										{
											"key": "date",
											"value": "{{2MonthsAgo}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Recherche assuré",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let assures = jsonData.data;\r",
											"\r",
											"let assureSelectionne = assures[_.random(0, assures.length-1)];\r",
											"console.log(\"Assure selectionné\",assureSelectionne );\r",
											"\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"insuredIdForStatementOptique\", assureSelectionne.insuredId);\r",
											"if(assureSelectionne.person.familyName!=null){\r",
											"    pm.collectionVariables.set(\"insuredFamilyNameForStatementOptique\", assureSelectionne.person.familyName);\r",
											"}\r",
											"pm.collectionVariables.set(\"insuredFirstNameForStatementOptique\", assureSelectionne.person.firstName);\r",
											"pm.collectionVariables.set(\"insuredBirthDateForStatementOptique\", assureSelectionne.person.birthDate);\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"insuredNameForStatementOptique\", assureSelectionne.insuredName);\r",
											"pm.collectionVariables.set(\"insuredNumberForStatementOptique\", assureSelectionne.insuredNumber);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/health/affiliates?contractNumber={{contractNumberPSCS1}}&status=IN_PROGRESS&insuredName={{insuredName}}&effectiveDateMin={{3MonthsAgo}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"affiliates"
									],
									"query": [
										{
											"key": "contractNumber",
											"value": "{{contractNumberPSCS1}}"
										},
										{
											"key": "limit",
											"value": "30",
											"disabled": true
										},
										{
											"key": "productCode",
											"value": "PSCS1",
											"disabled": true
										},
										{
											"key": "status",
											"value": "IN_PROGRESS"
										},
										{
											"key": "id",
											"value": "{{insuredId}}",
											"disabled": true
										},
										{
											"key": "insuredName",
											"value": "{{insuredName}}"
										},
										{
											"key": "effectiveDateMin",
											"value": "{{3MonthsAgo}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Code acte renouvellement équipement optique",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"pm.sendRequest(\"https://unpkg.com/papaparse@5.1.0/papaparse.min.js\", (error, response) => {\r",
									"    if (error || response.code !== 200) {\r",
									"        pm.expect.fail('Could not load external library');\r",
									"    }\r",
									"\r",
									"    eval(response.text());\r",
									"\r",
									"    const csv = `id,name\\n1,John`;\r",
									"    const data = this.Papa.parse(csv); // notice the this\r",
									"    console.log(data);\r",
									"});\r",
									"\r",
									"/*window = {};\r",
									"pm.sendRequest(\"http://randomiban.com/static/mapp4.js\", (error, response) => {\r",
									"    if (error || response.code !== 200) {\r",
									"        pm.expect.fail('Could not load external library');\r",
									"    }\r",
									"\r",
									"    var text = response.text();\r",
									"(new Function(text))();\r",
									"\r",
									"    console.log(window.mapp4);\r",
									"});*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check response status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"codeActeRCEquipementOptique\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=EQOPT",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "EQOPT"
								},
								{
									"key": "code",
									"value": "DC",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "SUPPLEMANTARY_PLAN_ACTS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Code acte monture equipement optique",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"pm.sendRequest(\"https://unpkg.com/papaparse@5.1.0/papaparse.min.js\", (error, response) => {\r",
									"    if (error || response.code !== 200) {\r",
									"        pm.expect.fail('Could not load external library');\r",
									"    }\r",
									"\r",
									"    eval(response.text());\r",
									"\r",
									"    const csv = `id,name\\n1,John`;\r",
									"    const data = this.Papa.parse(csv); // notice the this\r",
									"    console.log(data);\r",
									"});\r",
									"\r",
									"/*window = {};\r",
									"pm.sendRequest(\"http://randomiban.com/static/mapp4.js\", (error, response) => {\r",
									"    if (error || response.code !== 200) {\r",
									"        pm.expect.fail('Could not load external library');\r",
									"    }\r",
									"\r",
									"    var text = response.text();\r",
									"(new Function(text))();\r",
									"\r",
									"    console.log(window.mapp4);\r",
									"});*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"glassesFrameOpticalEquipmentActCode\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=M01&onlyOpticalActs=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "M01"
								},
								{
									"key": "onlyOpticalActs",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "SUPPLEMANTARY_PLAN_ACTS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Code acte verre equipement optique",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"pm.sendRequest(\"https://unpkg.com/papaparse@5.1.0/papaparse.min.js\", (error, response) => {\r",
									"    if (error || response.code !== 200) {\r",
									"        pm.expect.fail('Could not load external library');\r",
									"    }\r",
									"\r",
									"    eval(response.text());\r",
									"\r",
									"    const csv = `id,name\\n1,John`;\r",
									"    const data = this.Papa.parse(csv); // notice the this\r",
									"    console.log(data);\r",
									"});\r",
									"\r",
									"/*window = {};\r",
									"pm.sendRequest(\"http://randomiban.com/static/mapp4.js\", (error, response) => {\r",
									"    if (error || response.code !== 200) {\r",
									"        pm.expect.fail('Could not load external library');\r",
									"    }\r",
									"\r",
									"    var text = response.text();\r",
									"(new Function(text))();\r",
									"\r",
									"    console.log(window.mapp4);\r",
									"});*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"eyeglassLensesOpticalEquipmentActCode\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=V01&onlyOpticalActs=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "V01"
								},
								{
									"key": "onlyOpticalActs",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "SUPPLEMANTARY_PLAN_ACTS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Prestation Monture",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"pm.sendRequest(\"https://unpkg.com/papaparse@5.1.0/papaparse.min.js\", (error, response) => {\r",
									"    if (error || response.code !== 200) {\r",
									"        pm.expect.fail('Could not load external library');\r",
									"    }\r",
									"\r",
									"    eval(response.text());\r",
									"\r",
									"    const csv = `id,name\\n1,John`;\r",
									"    const data = this.Papa.parse(csv); // notice the this\r",
									"    console.log(data);\r",
									"});\r",
									"\r",
									"/*window = {};\r",
									"pm.sendRequest(\"http://randomiban.com/static/mapp4.js\", (error, response) => {\r",
									"    if (error || response.code !== 200) {\r",
									"        pm.expect.fail('Could not load external library');\r",
									"    }\r",
									"\r",
									"    var text = response.text();\r",
									"(new Function(text))();\r",
									"\r",
									"    console.log(window.mapp4);\r",
									"});*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check response status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"prestationOptiqueMontureCode\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"console.log(jsonData);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=Monture&type=BENEFIT",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "Monture"
								},
								{
									"key": "type",
									"value": "BENEFIT"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "OPTICAL_EQUIPMENTS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Prestation Verre",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check response status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"prestationOptiqueVerreCode\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=VER&type=BENEFIT",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "VER"
								},
								{
									"key": "type",
									"value": "BENEFIT"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "OPTICAL_EQUIPMENTS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Classe optique",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check response status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"equipementOptiqueClasseCode\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"console.log(jsonData);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=Classe A&type=CLASS",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "Classe A"
								},
								{
									"key": "type",
									"value": "CLASS"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "OPTICAL_EQUIPMENTS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Oeil droit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check response status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"equipementOptiqueOeilDroitCode\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=Dr&type=SIDE",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "Dr"
								},
								{
									"key": "type",
									"value": "SIDE"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "OPTICAL_EQUIPMENTS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Oeil gauch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check response status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"equipementOptiqueOeilGaucheCode\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=gau&type=SIDE",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "gau"
								},
								{
									"key": "type",
									"value": "SIDE"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "OPTICAL_EQUIPMENTS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Créer un devis renouvellement optique",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"opticalQuoteId\", jsonData.data.id);\r",
									"pm.collectionVariables.set(\"opticalInvoiceNumber\", jsonData.data.invoiceNumber);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"pm.collectionVariables.set('invoiceNumberDevisOptique', '{{$randomInt}}');\r",
									"\r",
									"\r",
									"pm.collectionVariables.set('devisDentaireMontantSoins', '{{$randomInt}}');\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "ITN_ACTIVATE_SCENARIO",
								"value": "true",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"subRecordComment\": \"{{$randomPhrase}}\",\r\n    \"summary\": \"{{$randomPhrase}}\",\r\n    \"insuredId\": \"{{insuredIdForStatementOptique}}\",\r\n    \"countType\": \"QUOTE\",\r\n    \"invoiceNumber\": \"{{$randomInt}}{{$randomInt}}{{$randomInt}}\",\r\n    \"receptionDate\": \"{{currentDate}}\",\r\n    \"countLines\": [\r\n        {\r\n            \"supplementaryPlanActCode\": \"{{codeActeRCEquipementOptique}}\",\r\n            \"startDateOfTreatments\": \"{{currentDate}}\",\r\n            \"opticalEquipment\": true,\r\n            \"quantity\": 1,\r\n            \"opticalEquipments\": [\r\n                {\r\n                    \"benefitCode\": \"MON\",\r\n                    \"classCode\": \"CLB\",\r\n                    \"actualCostsAmount\": 200,\r\n                    \"mandatoryPlanAmount\": 0.03,\r\n                    \"mandatoryPlanBaseAmount\": 0.05,\r\n                    \"mandatoryPlanRate\": 60,\r\n                    \"actCode\": \"M03\"\r\n                },\r\n                {\r\n                    \"benefitCode\": \"VER\",\r\n                    \"classCode\": \"CLA\",\r\n                    \"eye\": \"DROIT\",\r\n                    \"axis\": 0.5,\r\n                    \"cylinder\": 1.2,\r\n                    \"prism\": 1,\r\n                    \"sphere\": 1,\r\n                    \"addition\": 1,\r\n                    \"actualCostsAmount\": 100,\r\n                    \"mandatoryPlanAmount\": 42,\r\n                    \"mandatoryPlanBaseAmount\": 70,\r\n                    \"mandatoryPlanRate\": 60,\r\n                    \"actCode\": \"V01\",\r\n                    \"saleLimitPrice\": 150\r\n                },\r\n                {\r\n                    \"benefitCode\": \"VER\",\r\n                    \"classCode\": \"CLA\",\r\n                    \"eye\": \"GAUCHE\",\r\n                    \"axis\": 0.5,\r\n                    \"cylinder\": 1.2,\r\n                    \"prism\": 1,\r\n                    \"sphere\": 1,\r\n                    \"addition\": 1,\r\n                    \"actualCostsAmount\": 120,\r\n                    \"mandatoryPlanAmount\": 42,\r\n                    \"mandatoryPlanBaseAmount\": 70,\r\n                    \"mandatoryPlanRate\": 60,\r\n                    \"actCode\": \"V01\",\r\n                    \"saleLimitPrice\": 150\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/health/statements",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements"
							]
						}
					},
					"response": []
				},
				{
					"name": "Rechercher les lignes de la prestation optique",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let resultats = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"searchedOpticalStatement\", resultats[_.random(0, resultats.length-1)]);\r",
									"\r",
									"\r",
									"//Le type doit être statement\r",
									"pm.test(\"Count type should be QUOTE\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"searchedOpticalStatement\").countType).to.eql('QUOTE');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act code is EQOPT\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"searchedOpticalStatement\").supplementaryPlanActCode).to.eql(\"EQOPT\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/statements/lines?invoiceNumber={{opticalInvoiceNumber}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								"lines"
							],
							"query": [
								{
									"key": "supplementaryPlanActCode",
									"value": "D",
									"disabled": true
								},
								{
									"key": "invoiceNumber",
									"value": "{{opticalInvoiceNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Chargement prestation équipement optique",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/statements/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								":id"
							],
							"query": [
								{
									"key": "supplementaryPlanActCode",
									"value": "D",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{opticalQuoteId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Accord préalable Chirurgie",
			"item": [
				{
					"name": "Prérequis",
					"item": [
						{
							"name": "Connexion Cleva",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"token\", pm.response.text());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "AALR",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ALR",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login}}\",\n    \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{url}}/me/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"me",
										"login"
									]
								},
								"description": "Chargement d'une tâche"
							},
							"response": []
						},
						{
							"name": "Créer devis base PSCS1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //get ID\r",
											"    pm.collectionVariables.set(\"policeIDPSCS1\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customerId\": \"{{enterpriseCustomerId}}\",\n    \"productCode\": \"PSCS1\",\n    \"hubId\":\"{{VIAMEDISId}}\",\n    \"description\": \"Santé précalculé : Produit collectif standard\",\n    \"status\": {\n        \"subcode\": \"01\",\n        \"effectiveDate\": \"{{2MonthsAgo}}\"\n\n    },\n    \"typology\": {\n        \"basic\": true,\n        \"basicType\": \"ENTERPRISE\"\n    },\n    \"jobClassCode\": \"ENSEMBLE\",\n    \"freeZones\": {\n        \"PPSPROD_PSCS1_ZL_SOCLE_NIV\": {\n            \"type\": \"STRING\",\n            \"value\": \"NIVEAU ESSENTIEL\"\n        },\n        \"PPSPROD_PSCS1_ZL_AGE_MOY_SAL\": {\n            \"type\": \"STRING\",\n            \"value\": \"50\"\n        },\n        \"PPSPROD_PSCS1_ZL_QUALITE_AUTORISEES_SOCLE\": {\n            \"type\": \"STRING\",\n            \"value\": \"A\"\n        },\n        \"PPSPROD_PSCS1_SI_RENFORT\": {\n            \"type\": \"BOOLEAN\",\n            \"value\": false\n        },\n        \"PPSPROD_PSCS1_ZL_DEPART_GEO\": {\n            \"type\": \"STRING\",\n            \"value\": \"69\"\n        },\n        \"PPSPROD_PSCS1_SI_EXTENSION\": {\n            \"type\": \"BOOLEAN\",\n            \"value\": false\n        },\n        \"PPSPROD_PSCS1_COTI_SOCLE\": {\n            \"type\": \"STRING\",\n            \"value\": \"PSCS1_ASS_SAL\"\n        }\n    },\n        \"payment\": {\n        \"periodicity\": \"ANNUAL\",\n        \"termPayer\": \"CUSTOMER\",\n        \"termPaymentCode\": \"PA\",\n        \"directDebitDay\": \"17\"\n    },\n    \"contributionBase\": {\n        \"code\": \"PSCS1_ASS_IF\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/health/collective/contracts",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"collective",
										"contracts"
									]
								},
								"description": "La méthode permet de créer un devis ou contrat collectif en santé ou prévoyance. La création nécessitera un code correspondant à un produit santé disponible. Vous pouvez récuperer la liste des produits disponible avec la ressource HelpList"
							},
							"response": []
						},
						{
							"name": "Définir les modèles de couverture et cotisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "ITN_ACTIVATE_SCENARIO",
										"type": "text",
										"value": "TRUE",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"defaultFormula\":\"PSCS1_F_BASE_ESSENTIEL\",\r\n    \"effectiveDate\":\"{{2MonthsAgo}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/health/collective/contracts/:id/coverageModels",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"collective",
										"contracts",
										":id",
										"coverageModels"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{policeIDPSCS1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Prérequis créer une autre affiliation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"window = {};\r",
											"\r",
											"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
											"\r",
											"window.faker.locale = \"fr\";\r",
											"\r",
											"pm.collectionVariables.set(\"personFamilyName\", window.faker.name.lastName().toUpperCase());\r",
											"pm.collectionVariables.set(\"personFirstName\", window.faker.name.firstName(\"Male\").toUpperCase());\r",
											"\r",
											"pm.collectionVariables.set(\"personGender\",\"MALE\");\r",
											"\r",
											"pm.collectionVariables.set('personAdrZipCode', window.faker.address.zipCode());\r",
											"pm.collectionVariables.set('personAdrCity', window.faker.address.city());\r",
											"pm.collectionVariables.set('personAdressStreetName', window.faker.address.streetName());\r",
											"\r",
											"pm.collectionVariables.set('personPhone', window.faker.phone.phoneNumber());\r",
											"pm.collectionVariables.set('personMail', window.faker.internet.exampleEmail());\r",
											"\r",
											"\r",
											"pm.collectionVariables.set(\"personBirthDate\", moment().add(-30, 'years').format(\"YYYY-MM-DD\"));  \r",
											"\r",
											"pm.collectionVariables.set('personAdressNumber', _.random(1, 10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"    //get ID\r",
											"    pm.collectionVariables.set(\"affiliationPSCS1Id\", jsonData.data.id);\r",
											"        //get ID\r",
											"    pm.collectionVariables.set(\"insuredId\", jsonData.data.insuredId);\r",
											"    //get ID\r",
											"    pm.collectionVariables.set(\"personId\", jsonData.data.person.id);\r",
											"    \r",
											"    pm.collectionVariables.set(\"insuredName\", jsonData.data.person.completeName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "ITN_ACTIVATE_SCENARIO",
										"value": "true",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json;charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": \"{{policeIDPSCS1}}\",\n    \"effectiveDate\": \"{{2MonthsAgo}}\",\n    \"status\": \"IN_PROGRESS\",\n    \"companyEntryDate\": \"{{2MonthsAgo}}\",\n    \"person\": {\n        \"familyName\": \"{{personFamilyName}}\",\n        \"firstName\": \"{{personFirstName}}\",\n        \"gender\": \"{{personGender}}\",\n        \"birthDate\": \"1990-01-01\",\n        \"birthPlace\" : \"{{personAdrCity}}\",\n        \"jobCategoryCode\": \"CADRE\"\n    },\n    \"communication\": {\n        \"cellphone\": \"+33-655-5111-94\",\n        \"email\": \"{{naturalCustomerFirstName}}{{naturalCustomerFamilyName}}@smallville.com\",\n        \"emailSendingAgreement\": \"SENDING_EMAILS_ACCEPTED\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/health/affiliates",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"affiliates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transformer devis PSCS1 en contrat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //get contract Number\r",
											"    pm.collectionVariables.set(\"contractNumberPSCS1\", jsonData.data.number);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/health/collective/contracts/:id/subscribe",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"collective",
										"contracts",
										":id",
										"subscribe"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{policeIDPSCS1}}",
											"description": "(Required) Quote identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Récupérer le régime général",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let codes = jsonData.data.values;\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"codeRegimeGeneral\", codes[_.random(0, codes.length-1)].code);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/settings/lists/:helpListCode?text=REGIME GENERAL",
									"host": [
										"{{url}}"
									],
									"path": [
										"settings",
										"lists",
										":helpListCode"
									],
									"query": [
										{
											"key": "text",
											"value": "REGIME GENERAL"
										}
									],
									"variable": [
										{
											"key": "helpListCode",
											"value": "SOCIAL_SYSTEMS"
										}
									]
								}
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/settings/lists/:helpListCode?text=REGIME GENERAL",
											"host": [
												"{{url}}"
											],
											"path": [
												"settings",
												"lists",
												":helpListCode"
											],
											"query": [
												{
													"key": "text",
													"value": "REGIME GENERAL"
												}
											],
											"variable": [
												{
													"key": "helpListCode",
													"value": "SOCIAL_SYSTEMS"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Thu, 20 Jan 2022 15:02:42 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"SOCIAL_SYSTEMS\",\n        \"description\": \"Social systems\",\n        \"moreResults\": false,\n        \"title\": \"SocialSystems\",\n        \"type\": \"BUILTIN\",\n        \"values\": [\n            {\n                \"code\": \"01\",\n                \"label\": \"REGIME GENERAL\"\n            }\n        ]\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Récupérer la liste des caisses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let codes = jsonData.data.values;\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"codeCaisseRO\", codes[_.random(0, codes.length-1)].code);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/settings/lists/:helpListCode?socialSystemCode={{codeRegimeGeneral}}&text=Ain&limit=100",
									"host": [
										"{{url}}"
									],
									"path": [
										"settings",
										"lists",
										":helpListCode"
									],
									"query": [
										{
											"key": "socialSystemCode",
											"value": "{{codeRegimeGeneral}}"
										},
										{
											"key": "text",
											"value": "Ain"
										},
										{
											"key": "limit",
											"value": "100"
										}
									],
									"variable": [
										{
											"key": "helpListCode",
											"value": "MANDATORY_PLAN_ORGANIZATION"
										}
									]
								}
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/settings/lists/:helpListCode?socialSystemCode={{codeRegimeGeneral}}&limit=100",
											"host": [
												"{{url}}"
											],
											"path": [
												"settings",
												"lists",
												":helpListCode"
											],
											"query": [
												{
													"key": "socialSystemCode",
													"value": "{{codeRegimeGeneral}}"
												},
												{
													"key": "text",
													"value": "rhône",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "100"
												}
											],
											"variable": [
												{
													"key": "helpListCode",
													"value": "MANDATORY_PLAN_ORGANIZATION"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Thu, 20 Jan 2022 15:03:20 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"MANDATORY_PLAN_ORGANIZATION\",\n        \"description\": \"Mandatory Plan Organization\",\n        \"moreResults\": true,\n        \"title\": \"MandatoryPlanOrganization\",\n        \"type\": \"BUILTIN\",\n        \"values\": [\n            {\n                \"code\": \"982\",\n                \"label\": \"AURILLAC\"\n            },\n            {\n                \"code\": \"939\",\n                \"label\": \"CAMIEG\"\n            },\n            {\n                \"code\": \"225\",\n                \"label\": \"CANSSM\"\n            },\n            {\n                \"code\": \"100\",\n                \"label\": \"CAVIMAC\"\n            },\n            {\n                \"code\": \"971\",\n                \"label\": \"CGSS Guadeloupe\"\n            },\n            {\n                \"code\": \"973\",\n                \"label\": \"CGSS Guyane\"\n            },\n            {\n                \"code\": \"972\",\n                \"label\": \"CGSS Martinique\"\n            },\n            {\n                \"code\": \"974\",\n                \"label\": \"CGSS Réunion\"\n            },\n            {\n                \"code\": \"758\",\n                \"label\": \"CNMSS personnel CNMSS\"\n            },\n            {\n                \"code\": \"011\",\n                \"label\": \"CPAM Ain\"\n            },\n            {\n                \"code\": \"021\",\n                \"label\": \"CPAM Aisne\"\n            },\n            {\n                \"code\": \"031\",\n                \"label\": \"CPAM Allier\"\n            },\n            {\n                \"code\": \"061\",\n                \"label\": \"CPAM Alpes-Maritimes\"\n            },\n            {\n                \"code\": \"081\",\n                \"label\": \"CPAM Ardennes\"\n            },\n            {\n                \"code\": \"072\",\n                \"label\": \"CPAM Ardèche\"\n            },\n            {\n                \"code\": \"091\",\n                \"label\": \"CPAM Ariège\"\n            },\n            {\n                \"code\": \"101\",\n                \"label\": \"CPAM Aube\"\n            },\n            {\n                \"code\": \"111\",\n                \"label\": \"CPAM Aude\"\n            },\n            {\n                \"code\": \"121\",\n                \"label\": \"CPAM Aveyron\"\n            },\n            {\n                \"code\": \"673\",\n                \"label\": \"CPAM Bas-Rhin\"\n            },\n            {\n                \"code\": \"131\",\n                \"label\": \"CPAM Bouches-du-Rhône\"\n            },\n            {\n                \"code\": \"141\",\n                \"label\": \"CPAM Calvados\"\n            },\n            {\n                \"code\": \"151\",\n                \"label\": \"CPAM Cantal\"\n            },\n            {\n                \"code\": \"161\",\n                \"label\": \"CPAM Charente\"\n            },\n            {\n                \"code\": \"171\",\n                \"label\": \"CPAM Charente-Maritime\"\n            },\n            {\n                \"code\": \"181\",\n                \"label\": \"CPAM Cher\"\n            },\n            {\n                \"code\": \"191\",\n                \"label\": \"CPAM Corrèze\"\n            },\n            {\n                \"code\": \"201\",\n                \"label\": \"CPAM Corse-du-Sud\"\n            },\n            {\n                \"code\": \"231\",\n                \"label\": \"CPAM Creuse\"\n            },\n            {\n                \"code\": \"211\",\n                \"label\": \"CPAM Côte d'Or\"\n            }\n        ]\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Récupérer la liste des centres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let codes = jsonData.data.values;\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"codeCentreRO\", codes[_.random(0, codes.length-1)].code);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/settings/lists/:helpListCode?mandatoryPlanOrgnizationCode={{codeCaisseRO}}&limit=1000",
									"host": [
										"{{url}}"
									],
									"path": [
										"settings",
										"lists",
										":helpListCode"
									],
									"query": [
										{
											"key": "text",
											"value": "Rhône",
											"disabled": true
										},
										{
											"key": "mandatoryPlanOrgnizationCode",
											"value": "{{codeCaisseRO}}"
										},
										{
											"key": "limit",
											"value": "1000"
										}
									],
									"variable": [
										{
											"key": "helpListCode",
											"value": "MANDATORY_PLAN_CENTERS"
										}
									]
								}
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/settings/lists/:helpListCode?mandatoryPlanOrgnizationCode={{codeCaisseRO}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"settings",
												"lists",
												":helpListCode"
											],
											"query": [
												{
													"key": "text",
													"value": "Rhône",
													"disabled": true
												},
												{
													"key": "mandatoryPlanOrgnizationCode",
													"value": "{{codeCaisseRO}}"
												}
											],
											"variable": [
												{
													"key": "helpListCode",
													"value": "MANDATORY_PLAN_CENTERS"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Thu, 20 Jan 2022 15:03:47 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"MANDATORY_PLAN_CENTERS\",\n        \"description\": \"Mandatory Plan Centers\",\n        \"moreResults\": true,\n        \"title\": \"MandatoryPlanCenters\",\n        \"type\": \"BUILTIN\",\n        \"values\": [\n            {\n                \"code\": \"000\",\n                \"label\": \"AURILLAC\"\n            },\n            {\n                \"code\": \"603\",\n                \"label\": \"CAMIEG\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CANSSM\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CAVIMAC\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Guadeloupe\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Guyane\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Martinique\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Réunion\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CNMSS personnel CNMSS\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ain\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aisne\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Allier\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Alpes-Maritimes\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ardennes\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ardèche\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ariège\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aube\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aude\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aveyron\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Bas-Rhin\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Bouches-du-Rhône\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Calvados\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Cantal\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Charente\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Charente-Maritime\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Cher\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Corrèze\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Corse-du-Sud\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Creuse\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Côte d'Or\"\n            }\n        ]\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Ajouter un régime obligatoire",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"//get ID\r",
											"pm.collectionVariables.set(\"mandatoryPlansId\", jsonData.data.identification);\r",
											"\r",
											"//Testing if jsonData is an object\r",
											"pm.test(\"identification is 1800144109133\", () => {\r",
											"    pm.expect(jsonData.data.identification).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"//Testing if jsonData is an object\r",
											"pm.test(\"key is 88\", () => {\r",
											"    pm.expect(jsonData.data.key).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"//Testing if jsonData is an object\r",
											"pm.test(\"systemCode is 01\", () => {\r",
											"    pm.expect(jsonData.data.systemCode).to.be.a(\"string\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//NIR generator\r",
											"pm.collectionVariables.set(\"Sexe\", _.random(1, 2));\r",
											"pm.collectionVariables.set(\"AnneeNaissance\", _.random(10, 99));\r",
											"pm.collectionVariables.set(\"MoisNaissance\", \"0\" + _.random(1, 9));\r",
											"pm.collectionVariables.set(\"DepartementNaissance\", _.random(10, 80));\r",
											"pm.collectionVariables.set(\"InseeCommune\", _.random(100, 800));\r",
											"pm.collectionVariables.set(\"NumeroOrdre\", _.random(100, 999));\r",
											"\r",
											"pm.collectionVariables.set(\"nir\",pm.collectionVariables.get(\"Sexe\")+\"\"+pm.collectionVariables.get(\"AnneeNaissance\")+pm.collectionVariables.get(\"MoisNaissance\")+pm.collectionVariables.get(\"DepartementNaissance\")+pm.collectionVariables.get(\"InseeCommune\")+pm.collectionVariables.get(\"NumeroOrdre\"));\r",
											"var cleNir = 97 - (pm.collectionVariables.get(\"nir\") %97);\r",
											"if (cleNir < 10){\r",
											"    cleNir == 0 + \"\"+ cleNir;\r",
											"}\r",
											"pm.collectionVariables.set(\"cleNir\", cleNir);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"activateNOEMIE\": true,\r\n    \"alsaceMoselle\": false,\r\n    \"birthDate\": \"{{35YearsAgo}}\",\r\n    \"effectiveDate\": \"{{5MonthsAgo}}\",\r\n    \"identification\": \"{{nir}}\",\r\n    \"identificationKey\": \"{{cleNir}}\",\r\n    \"key\": \"{{cleNir}}\",\r\n    \"number\": \"{{nir}}\",\r\n    \"centerCode\": \"000\",\r\n    \"organizationCode\": \"011\",\r\n    \"systemCode\": \"{{codeRegimeGeneral}}\"\r\n}\r\n\r\n/*\r\n    \"centerCode\": \"{{codeCentreRO}}\",\r\n    \"organizationCode\": \"{{codeCaisseRO}}\",\r\n    */",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/persons/:id/mandatoryPlans",
									"host": [
										"{{url}}"
									],
									"path": [
										"persons",
										":id",
										"mandatoryPlans"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ajouter un RIB à une personne physique",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"window = {};\r",
											"\r",
											"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
											"\r",
											"window.faker.locale = \"fr\";\r",
											"\r",
											"pm.collectionVariables.set('companyAdrZipCode', window.faker.address.zipCode());\r",
											"pm.collectionVariables.set('companyAdrCity', window.faker.address.city());\r",
											"pm.collectionVariables.set('companyAdrStreet', window.faker.address.streetName());\r",
											"\r",
											"\r",
											"pm.collectionVariables.set('companyAdressNumber', _.random(1, 10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201){\r",
											"    //getJson data\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //Content type is json\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    });\r",
											"\r",
											"    //Body of response is present by testing length of response\r",
											"    pm.test(\"Body is present\", () => {\r",
											"        jsonData.length > 1;\r",
											"    });\r",
											"\r",
											"    //Testing if jsonData is an object\r",
											"    pm.test(\"Test jsonData content\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"    });\r",
											"\r",
											"    //testing bank information\r",
											"    pm.test(\"bank name is correct\", () => {\r",
											"        pm.expect(jsonData.data.bank).to.eql(\"Credit agricole\");\r",
											"    });\r",
											"\r",
											"    //testing iban information\r",
											"    pm.test(\"iban is correct\", () => {\r",
											"        pm.expect(jsonData.data.iban).to.eql(\"FR2012739000501327895759P67\");\r",
											"    });\r",
											"\r",
											"    pm.collectionVariables.set(\"personBankDetailsID\", jsonData.data.id)\r",
											"\r",
											"\r",
											"} else {\r",
											"    //status code is not 201\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"iban\": \"FR2012739000501327895759P67\",\r\n    \"bic\": \"AGRIFRPP\",\r\n    \"bank\": \"Credit agricole\",\r\n    \"bankAddress1\": \"14 {{companyAdrStreet}}\",\r\n    \"bankAddress2\": \"Second RIB\",\r\n    \"zipCode\": \"{{companyAdrZipCode}}\",\r\n    \"city\": \"{{companyAdrCity}}\",\r\n    \"activeUses\": [\r\n        {\r\n            \"code\": \"P\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/persons/:id/bankDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"persons",
										":id",
										"bankDetails"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personId}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Ajouter un RIB à une personne physique",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"iban\": \"FR2012739000501327895759P67\",\r\n    \"bic\": \"{{$randomBankAccountBic}}\",\r\n    \"bank\": \"Credit agricole\",\r\n    \"bankAddress1\": \"14 {{companyAdrStreet}}\",\r\n    \"bankAddress2\": \"Second RIB\",\r\n    \"zipCode\": \"{{companyAdrZipCode}}\",\r\n    \"city\": \"{{companyAdrCity}}\",\r\n    \"countryCode\": \"FR\",\r\n    \"activeUses\": [\"AU\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/persons/:id/bankDetails",
											"host": [
												"{{url}}"
											],
											"path": [
												"persons",
												":id",
												"bankDetails"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{personID}}"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Wed, 26 Jan 2022 15:06:17 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 201,\n    \"data\": {\n        \"activeUses\": [\n            \"AU\"\n        ],\n        \"bank\": \"Credit agricole\",\n        \"bankAddress1\": \"14 725 Rue Baraban\",\n        \"bankAddress2\": \"Second RIB\",\n        \"bic\": \"HGMOSIQ1\",\n        \"city\": \"Nanterre\",\n        \"countryCode\": \"FR\",\n        \"creationDate\": \"2022-01-26T16:06:17+01:00\",\n        \"iban\": \"FR2012739000501327895759P67\",\n        \"id\": \"20000237\",\n        \"zipCode\": \"67271\"\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Ajouter une adresse à une personne physique",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"window = {};\r",
											"\r",
											"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
											"\r",
											"window.faker.locale = \"fr\";\r",
											"\r",
											"pm.collectionVariables.set('customerAdrZipCode', window.faker.address.zipCode());\r",
											"pm.collectionVariables.set('customerAdrCity', window.faker.address.city());\r",
											"pm.collectionVariables.set('customerAdressStreetName', window.faker.address.streetName());\r",
											"\r",
											"pm.collectionVariables.set('customerAdressNumber', _.random(1, 10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201){\r",
											"    //getJson data\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //Content type is json\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    });\r",
											"\r",
											"    //Body of response is present by testing length of response\r",
											"    pm.test(\"Body is present\", () => {\r",
											"        jsonData.length > 1;\r",
											"    });\r",
											"\r",
											"    //Testing if jsonData is an object\r",
											"    pm.test(\"Test jsonData content\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"    });\r",
											"\r",
											"    //testing bank information\r",
											"    pm.test(\"city is correct\", () => {\r",
											"        pm.expect(jsonData.data.city).to.be.a(\"string\");\r",
											"    });\r",
											"\r",
											"    //testing iban information\r",
											"    pm.test(\"street is correct\", () => {\r",
											"        pm.expect(jsonData.data.line3).to.be.a(\"string\");\r",
											"    });\r",
											"\r",
											"} else {\r",
											"    //status code is not 201\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json;charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"city\": \"{{customerAdrCity}}\",\r\n    \"countryCode\": \"FR\",\r\n    \"line2\": \"{{customerAdressNumber}}\",\r\n    \"line3\": \"{{customerAdressStreetName}}\",\r\n    \"mainAddress\": true,\r\n    \"zipCode\": \"{{customerAdrZipCode}}\",\r\n    \"activeUses\": [\r\n        {\r\n            \"code\": \"P\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/persons/:id/addresses",
									"host": [
										"{{url}}"
									],
									"path": [
										"persons",
										":id",
										"addresses"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Lancer batch SOCLE_ATTESTATIONS_AGENDA_VIAMEDIS",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [1000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [6000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"SOCLE_ATTESTATIONS_AGENDA_VIAMEDIS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/batch/start",
									"host": [
										"{{url}}"
									],
									"path": [
										"batch",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Lancer batch SOCLE_CARTE_VIAMEDIS",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [1000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [6000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"SOCLE_CARTE_VIAMEDIS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/batch/start",
									"host": [
										"{{url}}"
									],
									"path": [
										"batch",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Rechercher les droits carte tp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [12000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/health/cards/rights?mandatoryPlanNumber={{mandatoryPlansId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"cards",
										"rights"
									],
									"query": [
										{
											"key": "mandatoryPlanNumber",
											"value": "{{mandatoryPlansId}}"
										},
										{
											"key": "date",
											"value": "{{2MonthsAgo}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Recherche assuré",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let assures = jsonData.data;\r",
											"\r",
											"let assureSelectionne = assures[_.random(0, assures.length-1)];\r",
											"console.log(\"Assure selectionné\",assureSelectionne );\r",
											"\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"insuredId\", assureSelectionne.insuredId);\r",
											"if(assureSelectionne.person.familyName!=null){\r",
											"    pm.collectionVariables.set(\"insuredFamilyName\", assureSelectionne.person.familyName);\r",
											"}\r",
											"pm.collectionVariables.set(\"insuredFirstName\", assureSelectionne.person.firstName);\r",
											"pm.collectionVariables.set(\"insuredBirthDate\", assureSelectionne.person.birthDate);\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"insuredName\", assureSelectionne.insuredName);\r",
											"pm.collectionVariables.set(\"insuredNumber\", assureSelectionne.insuredNumber);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/health/affiliates?contractNumber={{contractNumberPSCS1}}&status=IN_PROGRESS&insuredName={{insuredName}}&effectiveDateMin={{3MonthsAgo}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"affiliates"
									],
									"query": [
										{
											"key": "contractNumber",
											"value": "{{contractNumberPSCS1}}"
										},
										{
											"key": "limit",
											"value": "30",
											"disabled": true
										},
										{
											"key": "productCode",
											"value": "PSCS1",
											"disabled": true
										},
										{
											"key": "status",
											"value": "IN_PROGRESS"
										},
										{
											"key": "id",
											"value": "{{insuredId}}",
											"disabled": true
										},
										{
											"key": "insuredName",
											"value": "{{insuredName}}"
										},
										{
											"key": "effectiveDateMin",
											"value": "{{3MonthsAgo}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Liste des natures de soins",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"careTypeCode\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "CHIRURGIE",
									"disabled": true
								},
								{
									"key": "maxResult",
									"value": "20",
									"disabled": true
								},
								{
									"key": "code",
									"value": "C",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "CARE_TYPES"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Créer un accord préalable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    if (pm.response.to.have.status(200)) {\r",
									"        pm.collectionVariables.set(\"decompteId\", pm.response.json().data.id);\r",
									"    };\r",
									"   \r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"insuredId\": \"{{insuredId}}\",\r\n    \"countType\": \"AGREEMENT\",\r\n    \"healthProfessionalId\": \"{{hospitalId}}\",\r\n    \"startDate\": \"{{currentDate}}\",\r\n    \"endDate\": \"{{10DaysLater}}\",\r\n    \"caresTypeCode\": \"C\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/health/statements",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements"
							]
						}
					},
					"response": []
				},
				{
					"name": "Chargement accord préalable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/statements/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{decompteId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Décompte consultation généraliste avec les montants",
			"item": [
				{
					"name": "Prérequis",
					"item": [
						{
							"name": "Connexion Cleva",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"token\", pm.response.text());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "AALR",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ALR",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login}}\",\n    \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{url}}/me/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"me",
										"login"
									]
								},
								"description": "Chargement d'une tâche"
							},
							"response": []
						},
						{
							"name": "Créer devis base PSCS1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //get ID\r",
											"    pm.collectionVariables.set(\"policeIDPSCS1\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customerId\": \"{{enterpriseCustomerId}}\",\n    \"productCode\": \"PSCS1\",\n    \"hubId\":\"{{VIAMEDISId}}\",\n    \"description\": \"Santé précalculé : Produit collectif standard\",\n    \"status\": {\n        \"subcode\": \"01\",\n        \"effectiveDate\": \"{{2MonthsAgo}}\"\n\n    },\n    \"typology\": {\n        \"basic\": true,\n        \"basicType\": \"ENTERPRISE\"\n    },\n    \"jobClassCode\": \"ENSEMBLE\",\n    \"freeZones\": {\n        \"PPSPROD_PSCS1_ZL_SOCLE_NIV\": {\n            \"type\": \"STRING\",\n            \"value\": \"NIVEAU ESSENTIEL\"\n        },\n        \"PPSPROD_PSCS1_ZL_AGE_MOY_SAL\": {\n            \"type\": \"STRING\",\n            \"value\": \"50\"\n        },\n        \"PPSPROD_PSCS1_ZL_QUALITE_AUTORISEES_SOCLE\": {\n            \"type\": \"STRING\",\n            \"value\": \"A\"\n        },\n        \"PPSPROD_PSCS1_SI_RENFORT\": {\n            \"type\": \"BOOLEAN\",\n            \"value\": false\n        },\n        \"PPSPROD_PSCS1_ZL_DEPART_GEO\": {\n            \"type\": \"STRING\",\n            \"value\": \"69\"\n        },\n        \"PPSPROD_PSCS1_SI_EXTENSION\": {\n            \"type\": \"BOOLEAN\",\n            \"value\": false\n        },\n        \"PPSPROD_PSCS1_COTI_SOCLE\": {\n            \"type\": \"STRING\",\n            \"value\": \"PSCS1_ASS_SAL\"\n        }\n    },\n        \"payment\": {\n        \"periodicity\": \"ANNUAL\",\n        \"termPayer\": \"CUSTOMER\",\n        \"termPaymentCode\": \"PA\",\n        \"directDebitDay\": \"17\"\n    },\n    \"contributionBase\": {\n        \"code\": \"PSCS1_ASS_IF\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/health/collective/contracts",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"collective",
										"contracts"
									]
								},
								"description": "La méthode permet de créer un devis ou contrat collectif en santé ou prévoyance. La création nécessitera un code correspondant à un produit santé disponible. Vous pouvez récuperer la liste des produits disponible avec la ressource HelpList"
							},
							"response": []
						},
						{
							"name": "Définir les modèles de couverture et cotisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "ITN_ACTIVATE_SCENARIO",
										"type": "text",
										"value": "TRUE",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"defaultFormula\":\"PSCS1_F_BASE_ESSENTIEL\",\r\n    \"effectiveDate\":\"{{2MonthsAgo}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/health/collective/contracts/:id/coverageModels",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"collective",
										"contracts",
										":id",
										"coverageModels"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{policeIDPSCS1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Prérequis créer une autre affiliation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"window = {};\r",
											"\r",
											"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
											"\r",
											"window.faker.locale = \"fr\";\r",
											"\r",
											"pm.collectionVariables.set(\"personFamilyName\", window.faker.name.lastName().toUpperCase());\r",
											"pm.collectionVariables.set(\"personFirstName\", window.faker.name.firstName(\"Male\").toUpperCase());\r",
											"\r",
											"pm.collectionVariables.set(\"personGender\",\"MALE\");\r",
											"\r",
											"pm.collectionVariables.set('personAdrZipCode', window.faker.address.zipCode());\r",
											"pm.collectionVariables.set('personAdrCity', window.faker.address.city());\r",
											"pm.collectionVariables.set('personAdressStreetName', window.faker.address.streetName());\r",
											"\r",
											"pm.collectionVariables.set('personPhone', window.faker.phone.phoneNumber());\r",
											"pm.collectionVariables.set('personMail', window.faker.internet.exampleEmail());\r",
											"\r",
											"pm.collectionVariables.set(\"personBirthDate\", moment().add(-30, 'years').format(\"YYYY-MM-DD\"));  \r",
											"\r",
											"pm.collectionVariables.set('personAdressNumber', _.random(1, 10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"    //get ID\r",
											"    pm.collectionVariables.set(\"affiliationPSCS1Id\", jsonData.data.id);\r",
											"        //get ID\r",
											"    pm.collectionVariables.set(\"insuredId\", jsonData.data.insuredId);\r",
											"    //get ID\r",
											"    pm.collectionVariables.set(\"personId\", jsonData.data.person.id);\r",
											"    \r",
											"    pm.collectionVariables.set(\"insuredName\", jsonData.data.person.completeName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "ITN_ACTIVATE_SCENARIO",
										"value": "true",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json;charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": \"{{policeIDPSCS1}}\",\n    \"effectiveDate\": \"{{2MonthsAgo}}\",\n    \"status\": \"IN_PROGRESS\",\n    \"companyEntryDate\": \"{{2MonthsAgo}}\",\n    \"person\": {\n        \"familyName\": \"{{personFamilyName}}\",\n        \"firstName\": \"{{personFirstName}}\",\n        \"gender\": \"{{personGender}}\",\n        \"birthDate\": \"1990-01-01\",\n        \"birthPlace\" : \"{{personAdrCity}}\",\n        \"jobCategoryCode\": \"CADRE\"\n    },\n    \"communication\": {\n        \"cellphone\": \"+33-655-5111-94\",\n        \"email\": \"{{naturalCustomerFirstName}}{{naturalCustomerFamilyName}}@smallville.com\",\n        \"emailSendingAgreement\": \"SENDING_EMAILS_ACCEPTED\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/health/affiliates",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"affiliates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transformer devis PSCS1 en contrat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //get contract Number\r",
											"    pm.collectionVariables.set(\"contractNumberPSCS1\", jsonData.data.number);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/health/collective/contracts/:id/subscribe",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"collective",
										"contracts",
										":id",
										"subscribe"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{policeIDPSCS1}}",
											"description": "(Required) Quote identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Récupérer le régime général",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let codes = jsonData.data.values;\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"codeRegimeGeneral\", codes[_.random(0, codes.length-1)].code);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/settings/lists/:helpListCode?text=REGIME GENERAL",
									"host": [
										"{{url}}"
									],
									"path": [
										"settings",
										"lists",
										":helpListCode"
									],
									"query": [
										{
											"key": "text",
											"value": "REGIME GENERAL"
										}
									],
									"variable": [
										{
											"key": "helpListCode",
											"value": "SOCIAL_SYSTEMS"
										}
									]
								}
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/settings/lists/:helpListCode?text=REGIME GENERAL",
											"host": [
												"{{url}}"
											],
											"path": [
												"settings",
												"lists",
												":helpListCode"
											],
											"query": [
												{
													"key": "text",
													"value": "REGIME GENERAL"
												}
											],
											"variable": [
												{
													"key": "helpListCode",
													"value": "SOCIAL_SYSTEMS"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Thu, 20 Jan 2022 15:02:42 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"SOCIAL_SYSTEMS\",\n        \"description\": \"Social systems\",\n        \"moreResults\": false,\n        \"title\": \"SocialSystems\",\n        \"type\": \"BUILTIN\",\n        \"values\": [\n            {\n                \"code\": \"01\",\n                \"label\": \"REGIME GENERAL\"\n            }\n        ]\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Récupérer la liste des caisses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let codes = jsonData.data.values;\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"codeCaisseRO\", codes[_.random(0, codes.length-1)].code);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/settings/lists/:helpListCode?socialSystemCode={{codeRegimeGeneral}}&text=Ain&limit=100",
									"host": [
										"{{url}}"
									],
									"path": [
										"settings",
										"lists",
										":helpListCode"
									],
									"query": [
										{
											"key": "socialSystemCode",
											"value": "{{codeRegimeGeneral}}"
										},
										{
											"key": "text",
											"value": "Ain"
										},
										{
											"key": "limit",
											"value": "100"
										}
									],
									"variable": [
										{
											"key": "helpListCode",
											"value": "MANDATORY_PLAN_ORGANIZATION"
										}
									]
								}
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/settings/lists/:helpListCode?socialSystemCode={{codeRegimeGeneral}}&limit=100",
											"host": [
												"{{url}}"
											],
											"path": [
												"settings",
												"lists",
												":helpListCode"
											],
											"query": [
												{
													"key": "socialSystemCode",
													"value": "{{codeRegimeGeneral}}"
												},
												{
													"key": "text",
													"value": "rhône",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "100"
												}
											],
											"variable": [
												{
													"key": "helpListCode",
													"value": "MANDATORY_PLAN_ORGANIZATION"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Thu, 20 Jan 2022 15:03:20 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"MANDATORY_PLAN_ORGANIZATION\",\n        \"description\": \"Mandatory Plan Organization\",\n        \"moreResults\": true,\n        \"title\": \"MandatoryPlanOrganization\",\n        \"type\": \"BUILTIN\",\n        \"values\": [\n            {\n                \"code\": \"982\",\n                \"label\": \"AURILLAC\"\n            },\n            {\n                \"code\": \"939\",\n                \"label\": \"CAMIEG\"\n            },\n            {\n                \"code\": \"225\",\n                \"label\": \"CANSSM\"\n            },\n            {\n                \"code\": \"100\",\n                \"label\": \"CAVIMAC\"\n            },\n            {\n                \"code\": \"971\",\n                \"label\": \"CGSS Guadeloupe\"\n            },\n            {\n                \"code\": \"973\",\n                \"label\": \"CGSS Guyane\"\n            },\n            {\n                \"code\": \"972\",\n                \"label\": \"CGSS Martinique\"\n            },\n            {\n                \"code\": \"974\",\n                \"label\": \"CGSS Réunion\"\n            },\n            {\n                \"code\": \"758\",\n                \"label\": \"CNMSS personnel CNMSS\"\n            },\n            {\n                \"code\": \"011\",\n                \"label\": \"CPAM Ain\"\n            },\n            {\n                \"code\": \"021\",\n                \"label\": \"CPAM Aisne\"\n            },\n            {\n                \"code\": \"031\",\n                \"label\": \"CPAM Allier\"\n            },\n            {\n                \"code\": \"061\",\n                \"label\": \"CPAM Alpes-Maritimes\"\n            },\n            {\n                \"code\": \"081\",\n                \"label\": \"CPAM Ardennes\"\n            },\n            {\n                \"code\": \"072\",\n                \"label\": \"CPAM Ardèche\"\n            },\n            {\n                \"code\": \"091\",\n                \"label\": \"CPAM Ariège\"\n            },\n            {\n                \"code\": \"101\",\n                \"label\": \"CPAM Aube\"\n            },\n            {\n                \"code\": \"111\",\n                \"label\": \"CPAM Aude\"\n            },\n            {\n                \"code\": \"121\",\n                \"label\": \"CPAM Aveyron\"\n            },\n            {\n                \"code\": \"673\",\n                \"label\": \"CPAM Bas-Rhin\"\n            },\n            {\n                \"code\": \"131\",\n                \"label\": \"CPAM Bouches-du-Rhône\"\n            },\n            {\n                \"code\": \"141\",\n                \"label\": \"CPAM Calvados\"\n            },\n            {\n                \"code\": \"151\",\n                \"label\": \"CPAM Cantal\"\n            },\n            {\n                \"code\": \"161\",\n                \"label\": \"CPAM Charente\"\n            },\n            {\n                \"code\": \"171\",\n                \"label\": \"CPAM Charente-Maritime\"\n            },\n            {\n                \"code\": \"181\",\n                \"label\": \"CPAM Cher\"\n            },\n            {\n                \"code\": \"191\",\n                \"label\": \"CPAM Corrèze\"\n            },\n            {\n                \"code\": \"201\",\n                \"label\": \"CPAM Corse-du-Sud\"\n            },\n            {\n                \"code\": \"231\",\n                \"label\": \"CPAM Creuse\"\n            },\n            {\n                \"code\": \"211\",\n                \"label\": \"CPAM Côte d'Or\"\n            }\n        ]\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Récupérer la liste des centres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let codes = jsonData.data.values;\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"codeCentreRO\", codes[_.random(0, codes.length-1)].code);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/settings/lists/:helpListCode?mandatoryPlanOrgnizationCode={{codeCaisseRO}}&limit=1000",
									"host": [
										"{{url}}"
									],
									"path": [
										"settings",
										"lists",
										":helpListCode"
									],
									"query": [
										{
											"key": "text",
											"value": "Rhône",
											"disabled": true
										},
										{
											"key": "mandatoryPlanOrgnizationCode",
											"value": "{{codeCaisseRO}}"
										},
										{
											"key": "limit",
											"value": "1000"
										}
									],
									"variable": [
										{
											"key": "helpListCode",
											"value": "MANDATORY_PLAN_CENTERS"
										}
									]
								}
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/settings/lists/:helpListCode?mandatoryPlanOrgnizationCode={{codeCaisseRO}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"settings",
												"lists",
												":helpListCode"
											],
											"query": [
												{
													"key": "text",
													"value": "Rhône",
													"disabled": true
												},
												{
													"key": "mandatoryPlanOrgnizationCode",
													"value": "{{codeCaisseRO}}"
												}
											],
											"variable": [
												{
													"key": "helpListCode",
													"value": "MANDATORY_PLAN_CENTERS"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Thu, 20 Jan 2022 15:03:47 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"data\": {\n        \"code\": \"MANDATORY_PLAN_CENTERS\",\n        \"description\": \"Mandatory Plan Centers\",\n        \"moreResults\": true,\n        \"title\": \"MandatoryPlanCenters\",\n        \"type\": \"BUILTIN\",\n        \"values\": [\n            {\n                \"code\": \"000\",\n                \"label\": \"AURILLAC\"\n            },\n            {\n                \"code\": \"603\",\n                \"label\": \"CAMIEG\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CANSSM\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CAVIMAC\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Guadeloupe\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Guyane\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Martinique\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CGSS Réunion\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CNMSS personnel CNMSS\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ain\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aisne\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Allier\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Alpes-Maritimes\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ardennes\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ardèche\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Ariège\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aube\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aude\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Aveyron\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Bas-Rhin\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Bouches-du-Rhône\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Calvados\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Cantal\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Charente\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Charente-Maritime\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Cher\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Corrèze\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Corse-du-Sud\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Creuse\"\n            },\n            {\n                \"code\": \"000\",\n                \"label\": \"CPAM Côte d'Or\"\n            }\n        ]\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Ajouter un régime obligatoire",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"//get ID\r",
											"pm.collectionVariables.set(\"mandatoryPlansId\", jsonData.data.identification);\r",
											"\r",
											"//Testing if jsonData is an object\r",
											"pm.test(\"identification is 1800144109133\", () => {\r",
											"    pm.expect(jsonData.data.identification).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"//Testing if jsonData is an object\r",
											"pm.test(\"key is 88\", () => {\r",
											"    pm.expect(jsonData.data.key).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"//Testing if jsonData is an object\r",
											"pm.test(\"systemCode is 01\", () => {\r",
											"    pm.expect(jsonData.data.systemCode).to.be.a(\"string\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//NIR generator\r",
											"pm.collectionVariables.set(\"Sexe\", _.random(1, 2));\r",
											"pm.collectionVariables.set(\"AnneeNaissance\", _.random(10, 99));\r",
											"pm.collectionVariables.set(\"MoisNaissance\", \"0\" + _.random(1, 9));\r",
											"pm.collectionVariables.set(\"DepartementNaissance\", _.random(10, 80));\r",
											"pm.collectionVariables.set(\"InseeCommune\", _.random(100, 800));\r",
											"pm.collectionVariables.set(\"NumeroOrdre\", _.random(100, 999));\r",
											"\r",
											"pm.collectionVariables.set(\"nir\",pm.collectionVariables.get(\"Sexe\")+\"\"+pm.collectionVariables.get(\"AnneeNaissance\")+pm.collectionVariables.get(\"MoisNaissance\")+pm.collectionVariables.get(\"DepartementNaissance\")+pm.collectionVariables.get(\"InseeCommune\")+pm.collectionVariables.get(\"NumeroOrdre\"));\r",
											"var cleNir = 97 - (pm.collectionVariables.get(\"nir\") %97);\r",
											"if (cleNir < 10){\r",
											"    cleNir == 0 + \"\"+ cleNir;\r",
											"}\r",
											"pm.collectionVariables.set(\"cleNir\", cleNir);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"activateNOEMIE\": true,\r\n    \"alsaceMoselle\": false,\r\n    \"birthDate\": \"{{35YearsAgo}}\",\r\n    \"effectiveDate\": \"{{5MonthsAgo}}\",\r\n    \"identification\": \"{{nir}}\",\r\n    \"identificationKey\": \"{{cleNir}}\",\r\n    \"key\": \"{{cleNir}}\",\r\n    \"number\": \"{{nir}}\",\r\n    \"centerCode\": \"000\",\r\n    \"organizationCode\": \"011\",\r\n    \"systemCode\": \"{{codeRegimeGeneral}}\"\r\n}\r\n\r\n/*\r\n    \"centerCode\": \"{{codeCentreRO}}\",\r\n    \"organizationCode\": \"{{codeCaisseRO}}\",\r\n    */",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/persons/:id/mandatoryPlans",
									"host": [
										"{{url}}"
									],
									"path": [
										"persons",
										":id",
										"mandatoryPlans"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ajouter un RIB à une personne physique",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"window = {};\r",
											"\r",
											"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
											"\r",
											"window.faker.locale = \"fr\";\r",
											"\r",
											"pm.collectionVariables.set('companyAdrZipCode', window.faker.address.zipCode());\r",
											"pm.collectionVariables.set('companyAdrCity', window.faker.address.city());\r",
											"pm.collectionVariables.set('companyAdrStreet', window.faker.address.streetName());\r",
											"\r",
											"pm.collectionVariables.set('companyAdressNumber', _.random(1, 10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201){\r",
											"    //getJson data\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //Content type is json\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    });\r",
											"\r",
											"    //Body of response is present by testing length of response\r",
											"    pm.test(\"Body is present\", () => {\r",
											"        jsonData.length > 1;\r",
											"    });\r",
											"\r",
											"    //Testing if jsonData is an object\r",
											"    pm.test(\"Test jsonData content\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"    });\r",
											"\r",
											"    //testing bank information\r",
											"    pm.test(\"bank name is correct\", () => {\r",
											"        pm.expect(jsonData.data.bank).to.eql(\"Credit agricole\");\r",
											"    });\r",
											"\r",
											"    //testing iban information\r",
											"    pm.test(\"iban is correct\", () => {\r",
											"        pm.expect(jsonData.data.iban).to.eql(\"FR2012739000501327895759P67\");\r",
											"    });\r",
											"\r",
											"    pm.collectionVariables.set(\"personBankDetailsID\", jsonData.data.id)\r",
											"\r",
											"\r",
											"} else {\r",
											"    //status code is not 201\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"iban\": \"FR2012739000501327895759P67\",\r\n    \"bic\": \"AGRIFRPP\",\r\n    \"bank\": \"Credit agricole\",\r\n    \"bankAddress1\": \"14 {{companyAdrStreet}}\",\r\n    \"bankAddress2\": \"Second RIB\",\r\n    \"zipCode\": \"{{companyAdrZipCode}}\",\r\n    \"city\": \"{{companyAdrCity}}\",\r\n    \"activeUses\": [\r\n        {\r\n            \"code\": \"P\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/persons/:id/bankDetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"persons",
										":id",
										"bankDetails"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personId}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Ajouter un RIB à une personne physique",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"iban\": \"FR2012739000501327895759P67\",\r\n    \"bic\": \"{{$randomBankAccountBic}}\",\r\n    \"bank\": \"Credit agricole\",\r\n    \"bankAddress1\": \"14 {{companyAdrStreet}}\",\r\n    \"bankAddress2\": \"Second RIB\",\r\n    \"zipCode\": \"{{companyAdrZipCode}}\",\r\n    \"city\": \"{{companyAdrCity}}\",\r\n    \"countryCode\": \"FR\",\r\n    \"activeUses\": [\"AU\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/persons/:id/bankDetails",
											"host": [
												"{{url}}"
											],
											"path": [
												"persons",
												":id",
												"bankDetails"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{personID}}"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Wed, 26 Jan 2022 15:06:17 GMT"
										},
										{
											"key": "Server",
											"value": ""
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 201,\n    \"data\": {\n        \"activeUses\": [\n            \"AU\"\n        ],\n        \"bank\": \"Credit agricole\",\n        \"bankAddress1\": \"14 725 Rue Baraban\",\n        \"bankAddress2\": \"Second RIB\",\n        \"bic\": \"HGMOSIQ1\",\n        \"city\": \"Nanterre\",\n        \"countryCode\": \"FR\",\n        \"creationDate\": \"2022-01-26T16:06:17+01:00\",\n        \"iban\": \"FR2012739000501327895759P67\",\n        \"id\": \"20000237\",\n        \"zipCode\": \"67271\"\n    },\n    \"status\": \"SUCCESS\"\n}"
								}
							]
						},
						{
							"name": "Ajouter une adresse à une personne physique",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"window = {};\r",
											"\r",
											"(new Function(pm.collectionVariables.get(\"fakerText\")))();\r",
											"\r",
											"window.faker.locale = \"fr\";\r",
											"\r",
											"pm.collectionVariables.set('customerAdrZipCode', window.faker.address.zipCode());\r",
											"pm.collectionVariables.set('customerAdrCity', window.faker.address.city());\r",
											"pm.collectionVariables.set('customerAdressStreetName', window.faker.address.streetName());\r",
											"\r",
											"\r",
											"pm.collectionVariables.set('customerAdressNumber', _.random(1, 10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201){\r",
											"    //getJson data\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    //Content type is json\r",
											"    pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    });\r",
											"\r",
											"    //Body of response is present by testing length of response\r",
											"    pm.test(\"Body is present\", () => {\r",
											"        jsonData.length > 1;\r",
											"    });\r",
											"\r",
											"    //Testing if jsonData is an object\r",
											"    pm.test(\"Test jsonData content\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"    });\r",
											"\r",
											"    //testing bank information\r",
											"    pm.test(\"city is correct\", () => {\r",
											"        pm.expect(jsonData.data.city).to.be.a(\"string\");\r",
											"    });\r",
											"\r",
											"    //testing iban information\r",
											"    pm.test(\"street is correct\", () => {\r",
											"        pm.expect(jsonData.data.line3).to.be.a(\"string\");\r",
											"    });\r",
											"\r",
											"} else {\r",
											"    //status code is not 201\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json;charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"city\": \"{{customerAdrCity}}\",\r\n    \"countryCode\": \"FR\",\r\n    \"line2\": \"{{customerAdressNumber}}\",\r\n    \"line3\": \"{{customerAdressStreetName}}\",\r\n    \"mainAddress\": true,\r\n    \"zipCode\": \"{{customerAdrZipCode}}\",\r\n    \"activeUses\": [\r\n        {\r\n            \"code\": \"P\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/persons/:id/addresses",
									"host": [
										"{{url}}"
									],
									"path": [
										"persons",
										":id",
										"addresses"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Lancer batch SOCLE_ATTESTATIONS_AGENDA_VIAMEDIS",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [1000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [6000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"SOCLE_ATTESTATIONS_AGENDA_VIAMEDIS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/batch/start",
									"host": [
										"{{url}}"
									],
									"path": [
										"batch",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Lancer batch SOCLE_CARTE_VIAMEDIS",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [1000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [6000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"SOCLE_CARTE_VIAMEDIS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/batch/start",
									"host": [
										"{{url}}"
									],
									"path": [
										"batch",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Rechercher les droits carte tp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, [12000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/health/cards/rights?mandatoryPlanNumber={{mandatoryPlansId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"cards",
										"rights"
									],
									"query": [
										{
											"key": "mandatoryPlanNumber",
											"value": "{{mandatoryPlansId}}"
										},
										{
											"key": "date",
											"value": "{{2MonthsAgo}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Recherche assuré",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(this.request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//getJson data\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let assures = jsonData.data;\r",
											"\r",
											"let assureSelectionne = assures[_.random(0, assures.length-1)];\r",
											"console.log(\"Assure selectionné\",assureSelectionne );\r",
											"\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"insuredIdForStatementGeneralPractitioner\", assureSelectionne.insuredId);\r",
											"if(assureSelectionne.person.familyName!=null){\r",
											"    pm.collectionVariables.set(\"insuredFamilyNameForStatementGeneralPractitioner\", assureSelectionne.person.familyName);\r",
											"}\r",
											"pm.collectionVariables.set(\"insuredFirstNameForStatementGeneralPractitioner\", assureSelectionne.person.firstName);\r",
											"pm.collectionVariables.set(\"insuredBirthDateForStatementGeneralPractitioner\", assureSelectionne.person.birthDate);\r",
											"\r",
											"//Set title code\r",
											"pm.collectionVariables.set(\"insuredNameForStatementGeneralPractitioner\", assureSelectionne.insuredName);\r",
											"pm.collectionVariables.set(\"insuredNumberForStatementGeneralPractitioner\", assureSelectionne.insuredNumber);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/health/affiliates?contractNumber={{contractNumberPSCS1}}&status=IN_PROGRESS&insuredName={{insuredName}}&effectiveDateMin={{3MonthsAgo}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"health",
										"affiliates"
									],
									"query": [
										{
											"key": "contractNumber",
											"value": "{{contractNumberPSCS1}}"
										},
										{
											"key": "limit",
											"value": "30",
											"disabled": true
										},
										{
											"key": "productCode",
											"value": "PSCS1",
											"disabled": true
										},
										{
											"key": "status",
											"value": "IN_PROGRESS"
										},
										{
											"key": "id",
											"value": "{{insuredId}}",
											"disabled": true
										},
										{
											"key": "insuredName",
											"value": "{{insuredName}}"
										},
										{
											"key": "effectiveDateMin",
											"value": "{{3MonthsAgo}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Liste des codes actes RC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check response status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"codeActeConsultationGeneraliste\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"pm.collectionVariables.set(\"libelleActeConsultationGeneraliste\", codes[_.random(0, codes.length-1)].label);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=TCG",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "code",
									"value": "TCG",
									"disabled": true
								},
								{
									"key": "text",
									"value": "TCG"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "SUPPLEMANTARY_PLAN_ACTS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Liste des devises",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check response status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"Euro\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=Euro",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "Euro"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "CURRENCIES"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Type prestataire médecin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let codes = jsonData.data.values;\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"typePrestataireMedecinCode\", codes[_.random(0, codes.length-1)].code);\r",
									"\r",
									"pm.collectionVariables.set(\"typePrestataireMedecinLabel\", codes[_.random(0, codes.length-1)].label);\r",
									"\r",
									"console.log(jsonData);\r",
									"\r",
									"console.log(\"Type prestataire : \" + pm.collectionVariables.get(\"typePrestataireMedecinCode\") + \" (\" +  pm.collectionVariables.get(\"typePrestataireMedecinLabel\") + \")\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/settings/lists/:helpListCode?text=Médecin Conseil",
							"host": [
								"{{url}}"
							],
							"path": [
								"settings",
								"lists",
								":helpListCode"
							],
							"query": [
								{
									"key": "text",
									"value": "Médecin Conseil"
								}
							],
							"variable": [
								{
									"key": "helpListCode",
									"value": "SERVICE_PROVIDER_TYPES"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recherche médecin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let providers = jsonData.data;\r",
									"\r",
									"const provider = providers.find(provider => provider.finessAdeliReference ? provider.finessAdeliReference : null);\r",
									"if(provider != null){\r",
									"    pm.collectionVariables.set(\"healthProfessionalFiness\", provider.finessAdeliReference);\r",
									"} else {\r",
									"    console.log(\"Pas de finessAdeliReference trouvé\")\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers?limit=50&type={{typePrestataireMedecinCode}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "type",
									"value": "{{typePrestataireMedecinCode}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Créer un décompte consultation généralise",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"console.log(\"URL pour consulter l'objet créé dans CLEVA Web :\")\r",
									"console.log(pm.environment.get(\"clevaWebUrl\")+ \"sinistre/sante/sousDossier/\" +jsonData.data.id +\"/consultation\");\r",
									"\r",
									"let lignesSaisies = jsonData.data.countLines;\r",
									"let lignesGenerees = jsonData.data.detailsLines;\r",
									"\r",
									"\r",
									"//Identifiant du decompte\r",
									"pm.collectionVariables.set(\"decompteConsultationGeneraliteId\", pm.response.json().data.id);\r",
									"\r",
									"//num du decompte\r",
									"pm.collectionVariables.set(\"decompteConsultationGeneraliteNumber\", pm.response.json().data.number);\r",
									"\r",
									"\r",
									"//Ligne decompte saisie\r",
									"pm.collectionVariables.set(\"ligneDecompteSaisieConsultationGeneraliste\", lignesSaisies[_.random(0, lignesSaisies.length-1)]);\r",
									"\r",
									"\r",
									"//Ligne decompte generee\r",
									"pm.collectionVariables.set(\"ligneDecompteGenereeConsultationGeneraliste\", lignesGenerees[_.random(0, lignesGenerees.length-1)]);\r",
									"\r",
									"//Numéro de facture\r",
									"pm.collectionVariables.set('invoiceDecompteConsultationGeneraliste', pm.response.json().data.invoiceNumber);\r",
									"\r",
									"\r",
									"//Le type doit être statement\r",
									"pm.test(\"Count type should be STATEMENT\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"ligneDecompteSaisieConsultationGeneraliste\").countType).to.eql('STATEMENT');\r",
									"});\r",
									"\r",
									"pm.test(\"Insured name is \" + pm.collectionVariables.get(\"insuredName\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"ligneDecompteGenereeConsultationGeneraliste\").insuredName).to.eql(pm.collectionVariables.get(\"insuredName\"));\r",
									"});\r",
									"\r",
									"// Une ligne de decompte doit être générée\r",
									"pm.test(\"One computed line generated\", function () {\r",
									"    pm.expect(lignesGenerees.length).to.eql(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act code is \" + pm.collectionVariables.get(\"codeActeConsultationGeneraliste\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"ligneDecompteSaisieConsultationGeneraliste\").supplementaryPlanActCode).to.eql(pm.collectionVariables.get(\"codeActeConsultationGeneraliste\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act label is \" + pm.collectionVariables.get(\"libelleActeConsultationGeneraliste\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"ligneDecompteSaisieConsultationGeneraliste\").supplementaryPlanActLabel).to.eql(pm.collectionVariables.get(\"libelleActeConsultationGeneraliste\"));\r",
									"});\r",
									"\r",
									"   \r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"pm.collectionVariables.set('invoiceDecompteConsultationGeneraliste', '{{$timestamp}}');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"subRecordComment\": \"{{$randomPhrase}}\",\r\n    \"summary\": \"{{$randomPhrase}}\",\r\n    \"insuredId\": \"{{insuredIdForStatementGeneralPractitioner}}\",\r\n    \"countType\": \"STATEMENT\",\r\n    \"receptionDate\": \"{{1MonthAgo}}\",\r\n    \"invoiceNumber\": \"{{invoiceDecompteConsultationGeneraliste}}\",\r\n    \"healthProfessionalFiness\": \"{{healthProfessionalFiness}}\",\r\n    \"countLines\": [\r\n        {\r\n            \"order\": 1,\r\n            \"supplementaryPlanActCode\": \"{{codeActeConsultationGeneraliste}}\",\r\n            \"startDateOfTreatments\": \"{{currentDate}}\",\r\n            \"mandatoryPlanBaseAmount\": 25,\r\n            \"quantity\": \"1\",\r\n            \"coefficient\": 1,\r\n            \"actualCostsAmount\": \"30\",\r\n            \"mandatoryPlanRate\": 70,\r\n            \"mandatoryPlanAmount\": 21\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/health/statements",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements"
							]
						}
					},
					"response": []
				},
				{
					"name": "Charger la prestation créée",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"console.log(\"URL pour consulter l'objet créé dans CLEVA Web :\")\r",
									"console.log(pm.environment.get(\"clevaWebUrl\")+ \"sinistre/sante/sousDossier/\" +jsonData.data.id +\"/consultation\");\r",
									"\r",
									"let lignesSaisies = jsonData.data.countLines;\r",
									"let lignesGenerees = jsonData.data.detailsLines;\r",
									"\r",
									"\r",
									"//Identifiant du decompte\r",
									"pm.collectionVariables.set(\"decompteConsultationGeneraliteId\", pm.response.json().data.id);\r",
									"\r",
									"//Ligne decompte saisie\r",
									"pm.collectionVariables.set(\"ligneDecompteSaisieConsultationGeneraliste\", lignesSaisies[_.random(0, lignesSaisies.length-1)]);\r",
									"\r",
									"\r",
									"//Ligne decompte generee\r",
									"pm.collectionVariables.set(\"ligneDecompteGenereeConsultationGeneraliste\", lignesGenerees[_.random(0, lignesGenerees.length-1)]);\r",
									"\r",
									"\r",
									"\r",
									"//Le type doit être statement\r",
									"pm.test(\"Count type should be STATEMENT\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"ligneDecompteSaisieConsultationGeneraliste\").countType).to.eql('STATEMENT');\r",
									"});\r",
									"\r",
									"pm.test(\"Insured name is \" + pm.collectionVariables.get(\"insuredName\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"ligneDecompteGenereeConsultationGeneraliste\").insuredName).to.eql(pm.collectionVariables.get(\"insuredName\"));\r",
									"});\r",
									"\r",
									"// Une ligne de decompte doit être générée\r",
									"pm.test(\"One computed line generated\", function () {\r",
									"    pm.expect(lignesGenerees.length).to.eql(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act code is \" + pm.collectionVariables.get(\"codeActeConsultationGeneraliste\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"ligneDecompteSaisieConsultationGeneraliste\").supplementaryPlanActCode).to.eql(pm.collectionVariables.get(\"codeActeConsultationGeneraliste\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act label is \" + pm.collectionVariables.get(\"libelleActeConsultationGeneraliste\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"ligneDecompteSaisieConsultationGeneraliste\").supplementaryPlanActLabel).to.eql(pm.collectionVariables.get(\"libelleActeConsultationGeneraliste\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"pm.collectionVariables.set('invoiceNumberDevisDentaire', '{{$timestamp}}');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/statements/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{decompteConsultationGeneraliteId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Modifier la prestation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"//Check response status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"console.log(\"URL pour consulter l'objet créé dans CLEVA Web :\")\r",
									"console.log(pm.environment.get(\"clevaWebUrl\")+ \"sinistre/sante/sousDossier/\" +jsonData.data.id +\"/consultation\");\r",
									"\r",
									"let lignesSaisies = jsonData.data.countLines;\r",
									"let lignesGenerees = jsonData.data.detailsLines;\r",
									"\r",
									"\r",
									"//Identifiant du decompte\r",
									"pm.collectionVariables.set(\"decompteConsultationGeneraliteId\", pm.response.json().data.id);\r",
									"\r",
									"//Ligne decompte saisie\r",
									"pm.collectionVariables.set(\"ligneDecompteSaisieConsultationGeneraliste\", lignesSaisies[_.random(0, lignesSaisies.length-1)]);\r",
									"\r",
									"\r",
									"//Ligne decompte generee\r",
									"pm.collectionVariables.set(\"ligneDecompteGenereeConsultationGeneraliste\", lignesGenerees[_.random(0, lignesGenerees.length-1)]);\r",
									"\r",
									"\r",
									"\r",
									"//Le type doit être statement\r",
									"pm.test(\"Count type should be STATEMENT\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"ligneDecompteSaisieConsultationGeneraliste\").countType).to.eql('STATEMENT');\r",
									"});\r",
									"\r",
									"pm.test(\"Insured name is \" + pm.collectionVariables.get(\"insuredName\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"ligneDecompteGenereeConsultationGeneraliste\").insuredName).to.eql(pm.collectionVariables.get(\"insuredName\"));\r",
									"});\r",
									"\r",
									"// Une ligne de decompte doit être générée\r",
									"pm.test(\"One computed line generated\", function () {\r",
									"    pm.expect(lignesGenerees.length).to.eql(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act code is \" + pm.collectionVariables.get(\"codeActeConsultationGeneraliste\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"ligneDecompteSaisieConsultationGeneraliste\").supplementaryPlanActCode).to.eql(pm.collectionVariables.get(\"codeActeConsultationGeneraliste\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act label is \" + pm.collectionVariables.get(\"libelleActeConsultationGeneraliste\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"ligneDecompteSaisieConsultationGeneraliste\").supplementaryPlanActLabel).to.eql(pm.collectionVariables.get(\"libelleActeConsultationGeneraliste\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);\r",
									"\r",
									"pm.collectionVariables.set('invoiceDecompteConsultationGeneraliste', '{{$timestamp}}');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"externalReference\":\"{{$randomInt}}{{$randomInt}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/health/statements/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{decompteConsultationGeneraliteId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Rechercher le décompte consultation généraliste",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let resultats = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"decompteConsultationGeneralisteRecherché\", resultats[_.random(0, resultats.length-1)]);\r",
									"\r",
									"\r",
									"//Le type doit être statement\r",
									"pm.test(\"Count type should be STATEMENT\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"decompteConsultationGeneralisteRecherché\").countType).to.eql('STATEMENT');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act code is \" + pm.collectionVariables.get(\"codeActeConsultationGeneraliste\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"decompteConsultationGeneralisteRecherché\").supplementaryPlanActCode).to.eql(pm.collectionVariables.get(\"codeActeConsultationGeneraliste\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act label is \" + pm.collectionVariables.get(\"libelleActeConsultationGeneraliste\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"decompteConsultationGeneralisteRecherché\").supplementaryPlanActLabel).to.eql(pm.collectionVariables.get(\"libelleActeConsultationGeneraliste\"));\r",
									"});\r",
									"\r",
									"   \r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/statements/lines?insuredId={{insuredId}}&limit=5",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements",
								"lines"
							],
							"query": [
								{
									"key": "invoiceNumber",
									"value": "{{invoiceDecompteConsultationGeneraliste}}",
									"disabled": true
								},
								{
									"key": "insuredId",
									"value": "{{insuredId}}"
								},
								{
									"key": "contractNumber",
									"value": "PSCS1_C_00003",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Rechercher la prestation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//getJson data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let resultats = jsonData.data;\r",
									"\r",
									"//Set title code\r",
									"pm.collectionVariables.set(\"decompteConsultationGeneralisteRecherché\", resultats[_.random(0, resultats.length-1)]);\r",
									"\r",
									"\r",
									"//Le type doit être statement\r",
									"pm.test(\"Count type should be STATEMENT\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"decompteConsultationGeneralisteRecherché\").countType).to.eql('STATEMENT');\r",
									"});\r",
									"\r",
									"/*\r",
									"pm.test(\"Supplemantaty plan act code is \" + pm.collectionVariables.get(\"codeActeConsultationGeneraliste\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"decompteConsultationGeneralisteRecherché\").supplementaryPlanActCode).to.eql(pm.collectionVariables.get(\"codeActeConsultationGeneraliste\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplemantaty plan act label is \" + pm.collectionVariables.get(\"libelleActeConsultationGeneraliste\"), function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"decompteConsultationGeneralisteRecherché\").supplementaryPlanActLabel).to.eql(pm.collectionVariables.get(\"libelleActeConsultationGeneraliste\"));\r",
									"});*/\r",
									"\r",
									"   \r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(this.request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health/statements?statementNumber={{decompteConsultationGeneraliteNumber}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"health",
								"statements"
							],
							"query": [
								{
									"key": "statementNumber",
									"value": "{{decompteConsultationGeneraliteNumber}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const moment = require('moment');",
					"pm.collectionVariables.set(\"currentDate\", moment().format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"10DaysLater\", moment().add(10, 'days').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"1MonthLater\", moment().add(30, 'days').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"6MonthsLater\", moment().add(180, 'days').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"2DaysAgo\", moment().add(-2, 'days').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"1MonthAgo\", moment().add(-1, 'months').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"2MonthsAgo\", moment().add(-2, 'months').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"3MonthsAgo\", moment().add(-3, 'months').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"4MonthsAgo\", moment().add(-4, 'months').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"5MonthsAgo\", moment().add(-5, 'months').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"6MonthsAgo\", moment().add(-6, 'months').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"lastYear\", moment().add(-1, 'years').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"5YearsAgo\", moment().add(-5, 'years').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"10YearsAgo\", moment().add(-10, 'years').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"15YearsAgo\", moment().add(-15, 'years').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"20YearsAgo\", moment().add(-20, 'years').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"30YearsAgo\", moment().add(-30, 'years').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"35YearsAgo\", moment().add(-35, 'years').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"40YearsAgo\", moment().add(-40, 'years').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"45YearsAgo\", moment().add(-45, 'years').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"50YearsAgo\", moment().add(-50, 'years').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"60YearsAgo\", moment().add(-60, 'years').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"70YearsAgo\", moment().add(-70, 'years').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"currentDateSearchFormat\", moment().format(\"YYYY/MM/DD\"));",
					"",
					"//Date de naissances",
					"pm.collectionVariables.set(\"birthDate10YearsAgo\", moment().add(-10, 'years').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"birthDate20YearsAgo\", moment().add(-20, 'years').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"birthDate30YearsAgo\", moment().add(-30, 'years').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"birthDate40YearsAgo\", moment().add(-40, 'years').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"birthDate50YearsAgo\", moment().add(-50, 'years').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"birthDate60YearsAgo\", moment().add(-60, 'years').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"birthDate70YearsAgo\", moment().add(-70, 'years').format(\"YYYY-MM-DD\"));",
					"pm.collectionVariables.set(\"birthDate80YearsAgo\", moment().add(-80, 'years').format(\"YYYY-MM-DD\"));",
					"",
					"//Default variables for GET Methods",
					"pm.collectionVariables.set(\"defaultOffset\", 0);",
					"pm.collectionVariables.set(\"defaultLimit\", 10);",
					"pm.collectionVariables.set(\"50_Limit\", 50);",
					"",
					"var useId = false;",
					"if (request.url.includes('/:id')){",
					"    useId == true;",
					"}",
					"",
					"checkFaker = pm.collectionVariables.has(\"fakerText\")",
					"if (checkFaker == false)",
					"{",
					"    pm.collectionVariables.set(\"fakerText\", \"\")",
					"    pm.collectionVariables.get(\"fakerText\");",
					"    console.log(\"vérification faker : \"+pm.collectionVariables.get(\"fakerText\").length);",
					"}",
					"",
					"if (pm.collectionVariables.get(\"fakerText\").length < 1){",
					"    pm.sendRequest(pm.environment.get(\"fakerUrl\"), (error, response) => {",
					"    pm.collectionVariables.set(\"fakerText\", response.text());",
					"    console.log(\"la librairie a du être chargée\");})",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if (request.name != 'Connexion CLEVA' && request.name != 'Connexion Cleva'){",
					"",
					"    if (request.method == 'GET'){",
					"        pm.test(\"Status code is 200\", function () {",
					"            pm.response.to.have.status(200);",
					"        });",
					"        if (!request.url.includes('/settings/lists')&&!request.url.includes('/me')&&!request.url.includes('/system')&&pm.collectionVariables.get(\"useId\")==false){",
					"            pm.test(\"Limit is a number\", function () {",
					"                pm.expect(pm.response.json().limit).to.be.an(\"number\");",
					"            });",
					"            pm.test(\"resultSize is a number\", function () {",
					"                pm.expect(pm.response.json().resultSize).to.be.an(\"number\");",
					"            });",
					"            pm.test(\"offset is a number\", function () {",
					"                pm.expect(pm.response.json().offset).to.be.an(\"number\");",
					"            });  ",
					"        }",
					"    }",
					"",
					"    if (request.method == 'POST'){",
					"",
					"        pm.test(\"Successful POST request\", function () {",
					"            pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
					"        });",
					"    }",
					"",
					"    if (request.method == 'PUT'){",
					"        pm.test(\"Successful POST request\", function () {",
					"            pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
					"        });",
					"    }",
					"",
					"    if (request.method == 'PATCH'){",
					"",
					"        pm.test(\"Status code is 200\", function () {",
					"            pm.response.to.have.status(200);",
					"        });",
					"    }",
					"",
					"    if (pm.response.code == 200||pm.response.code == 201||pm.response.code == 202){",
					"        //Content type is json",
					"        pm.test(\"Content-Type header is application/json\", () => {",
					"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
					"        });",
					"",
					"        //getJson data",
					"        const jsonData = pm.response.json();",
					"",
					"        //Body of response is present by testing length of response",
					"        pm.test(\"Body is present\", () => {",
					"            jsonData.length > 1;",
					"        });",
					"",
					"        //Testing if jsonData is an object",
					"        pm.test(\"JsonData content\", () => {",
					"            pm.expect(jsonData).to.be.an(\"object\");",
					"        });",
					"    }",
					"",
					"}",
					"",
					"//Styles pour les listes",
					"if (request.url.includes('/settings/lists')){",
					"    pm.test(\"Code is a string\", function () {",
					"        pm.expect(pm.response.json().data.code).to.be.a(\"string\");",
					"    });",
					"    pm.test(\"description is a string\", function () {",
					"        pm.expect(pm.response.json().data.description).to.be.a(\"string\");",
					"    });",
					"    pm.test(\"moreResults is a boolean\", function () {",
					"        pm.expect(pm.response.json().data.moreResults).to.be.a(\"boolean\");",
					"    });",
					"    pm.test(\"title is a string\", function () {",
					"        pm.expect(pm.response.json().data.title).to.be.a(\"string\");",
					"    });",
					"    pm.test(\"type is a string\", function () {",
					"        pm.expect(pm.response.json().data.type).to.be.a(\"string\");",
					"    }); ",
					"    pm.visualizer.set(pm.collectionVariables.get(\"templateListes\"), {",
					"      response: pm.response.json()",
					"    });",
					"}",
					"",
					"//Tests de performance",
					"if (pm.environment.get(\"executePerformanceTests\") == 'true'){",
					"  if (request.method == 'GET'){",
					"    //Les listes doivent s'exécuter en moins de 500 ms",
					"    if (request.url.includes('/settings/lists')){",
					"        pm.test(\"Response time is less than 500ms\", function () {",
					"        pm.expect(pm.response.responseTime).to.be.below(500);",
					"       });",
					"    }else{",
					"        //Les recherches doivent s'exécuter en mois de une seconde et demi",
					"        pm.test(\"Response time is less than 1500ms\", function () {",
					"        pm.expect(pm.response.responseTime).to.be.below(1500);",
					"       });",
					"    }  ",
					"  }",
					"  if (request.method == 'POST'){",
					"       //Les POST doivent s'exécuter en moins de 2 secondes",
					"      pm.test(\"Response time is less than 2000ms\", function () {",
					"          pm.expect(pm.response.responseTime).to.be.below(2000);",
					"      });",
					"  }",
					"",
					"  if (request.method == 'PATCH'){",
					"      //Les PATCH doivent s'exécuter en moins de 2 secondes",
					"      pm.test(\"Response time is less than 2000ms\", function () {",
					"          pm.expect(pm.response.responseTime).to.be.below(2000);",
					"      });",
					"  }",
					"",
					"  if (request.method == 'PUT'){",
					"      //Les PUT doivent s'exécuter en moins de 2 secondes",
					"      pm.test(\"Response time is less than 2000ms\", function () {",
					"          pm.expect(pm.response.responseTime).to.be.below(2000);",
					"      });",
					"  }",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "currentDate",
			"value": ""
		},
		{
			"key": "1MonthLater",
			"value": ""
		},
		{
			"key": "6MonthsLater",
			"value": ""
		},
		{
			"key": "1MonthAgo",
			"value": ""
		},
		{
			"key": "4MonthsAgo",
			"value": ""
		},
		{
			"key": "5MonthsAgo",
			"value": ""
		},
		{
			"key": "6MonthsAgo",
			"value": ""
		},
		{
			"key": "lastYear",
			"value": ""
		},
		{
			"key": "5YearsAgo",
			"value": ""
		},
		{
			"key": "10YearsAgo",
			"value": ""
		},
		{
			"key": "15YearsAgo",
			"value": ""
		},
		{
			"key": "20YearsAgo",
			"value": ""
		},
		{
			"key": "30YearsAgo",
			"value": ""
		},
		{
			"key": "35YearsAgo",
			"value": ""
		},
		{
			"key": "40YearsAgo",
			"value": ""
		},
		{
			"key": "45YearsAgo",
			"value": ""
		},
		{
			"key": "50YearsAgo",
			"value": ""
		},
		{
			"key": "60YearsAgo",
			"value": ""
		},
		{
			"key": "70YearsAgo",
			"value": ""
		},
		{
			"key": "currentDateSearchFormat",
			"value": ""
		},
		{
			"key": "birthDate10YearsAgo",
			"value": ""
		},
		{
			"key": "birthDate20YearsAgo",
			"value": ""
		},
		{
			"key": "birthDate30YearsAgo",
			"value": ""
		},
		{
			"key": "birthDate40YearsAgo",
			"value": ""
		},
		{
			"key": "birthDate50YearsAgo",
			"value": ""
		},
		{
			"key": "birthDate60YearsAgo",
			"value": ""
		},
		{
			"key": "birthDate70YearsAgo",
			"value": ""
		},
		{
			"key": "birthDate80YearsAgo",
			"value": ""
		},
		{
			"key": "defaultOffset",
			"value": ""
		},
		{
			"key": "defaultLimit",
			"value": ""
		},
		{
			"key": "50_Limit",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "brokerId",
			"value": ""
		},
		{
			"key": "personBrokerId",
			"value": ""
		},
		{
			"key": "loginBroker",
			"value": ""
		},
		{
			"key": "profile",
			"value": ""
		},
		{
			"key": "naturalCustomerFamilyName",
			"value": ""
		},
		{
			"key": "naturalCustomerFirstName",
			"value": ""
		},
		{
			"key": "naturalCustomerGender",
			"value": ""
		},
		{
			"key": "naturalCustomerPhone",
			"value": ""
		},
		{
			"key": "naturalCustomerMail",
			"value": ""
		},
		{
			"key": "naturalCustomerBirthDate",
			"value": ""
		},
		{
			"key": "naturalCustomerAdrZipCode",
			"value": ""
		},
		{
			"key": "naturalCustomerAdrCity",
			"value": ""
		},
		{
			"key": "naturalCustomerAdressNumber",
			"value": ""
		},
		{
			"key": "naturalCustomerAdressStreetName",
			"value": ""
		},
		{
			"key": "naturalCustomerId",
			"value": ""
		},
		{
			"key": "naturalPersonAddressId",
			"value": ""
		},
		{
			"key": "naturalPersonId",
			"value": ""
		},
		{
			"key": "mandatoryPlansId",
			"value": ""
		},
		{
			"key": "templateListes",
			"value": " <style type=\"text/css\">\n        .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\n        .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\n        .tftable tr {background-color:#ffffff;}\n        .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\n        .tftable tr:hover {background-color:#e0ffff;}\n    </style>\n    \n    <table class=\"tftable\" border=\"1\">\n        <tr>\n            <th>Code</th>\n            <th>Label</th>\n        </tr>\n        \n        {{#each response.data.values}}\n            <tr id=row_{{@key}} onClick=\"handleClick(this.code)\">\n                <td id={{@key}}>{{code}}</td>\n                <td>{{label}}</td>\n            </tr>\n        {{/each}}\n    </table>"
		},
		{
			"key": "siret",
			"value": ""
		},
		{
			"key": "enterpriseCustomerName",
			"value": ""
		},
		{
			"key": "enterpriseCustomerMail",
			"value": ""
		},
		{
			"key": "enterpriseCustomerAdrZipCode",
			"value": ""
		},
		{
			"key": "enterpriseCustomerAdrCity",
			"value": ""
		},
		{
			"key": "naf",
			"value": ""
		},
		{
			"key": "enterpriseCustomerAdrStreet",
			"value": ""
		},
		{
			"key": "enterpriseCustomerPhone",
			"value": ""
		},
		{
			"key": "enterpriseCustomerId",
			"value": ""
		},
		{
			"key": "businessInformationsId",
			"value": ""
		},
		{
			"key": "enterpriseCustomerAddressId",
			"value": ""
		},
		{
			"key": "auxCode",
			"value": ""
		},
		{
			"key": "policeIDPSCS1",
			"value": ""
		},
		{
			"key": "affiliationPSCS1Id",
			"value": ""
		},
		{
			"key": "insuredId",
			"value": ""
		},
		{
			"key": "contractNumberPSCS1",
			"value": ""
		},
		{
			"key": "codeActeRCEquipementOptique",
			"value": ""
		},
		{
			"key": "glassesFrameOpticalEquipmentActCode",
			"value": ""
		},
		{
			"key": "eyeglassLensesOpticalEquipmentActCode",
			"value": ""
		},
		{
			"key": "prestationOptiqueMontureCode",
			"value": ""
		},
		{
			"key": "prestationOptiqueVerreCode",
			"value": ""
		},
		{
			"key": "insuredIdForStatementOptique",
			"value": ""
		},
		{
			"key": "insuredFamilyNameForStatementOptique",
			"value": ""
		},
		{
			"key": "insuredFirstNameForStatementOptique",
			"value": ""
		},
		{
			"key": "insuredBirthDateForStatementOptique",
			"value": ""
		},
		{
			"key": "insuredNameForStatementOptique",
			"value": ""
		},
		{
			"key": "invoiceNumberDevisDentaire",
			"value": ""
		},
		{
			"key": "devisDentaireMontantSoins",
			"value": ""
		},
		{
			"key": "equipementOptiqueClasseCode",
			"value": ""
		},
		{
			"key": "equipementOptiqueOeilDroitCode",
			"value": ""
		},
		{
			"key": "equipementOptiqueOeilGaucheCode",
			"value": ""
		},
		{
			"key": "folderName",
			"value": ""
		},
		{
			"key": "actCodeGeneralPractitioner",
			"value": ""
		},
		{
			"key": "actLabelGeneralPractitioner",
			"value": ""
		},
		{
			"key": "fundCodeMandatoryPlan",
			"value": ""
		},
		{
			"key": "dateDuJour",
			"value": ""
		},
		{
			"key": "dateDuJour_Plus_10_Jours",
			"value": ""
		},
		{
			"key": "dateDuJour_Plus_1_Mois",
			"value": ""
		},
		{
			"key": "dateDuJour_Plus_6_Mois",
			"value": ""
		},
		{
			"key": "dateDuJour_Moins_1_Mois",
			"value": ""
		},
		{
			"key": "dateDuJour_Moins_6_Mois",
			"value": ""
		},
		{
			"key": "dateNaissance10Ans",
			"value": ""
		},
		{
			"key": "dateNaissance30Ans",
			"value": ""
		},
		{
			"key": "dateNaissance40Ans",
			"value": ""
		},
		{
			"key": "dateNaissance50Ans",
			"value": ""
		},
		{
			"key": "dateNaissance60Ans",
			"value": ""
		},
		{
			"key": "dateNaissance70Ans",
			"value": ""
		},
		{
			"key": "dateNaissance80Ans",
			"value": ""
		},
		{
			"key": "dateDuJourFormatRecherche",
			"value": ""
		},
		{
			"key": "healthProfessionalId",
			"value": ""
		},
		{
			"key": "nafDoctor",
			"value": ""
		},
		{
			"key": "codeProviderDoctorType",
			"value": ""
		},
		{
			"key": "labelProviderDoctorType",
			"value": ""
		},
		{
			"key": "providerTitle",
			"value": ""
		},
		{
			"key": "almerysGroup",
			"value": ""
		},
		{
			"key": "groupAlmerys",
			"value": ""
		},
		{
			"key": "providerFamilyName",
			"value": ""
		},
		{
			"key": "providerFirstName",
			"value": ""
		},
		{
			"key": "providerAdrZipCode",
			"value": ""
		},
		{
			"key": "providerAdrCity",
			"value": ""
		},
		{
			"key": "providerAdrStreet",
			"value": ""
		},
		{
			"key": "providerAdrLatitude",
			"value": ""
		},
		{
			"key": "providerAdrLongitude",
			"value": ""
		},
		{
			"key": "providerPhoneNumber",
			"value": ""
		},
		{
			"key": "providerEmail",
			"value": ""
		},
		{
			"key": "providerWebSite",
			"value": ""
		},
		{
			"key": "providerExternalReference",
			"value": ""
		},
		{
			"key": "providerEnterpriseSiret",
			"value": ""
		},
		{
			"key": "providerEnterpriseSiren",
			"value": ""
		},
		{
			"key": "providerEnterpriseNic",
			"value": ""
		},
		{
			"key": "contactLastName",
			"value": ""
		},
		{
			"key": "contactFirstName",
			"value": ""
		},
		{
			"key": "contactPhoneNumber",
			"value": ""
		},
		{
			"key": "contactEmail",
			"value": ""
		},
		{
			"key": "providerId",
			"value": ""
		},
		{
			"key": "providerName",
			"value": ""
		},
		{
			"key": "providerPersonId",
			"value": ""
		},
		{
			"key": "providerFiness",
			"value": ""
		},
		{
			"key": "providerRpps",
			"value": ""
		},
		{
			"key": "providerReference",
			"value": ""
		},
		{
			"key": "generalSchemeInsurance",
			"value": ""
		},
		{
			"key": "dateNaissance20Ans",
			"value": ""
		},
		{
			"key": "nafPharmacy",
			"value": ""
		},
		{
			"key": "codeProviderPharmacyType",
			"value": ""
		},
		{
			"key": "labelProviderPharmacyType",
			"value": ""
		},
		{
			"key": "providerEnterpriseName",
			"value": ""
		},
		{
			"key": "providerEnterpriseSupplementName",
			"value": ""
		},
		{
			"key": "providerSiret",
			"value": ""
		},
		{
			"key": "providerSiren",
			"value": ""
		},
		{
			"key": "nafHospital",
			"value": ""
		},
		{
			"key": "codeProviderHospitalType",
			"value": ""
		},
		{
			"key": "labelProviderHospitalType",
			"value": ""
		},
		{
			"key": "nafHopital",
			"value": ""
		},
		{
			"key": "typePrestataireDentisteCode",
			"value": ""
		},
		{
			"key": "typePrestataireDentisteLabel",
			"value": ""
		},
		{
			"key": "providerBank",
			"value": ""
		},
		{
			"key": "providerEntrepriseName",
			"value": ""
		},
		{
			"key": "providerEntrepriseSupplementName",
			"value": ""
		},
		{
			"key": "providerEntrepriseSiret",
			"value": ""
		},
		{
			"key": "providerEntrepriseSiren",
			"value": ""
		},
		{
			"key": "providerEntrepriseNic",
			"value": ""
		},
		{
			"key": "providerBankZipCode",
			"value": ""
		},
		{
			"key": "providerBankCity",
			"value": ""
		},
		{
			"key": "providerBankStreet",
			"value": ""
		},
		{
			"key": "insuredIdForStatementGeneralPractitioner",
			"value": ""
		},
		{
			"key": "insuredFamilyNameForStatementGeneralPractitioner",
			"value": ""
		},
		{
			"key": "insuredFirstNameForStatementGeneralPractitioner",
			"value": ""
		},
		{
			"key": "insuredBirthDateForStatementGeneralPractitioner",
			"value": ""
		},
		{
			"key": "insuredNameForStatementGeneralPractitioner",
			"value": ""
		},
		{
			"key": "insuredNumberForStatementGeneralPractitioner",
			"value": ""
		},
		{
			"key": "euro",
			"value": ""
		},
		{
			"key": "healthProfessionalFiness",
			"value": ""
		},
		{
			"key": "consultationGeneralPractitionerInvoiceStatement",
			"value": ""
		},
		{
			"key": "consultationGeneralPractitionerStatementId",
			"value": ""
		},
		{
			"key": "consultationGeneralPractitionerEnteredStatementLines",
			"value": ""
		},
		{
			"key": "consultationGeneralPractitionerGeneratedStatementLines",
			"value": ""
		},
		{
			"key": "decompteConsultationGeneralisteRecherché",
			"value": ""
		},
		{
			"key": "insuredIdForStatementConsultationGeneraliste",
			"value": ""
		},
		{
			"key": "insuredFamilyNameForStatementConsultationGeneraliste",
			"value": ""
		},
		{
			"key": "insuredFirstNameForStatementConsultationGeneraliste",
			"value": ""
		},
		{
			"key": "insuredBirthDateForStatementConsultationGeneraliste",
			"value": ""
		},
		{
			"key": "insuredNameForStatementConsultationGeneraliste",
			"value": ""
		},
		{
			"key": "consultationGeneralPractitionerSearchedStatement",
			"value": ""
		},
		{
			"key": "statement_Cancellation_Status",
			"value": ""
		},
		{
			"key": "insuredIdForDentalProsthesisQuote",
			"value": ""
		},
		{
			"key": "insuredFamilyNameForDentalProsthesisQuote",
			"value": ""
		},
		{
			"key": "insuredFirstNameForDentalProsthesisQuote",
			"value": ""
		},
		{
			"key": "insuredBirthDateForDentalProsthesisQuote",
			"value": ""
		},
		{
			"key": "insuredNameForDentalProsthesisQuote",
			"value": ""
		},
		{
			"key": "actCodeMetalDentalProsthesis",
			"value": ""
		},
		{
			"key": "actLabelMetalDentalProsthesis",
			"value": ""
		},
		{
			"key": "invoiceNumberDentalQuote",
			"value": ""
		},
		{
			"key": "insuredIdForStatement",
			"value": ""
		},
		{
			"key": "RCActCodeDentalAnesthesia",
			"value": ""
		},
		{
			"key": "RCActCLabelDentalAnesthesia",
			"value": ""
		},
		{
			"key": "RCActCodeDentalSurgery",
			"value": ""
		},
		{
			"key": "RCActCLabelDentalSurgery",
			"value": ""
		},
		{
			"key": "externalReference",
			"value": ""
		},
		{
			"key": "ROactCodeMetalDentalProsthesis",
			"value": ""
		},
		{
			"key": "ROactLabelMetalDentalProsthesis",
			"value": ""
		},
		{
			"key": "codeActeRCAnesthesieDentaire",
			"value": ""
		},
		{
			"key": "libelleActeRCAnesthesieDentaire",
			"value": ""
		},
		{
			"key": "codeActeRCChirurgieDentaire",
			"value": ""
		},
		{
			"key": "libelleActeRCChirurgieDentaire",
			"value": ""
		},
		{
			"key": "emailTestPrefixe",
			"value": ""
		},
		{
			"key": "emailTestAdresse",
			"value": ""
		},
		{
			"key": "insuredIdForAgreement",
			"value": ""
		},
		{
			"key": "careTypeCode",
			"value": ""
		},
		{
			"key": "codeActeConsultationGeneraliste",
			"value": ""
		},
		{
			"key": "libelleActeConsultationGeneraliste",
			"value": ""
		},
		{
			"key": "Euro",
			"value": ""
		},
		{
			"key": "typePrestataireMedecinCode",
			"value": ""
		},
		{
			"key": "typePrestataireMedecinLabel",
			"value": ""
		},
		{
			"key": "invoiceDecompteConsultationGeneraliste",
			"value": ""
		},
		{
			"key": "providerGroup",
			"value": ""
		},
		{
			"key": "searchedProvider",
			"value": ""
		},
		{
			"key": "providerfiness",
			"value": ""
		},
		{
			"key": "dentaltProposalId",
			"value": ""
		},
		{
			"key": "invoiceDentalProposal",
			"value": ""
		},
		{
			"key": "consultationGeneralPractitionerStatementNumber",
			"value": ""
		},
		{
			"key": "personFamilyName",
			"value": ""
		},
		{
			"key": "personFirstName",
			"value": ""
		},
		{
			"key": "personGender",
			"value": ""
		},
		{
			"key": "personPhone",
			"value": ""
		},
		{
			"key": "personMail",
			"value": ""
		},
		{
			"key": "personBirthDate",
			"value": ""
		},
		{
			"key": "personAdrZipCode",
			"value": ""
		},
		{
			"key": "personAdrCity",
			"value": ""
		},
		{
			"key": "personAdressNumber",
			"value": ""
		},
		{
			"key": "personAdressStreetName",
			"value": ""
		},
		{
			"key": "jobCategoryCode",
			"value": ""
		},
		{
			"key": "2MonthsAgo",
			"value": ""
		},
		{
			"key": "naturalPersonFamilyName",
			"value": ""
		},
		{
			"key": "naturalPersonFirstName",
			"value": ""
		},
		{
			"key": "naturalPersonGender",
			"value": ""
		},
		{
			"key": "naturalPersonPhone",
			"value": ""
		},
		{
			"key": "naturalPersonMail",
			"value": ""
		},
		{
			"key": "naturalPersonBirthDate",
			"value": ""
		},
		{
			"key": "naturalPersonAdrZipCode",
			"value": ""
		},
		{
			"key": "naturalPersonAdrCity",
			"value": ""
		},
		{
			"key": "naturalPersonAdressNumber",
			"value": ""
		},
		{
			"key": "naturalPersonAdressStreetName",
			"value": ""
		},
		{
			"key": "personId",
			"value": ""
		},
		{
			"key": "customerAdrZipCode",
			"value": ""
		},
		{
			"key": "customerAdrCity",
			"value": ""
		},
		{
			"key": "customerAdressNumber",
			"value": ""
		},
		{
			"key": "customerAdressStreetName",
			"value": ""
		},
		{
			"key": "companyAdrZipCode",
			"value": ""
		},
		{
			"key": "companyAdrCity",
			"value": ""
		},
		{
			"key": "companyAdrStreet",
			"value": ""
		},
		{
			"key": "personBankDetailsID",
			"value": ""
		},
		{
			"key": "VIAMEDISId",
			"value": ""
		},
		{
			"key": "insuredName",
			"value": ""
		},
		{
			"key": "dentalProsthesisQuoteId",
			"value": ""
		},
		{
			"key": "dentalProsthesisQuoteEnteredStatementLines",
			"value": ""
		},
		{
			"key": "dentalProsthesisQuoteGeneratedStatementLines",
			"value": ""
		},
		{
			"key": "dentalProsthesisQuoteInvoiceStatement",
			"value": ""
		},
		{
			"key": "searchedDentalProsthesisQuote",
			"value": ""
		},
		{
			"key": "surgeryQuoteId",
			"value": ""
		},
		{
			"key": "dentalSurgeryQuoteInvoice",
			"value": ""
		},
		{
			"key": "invoiceDevisChirurgieDentaire",
			"value": ""
		},
		{
			"key": "invoicePECDevisChirurgieDentaire",
			"value": ""
		},
		{
			"key": "insuredNumber",
			"value": ""
		},
		{
			"key": "invoiceNumberDevisOptique",
			"value": ""
		},
		{
			"key": "10DaysLater",
			"value": ""
		},
		{
			"key": "insuredFamilyName",
			"value": ""
		},
		{
			"key": "insuredFirstName",
			"value": ""
		},
		{
			"key": "insuredBirthDate",
			"value": ""
		},
		{
			"key": "decompteConsultationGeneraliteId",
			"value": ""
		},
		{
			"key": "ligneDecompteSaisieConsultationGeneraliste",
			"value": ""
		},
		{
			"key": "ligneDecompteGenereeConsultationGeneraliste",
			"value": ""
		},
		{
			"key": "decompteId",
			"value": ""
		},
		{
			"key": "dentisteId",
			"value": ""
		},
		{
			"key": "opticalQuoteId",
			"value": ""
		},
		{
			"key": "decompteConsultationGeneraliteNumber",
			"value": ""
		},
		{
			"key": "hospitalId",
			"value": ""
		},
		{
			"key": "companyAdressNumber",
			"value": ""
		},
		{
			"key": "insuredFamilyNameForStatement",
			"value": ""
		},
		{
			"key": "insuredFirstNameForStatement",
			"value": ""
		},
		{
			"key": "insuredBirthDateForStatement",
			"value": ""
		},
		{
			"key": "insuredNameForStatement",
			"value": ""
		},
		{
			"key": "insuredNumberForStatement",
			"value": ""
		},
		{
			"key": "insuredNumberForStatementOptique",
			"value": ""
		},
		{
			"key": "Sexe",
			"value": ""
		},
		{
			"key": "AnneeNaissance",
			"value": ""
		},
		{
			"key": "MoisNaissance",
			"value": ""
		},
		{
			"key": "DepartementNaissance",
			"value": ""
		},
		{
			"key": "InseeCommune",
			"value": ""
		},
		{
			"key": "NumeroOrdre",
			"value": ""
		},
		{
			"key": "nir",
			"value": ""
		},
		{
			"key": "cleNir",
			"value": ""
		},
		{
			"key": "codeRegimeGeneral",
			"value": ""
		},
		{
			"key": "codeCaisseRO",
			"value": ""
		},
		{
			"key": "codeCentreRO",
			"value": ""
		},
		{
			"key": "insuredNumberForDentalProsthesisQuote",
			"value": ""
		},
		{
			"key": "invoiceDecompte",
			"value": ""
		},
		{
			"key": "decompteNumber",
			"value": ""
		},
		{
			"key": "ligneDecompteSaisiedecompte",
			"value": ""
		},
		{
			"key": "ligneDecompteGenereedecompte",
			"value": ""
		},
		{
			"key": "invoiceDecomptedecompte",
			"value": ""
		},
		{
			"key": "nafDentiste",
			"value": ""
		},
		{
			"key": "fakerText",
			"value": ""
		},
		{
			"key": "batchDeclarationAssureId",
			"value": ""
		},
		{
			"key": "batchTraitementPonctuelAttestationId",
			"value": ""
		},
		{
			"key": "codeActe",
			"value": ""
		},
		{
			"key": "libelleActe",
			"value": ""
		},
		{
			"key": "2DaysAgo",
			"value": ""
		},
		{
			"key": "3MonthsAgo",
			"value": ""
		}
	]
}